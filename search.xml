<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>差分约束——2</title>
      <link href="/2022/03/20/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F-2/"/>
      <url>/2022/03/20/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F-2/</url>
      
        <content type="html"><![CDATA[<h1 id="part-Ⅰ"><a href="#part-Ⅰ" class="headerlink" title="part Ⅰ"></a>part Ⅰ</h1><ul><li><p>差分约束系统的定义:<br>如果一个系统由n个变量和m个约束条件组成，形成m个形如$ai-aj≤k(i,j∈[1,n],k为常数)$的不等式则称其为差分约束系统</p></li><li><p>一个引理(做差后差值不变):</p></li></ul><p>设$x=(x1,x2,…,xn)$是差分约束系统$Ax≤b$的一个解，d为任意常数</p><p>则$x+d=(x1+d,x2+d,…,xn+d)$也是该系统$Ax≤b$的一个解</p><p>而我们看到的算法解决的问题也就是:在确定一个未知数的情况下,求出这个不等式组中每个$a_i$的符合不等式的最大值(为什么?接着看吧)</p><p>部分资料里面讲:由于不等式$x_i&lt;=x_j+k$和最短路里面的松弛条件:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">></span>dis<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">+</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span>    dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">+</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>颇有相像之处,于是我们可以用最短路来解决这个问题,具体操作就是对于$x_i&lt;=x_j+k$这个不等式,需要从$x_j$向$x_i$连一条权值为k的边</p><p><del>蒟蒻抠破头皮都没怎么想出来如何理解这个说法</del>,于是用了另外一种方法理解:</p><p>对于任意的一个点$x_i$,假设有如下约束关系:</p><p>$$<br>x_i&lt;=x_a+k_a, \<br>x_i&lt;=x_b+k_b, <br>x_i&lt;=x_c+k_c, <br>x_i&lt;=x_d+k_d, <br>x_i&lt;=x_e+k_e <br>$$</p><p>画成图就是这样:<br><img src="https://img-blog.csdnimg.cn/20190901172825678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>显然.对于上面的不等式,我们人工来解的时候一定是同小取小,也就是取</p><p>$x_j+k_j(j=a,b,c,d,e)$</p><p>的最小值</p><p>同样的,在最短路算法里面,当你跑完一次最短路的时候</p><p>$x_i$一定是$x_j+k_j(j=a,b,c,d,e)$的最小值</p><p>并且这个$x_i$就是<strong>满足这个约束条件的最大值</strong></p><hr><p>关于这个”xi就是满足这个约束条件的最大值”还有另一种理解方式</p><p>我们给$x_i&lt;=x_j+k_j$赋予一个意义:$x_i$比$x_j$最多多$k_j$</p><p>那么对于任意一个$x_i$,都会有大于等于0个$x_j$来约束它,如果有一个$x_j=5$比$x_i$最多少3,另一个$x_j=2$比$x_i$最多少1,那么这个时候$x_i$能够取到的最大值就只第二个$x_j$的值加上1,也就是3了</p><p>也就是说,通过分析$x_i$被$x_j$的约束情况就可以知道这样建图最后求出来的值究竟是最大还是最小了</p><hr><p>最后发现,这不就是这些不等式组和最短路相似的地方吗?<del>这就很妙了是吧</del></p><p>看来还是大佬说的对,蒟蒻只是无法理解罢了…</p><p>现在还有一个问题没有解决:如何确定起点</p><p>根据引理,如果我们得到了一组为负数的解,那么将这组解同时加上一个数也是这个系统的一组解</p><p>那么我们不妨设一个$x_0=0$,然后对每个$x_i$多写一个不等式:$x_i&lt;=x_0$,也就是$x_i&lt;=x_0+0$,这样的话,以$x_0$为起点跑一个单源最短路,就可以得到所有未知数的最大非正数解了,然后如何处置就随意咯</p><h1 id="part-Ⅱ"><a href="#part-Ⅱ" class="headerlink" title="part Ⅱ"></a>part Ⅱ</h1><p>如果不等式中的不等号方向倒转，也就是变成了$ai-aj≤k$怎么办？</p><p>注意到不等式是可以反号的，于是可以转化为上面的不等式</p><p>当然,也可以不转化</p><p>用上面讲到的办法,可以判断出,如果用最长路算法,可以求出每个未知数在约束范围内的最小值,同样,如果设一个$x_0$,那么求出来的解就是最小的非负整数解</p><p>当然,事情并不是永远那么一帆风顺</p><p>那当你遇到这种不等式的时候怎么办?</p><p>$$<br>a-b&gt;=k_1,<br>b-c&lt;=k_2,<br>c-d&lt;=k_3,<br>d=e,<br>f-e&gt;=k_4,<br>f-a&lt;=k_5<br>$$</p><p>首先,关于这个等式$d=e$,可以化为$d&lt;=e,e&lt;=d$</p><p>然后,虽然我们可以将这个不等式任意变号然后求最长或最短路,但是我们还是需要看问题,如果问题问的是求xxx的最大值,那么就应该去求最短路,反之就是求最长路</p><h1 id="part-Ⅲ"><a href="#part-Ⅲ" class="headerlink" title="part Ⅲ"></a>part Ⅲ</h1><p>但是,不等式组一定有解吗?</p><p>显然不是,总的来讲,有下面几种情况:</p><ol><li>不等式有解</li><li>不等式中的式子互相矛盾,最后出现了自己大(小)于自己的情况</li><li>不等式中的某些未知数之间没有一定的约束关系</li></ol><p>第一种情况不再讨论</p><p>对于第二种情况,在最长路上就是出现了正环,最短路上就是出现了负环(从正负环的定义和性质出发,给松弛操作赋予意义便可以考虑清楚)</p><p>第三种情况,如果以x为起点跑程序的话,和x没有约束关系的值的dis不会被更新</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差分约束——1</title>
      <link href="/2022/03/20/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F-1/"/>
      <url>/2022/03/20/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F-1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-引例"><a href="#1-引例" class="headerlink" title="1.引例"></a>1.引例</h1><h2 id="1、一类不等式组的解"><a href="#1、一类不等式组的解" class="headerlink" title="1、一类不等式组的解"></a>1、一类不等式组的解</h2><p><strong>给定n个变量和m个不等式，每个不等式形如 x[i] – x[j] &lt;= a[k] (0 &lt;= i, j &lt; n, 0 &lt;= k &lt; m， a[k]已知)，求 x[n-1] – x[0] 的最大值。例如当n = 4，m = 5，不等式组如图一-1-1所示的情况，求x3 – x0的最大值。</strong>  </p><p><img src="https://img-blog.csdnimg.cn/img_convert/2d98808ff87994c0084673909c53f64c.png" alt="1-1"></p><p>图一-1-1</p><p><strong>观察x3 – x0的性质，我们如果可以通过不等式的两两加和得到c个形如 x3 – x0 &lt;= Ti 的不等式，那么 min{ Ti | 0 &lt;= i &lt; c } 就是我们要求的x3 – x0的最大值。于是开始人肉，费尽千辛万苦，终于整理出以下三个不等式：</strong></p><pre class="line-numbers language-none"><code class="language-none">(3) x3 – x0 &lt;&#x3D; 8(2) + (5) x3 – x0 &lt;&#x3D; 9(1) + (4) + (5) x3 – x0 &lt;&#x3D; 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>这里的T等于{8， 9， 7}，所以min{ T } = 7，答案就是7。的确是7吗？我们再仔细看看，发现的确没有其它情况了。那么问题就是这种方法即使做出来了还是带有问号的，不能确定正确与否，如何系统地解决这类问题呢？</strong></p><p><strong>让我们来看另一个问题，这个问题描述相对简单，给定四个小岛以及小岛之间的有向距离，问从第0个岛到第3个岛的最短距离。如图一-1-2所示，箭头指向的线段代表两个小岛之间的有向边，蓝色数字代表距离权值。</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/889a4c5ed79ec21fa4fed72ab8523ebc.png" alt="1-2"></p><p>图一-1-2</p><p><strong>这个问题就是经典的最短路问题。由于这个图比较简单，我们可以枚举所有的路线，发现总共三条路线，如下：<br>0 -&gt; 3 长度为8<br>0 -&gt; 2 -&gt; 3 长度为7+2 = 9<br>0 -&gt; 1 -&gt; 2 -&gt; 3 长度为2 + 3 + 2 = 7</strong></p><p><strong>最短路为三条线路中的长度的最小值即7，所以最短路的长度就是7。</strong></p><h1 id="2-差分约束"><a href="#2-差分约束" class="headerlink" title="2.差分约束"></a>2.差分约束</h1><h2 id="1、数形结合"><a href="#1、数形结合" class="headerlink" title="1、数形结合"></a>1、数形结合</h2><p><strong>如若一个系统由n个变量和m个不等式组成，并且这m个不等式对应的系数矩阵中每一行有且仅有一个1和-1，其它的都为0，这样的系统称为差分约束( difference constraints )系统。引例中的不等式组可以表示成如图三-1-1的系数矩阵。</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/8c29593c0bad916b57637b3baf3e29cf.png" alt="1-1"></p><p>图三-1-1</p><p><strong>然后继续回到单个不等式上来，观察</strong></p><pre class="line-numbers language-none"><code class="language-none">x[i] – x[j] &lt;&#x3D; a[k]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>将这个不等式稍稍变形，将x[j]移到不等式右边，则有</strong></p><pre class="line-numbers language-none"><code class="language-none">x[i] &lt;&#x3D; x[j] + a[k]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>然后我们令a[k] = w(j, i)，再将不等式中的i和j变量替换掉，i = v， j = u，将x数组的名字改成d（以上都是等价变换，不会改变原有不等式的性质），则原先的不等式变成了以下形式：</strong></p><pre class="line-numbers language-none"><code class="language-none">d[u] + w(u, v) &gt;&#x3D; d[v]。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这时候联想到SPFA中的一个松弛操作：</strong></p><pre class="line-numbers language-none"><code class="language-none">if(d[u] + w(u, v) &lt; d[v]) &#123;    d[v] &#x3D; d[u] + w(u, v);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对比上面的不等式， 两个不等式的不等号_正好相反_</strong></p><p><strong>但是再仔细一想，其实它们的逻辑是一致的，因为SPFA的松弛操作是在满足小于的情况下进行松弛，力求达到</strong></p><p><strong>d[u] + w(u, v) &gt;= d[v]</strong></p><p><strong>而我们之前令a[k] = w(j, i)，所以我们可以将每个不等式转化成图上的有向边：</strong></p><p><strong>对于每个不等式 x[i] – x[j] &lt;= a[k]，对结点 j 和 i 建立一条 j -&gt; i的有向边，边权为a[k]，则</strong></p><p><del>！！！敲马桶！！！</del></p><p><strong><em>求x[n-1] – x[0] 的最大值就是求 0 到n-1的最短路。</em></strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2d98808ff87994c0084673909c53f64c.png" alt="1-1"></p><p>图三-1-1</p><p><img src="https://img-blog.csdnimg.cn/img_convert/889a4c5ed79ec21fa4fed72ab8523ebc.png" alt="1-2"></p><p>图三-1-2</p><h3 id="图三-1-2-展示了-图三-1-1的不等式组转化后的图。"><a href="#图三-1-2-展示了-图三-1-1的不等式组转化后的图。" class="headerlink" title="图三-1-2 展示了 图三-1-1的不等式组转化后的图。"></a>图三-1-2 展示了 图三-1-1的不等式组转化后的图。</h3><h2 id="2、三角不等式"><a href="#2、三角不等式" class="headerlink" title="2、三角不等式"></a>2、三角不等式</h2><p><strong>如果还没有完全理解，我们可以先来看一个简单的情况，如下三个不等式：</strong></p><pre class="line-numbers language-none"><code class="language-none">B – A &lt;&#x3D; c (1)C – B &lt;&#x3D; a (2)C – A &lt;&#x3D; b (3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>我们想要知道C – A的最大值，通过(1) + (2)，可以得到 C – A &lt;= a + c，所以这个问题其实就是求min{b, a+c}。将上面的三个不等式按照 三-1 数形结合 中提到的方式建图，如图三-2-1所示。</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/20b667615ebe86caafba87ea43ae44ec.png" alt="2-1"></p><p>图三-2-1</p><p><strong>我们发现min{b, a+c}正好对应了A到C的最短路，而这三个不等式就是著名的 三角不等式 。将三个不等式推广到m个，变量推广到n个，就变成了n个点m条边的最短路问题了。</strong></p><p><strong>（min（C-A）=求A到C的最短路）</strong><br><strong>（min（n-0）=求n到0的最短路）</strong></p><h2 id="3、解的存在性"><a href="#3、解的存在性" class="headerlink" title="3、解的存在性"></a>3、解的存在性</h2><p><strong>上文提到最短路的时候，会出现负权圈或者根本就不可达的情况，所以在不等式组转化的图上也有可能出现上述情况.</strong></p><p><strong>先来看负权圈的情况，如图三-3-1，下图为5个变量5个不等式转化后的图，需要求得是X[t] – X[s]的最大值，可以转化成求s到t的最短路，但是路径中出现负权圈，则表示最短路无限小，即不存在最短路，那么在不等式上的表现即X[t] – X[s] &lt;= T中的T无限小，得出的结论就是 X[t] – X[s]的最大值 不存在。</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/b3ad9db67012ea8ada50b33ea022a1b4.png" alt="3-1"></p><p>图三-3-1</p><p><strong>再来看另一种情况，即从起点s无法到达t的情况，如图三-3-2，表明X[t]和X[s]之间并没有约束关系，这种情况下X[t] – X[s]的最大值是无限大，这就表明了X[t]和X[s]的取值有无限多种。</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d9f523f126fa6293ee7ab5990ab48966.png" alt="3-2"><br>图三-3-2</p><p>在实际问题中这两种情况会让你给出不同的输出。</p><h3 id="综上所述，差分约束系统的解有三种情况：1、有解；2、无解；3、无限多解；"><a href="#综上所述，差分约束系统的解有三种情况：1、有解；2、无解；3、无限多解；" class="headerlink" title="综上所述，差分约束系统的解有三种情况：1、有解；2、无解；3、无限多解；"></a>综上所述，差分约束系统的解有三种情况：1、有解；2、无解；3、无限多解；</h3><h2 id="4、最大值-gt-最小值"><a href="#4、最大值-gt-最小值" class="headerlink" title="4、最大值 =&gt; 最小值"></a>4、最大值 =&gt; 最小值</h2><p><strong>然后，我们将问题进行一个简单的转化，将原先的”&lt;=”变成”&gt;=”，转化后的不等式如下：</strong></p><pre class="line-numbers language-none"><code class="language-none">原先：B – A &lt;&#x3D; c (1)C – B &lt;&#x3D; a (2)C – A &lt;&#x3D; b (3)现在：B – A &gt;&#x3D; c (1)C – B &gt;&#x3D; a (2)C – A &gt;&#x3D; b (3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>然后求C – A的最 <em>小</em> 值（不是最大值！！！最大值最小，最小值最大），类比之前的方法，需要求的其实是max{b, c+a}，于是对应的是下图从A到C的最长路。同样可以推广到n个变量m个不等式的情况。</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/40eb8c2859d950a28664b1a9d0a320a8.png" alt="2-1"></p><h2 id="5、不等式标准化"><a href="#5、不等式标准化" class="headerlink" title="5、不等式标准化"></a>5、不等式标准化</h2><p><strong>如果给出的不等式有”&lt;=”也有”&gt;=”，又该如何解决呢？</strong></p><h3 id="很明显，首先需要关注最后的问题是什么"><a href="#很明显，首先需要关注最后的问题是什么" class="headerlink" title="很明显，首先需要关注最后的问题是什么"></a>很明显，首先需要关注最后的问题是什么</h3><p><strong>如果需要求的是两个变量差的最大值，那么需要将所有不等式转变成”&lt;=”的形式，建图后求最短路；相反，如果需要求的是两个变量差的最小值，那么需要将所有不等式转化成”&gt;=”，建图后求最长路。</strong></p><p><strong>如果有形如：A – B = c 这样的等式呢？我们可以将它转化成以下两个不等式：</strong></p><pre class="line-numbers language-none"><code class="language-none">A – B &gt;&#x3D; c (1)A – B &lt;&#x3D; c (2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>再通过上面的方法将其中一种不等号反向，建图即可。</strong><br><strong>最后，如果这些变量都是整数域上的，那么遇到A – B &lt; c这样的_不带等号_的不等式，我们需要将它转化成”&lt;=”或者”&gt;=”的形式，即 :</strong></p><p><strong>A – B &lt;= c – 1</strong></p><h2 id="关于求最长路"><a href="#关于求最长路" class="headerlink" title="关于求最长路"></a>关于求最长路</h2><p><strong>求最短路的算法太多了，但最长路就要特殊一些，<br>在一个无负环的图中，若点v到u的路径中有环，则最长路是无解的，即为正无穷，若无环才可以解出v到u的最长路</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近在干些什么呢</title>
      <link href="/2022/03/20/%E6%9C%80%E8%BF%91%E5%9C%A8%E5%B9%B2%E4%BA%9B%E4%BB%80%E4%B9%88%E5%91%A2/"/>
      <url>/2022/03/20/%E6%9C%80%E8%BF%91%E5%9C%A8%E5%B9%B2%E4%BA%9B%E4%BB%80%E4%B9%88%E5%91%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="好好学习"><a href="#好好学习" class="headerlink" title="好好学习"></a>好好学习</h1><ul><li>天天向上</li></ul><h1 id="蓝桥杯"><a href="#蓝桥杯" class="headerlink" title="蓝桥杯"></a>蓝桥杯</h1><ul><li>比赛复盘（TODO)</li><li>数据结构（树状数组，线段树）（TODO)</li><li>DP（背包，LCS，基础DP）（TODO)</li><li>DFS，BFS（TODO)</li><li>STL库的复习（TODO)</li></ul><h1 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h1><ul><li>教材（TODO）</li></ul><h1 id="word2vec"><a href="#word2vec" class="headerlink" title="word2vec"></a>word2vec</h1><ul><li><a href="https://www.cnblogs.com/pinard/p/7160330.html">word2vec 教程</a>（TODO）</li><li><a href="https://zhuanlan.zhihu.com/p/29815081">DNN</a>（TODO）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵基本运算</title>
      <link href="/2022/03/20/%E7%9F%A9%E9%98%B5%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/"/>
      <url>/2022/03/20/%E7%9F%A9%E9%98%B5%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/8660bf924faa4f85a4fd23dfeb37f62b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次做全栈的我</title>
      <link href="/2022/03/18/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%81%9A%E5%85%A8%E6%A0%88%E7%9A%84%E6%88%91/"/>
      <url>/2022/03/18/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%81%9A%E5%85%A8%E6%A0%88%E7%9A%84%E6%88%91/</url>
      
        <content type="html"><![CDATA[<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>这次的科创比赛项目本来是希望能够做一个类似于外卖接单和评价一体化的系统，但是由于各种原因，最后需求只好收缩为做一个文本分类器和一个简单的评价系统。</p><p>至于是什么原因。。。只能说是因为第一次参加类似的比赛，因此对比赛的流程不熟悉，也没有提前调研和准备的意识，因此提出了一个不符合实际的需求，并且把项目的时间压的太死。</p><p>因此如果要参加科研比赛，那就得提前开始做项目，需要参加比赛的时候就直接拿出项目来就行了，这东西是可以多投的。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="文本分类器"><a href="#文本分类器" class="headerlink" title="文本分类器"></a>文本分类器</h2><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h3><p>文本分类器嘛，就需要分类算法。在简单了解了机器学习的一些知识之后，发现<strong>朴素贝叶斯算法</strong>对我来说比较好研究和实现，并且效果应该还不错。因此正好趁着返校后隔离的时间写了朴素贝叶斯的算法代码。</p><p>当然，使用os库和pandas库清洗所给数据啥的，也是必须得会的，不然一层层文件夹里面的数据要手动拿出来是会G的…</p><p><a href="https://blog.csdn.net/longxinchen_ml/article/details/50597149?utm_source=app&app_version=5.1.1&code=app_1562916241&uLinkId=usr1mkqgl919blen">带我入门朴素贝叶斯原理的文章</a></p><p><a href="https://andrew82106.github.io/2022/03/12/%E5%B0%8F%E5%AD%A6%E4%B8%80%E6%B3%A2-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95/">我的朴素贝叶斯算法原理总结</a></p><h3 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h3><p><del>如果我们把网页端这种东西叫做前端的话，那我也算是做了一些前端的开发吧。</del></p><p>在写完算法部分后，我发现比赛的要求是需要提交成果的，因此我估摸着学一下前端，来在服务器上搭建一个网站用来展示成果，到时候收成果的时候给ip就行。但是在那个时候我还是不知道用什么来写前端的，当然css，html，js这些东西也是完全不会。</p><p>后来接触到了<strong>Flask</strong>，看了Flask的课程，然后就有了头绪，于是利用之前买的书开始学<strong>css</strong>和<strong>html</strong>，顺带着学了一点<strong>js</strong>。</p><p>但是到此时，前端怎么写当然还是一头雾水。因此又在b站上刷了很多视频，最后接触到了<strong>bootstrap</strong>，觉得它提供的模版挺高端的，因此就download了bootstrap的模板用来做了前端</p><p>之后的数据展示是沿用了之前学过的<strong>pyecharts</strong>库做的数据可视化，不得不说，挺好看的</p><p><a href="https://www.bilibili.com/video/BV17W41177oE?spm_id_from=333.999.0.0">入门flask的课程，里面给的笔记挺好的</a></p><p><a href="https://andrew82106.github.io/2022/02/27/%E2%80%9CHTML5%E5%85%89%E9%80%9F%E5%85%A5%E9%97%A8%EF%BC%88doge%EF%BC%89%E2%80%9D/">我关于html的总结</a></p><p><a href="https://www.bilibili.com/video/BV1FY411G7Z6?spm_id_from=333.999.0.0">第一次见到bootstrap</a></p><p><a href="https://v5.bootcss.com/">bootstrap中文文档</a></p><p><a href="https://pyecharts.org/#/">pyecharts官方文档</a></p><p><a href="https://www.cnblogs.com/huipengly/p/8424096.html">关于github本地仓库里面误添加了大文件情况的处理</a></p><p><a href="https://blog.csdn.net/qq_36254947/article/details/108641438">关于github本地仓库里面误添加了大文件情况的处理2</a></p><h3 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h3><p>网页大差不差写出来了，但是还没有部署到服务器上面，当然是不行的。但是之前的确也没有用过服务器的经验，因此又刷了一波b站之类的，找了一下方向。</p><p>之后购买了百度的轻量级应用服务器（主要是便宜），装了一个centos7，于是又开始学习<strong>linux</strong>命令，并且为了解决Python的环境问题，把之前没搞懂过的Python虚拟环境配置弄清楚了，最后在重装了三四次系统后终于成功使用anaconda在服务器上安装了Python，下载了所有的依赖包，并且成功使用flask提供的接口访问到了我的程序，访问成功的那一刻的确挺有成就感的。</p><p>但是显然还不行，因为flask提供的接口只是用于程序制作的时候调试所用，而非实际用户使用。经过查询资料，发现需要使用uwsgi来挂载flask程序。于是在踩坑无数后，某人终于成功挂载了程序。（主要是视频里面有很多坑，幸好下面的评论里面有dalao指出来了）</p><p><a href="https://www.bilibili.com/video/BV1CJ411y7AW?spm_id_from=333.880.my_history.page.click">使用uwsgi部署教程</a></p><p><a href="https://www.bilibili.com/video/BV1qJ41157n4?spm_id_from=333.880.my_history.page.click">也是使用uwsgi部署教程</a></p><p><a href="https://my.oschina.net/RabbitXiao/blog/1583662">避开前面视频中uwsgi配置的坑的文章</a></p><p><a href="http://www.freesion.com/article/801141463/">也是避开前面视频中uwsgi配置的坑的文章</a></p><p><a href="https://blog.csdn.net/weixin_33580579/article/details/105623054">uwsgi自启动</a></p><p><a href="https://blog.csdn.net/weixin_33127753/article/details/87880080">查看和清除uwsgi进程</a></p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p><a href="https://github.com/Andrew82106/Informationz_Network_Security_College_Science_Competition">Github项目地址</a></p><p><a href="http://180.76.162.227:5000/">项目服务器地址</a></p><h1 id="一些inspiration"><a href="#一些inspiration" class="headerlink" title="一些inspiration"></a>一些inspiration</h1><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>为了完成这个项目，某人在两周之内浅试了机器学习（贝叶斯）、Flask、css、html、js、linux、uwsgi这些之前从没使用过的东西。因此可以看出，基于项目学习应用计算机科学是极其高效的一种学习方式。</p><p>至于大部分大学里的计算机教学嘛，明面上说是要培养大家的解决问题能力，实际上只能说是一种用于分流的工具。用一些稀奇古怪的细节来考察所谓的解决问题能力，实际上对培养解决问题的能力没有什么用的，实际上的用途也不是培养解决问题的能力的。因此从各个角度看，这种教学方式的存在真的都是具有充分的合理性的。</p><p>实际培养用计算机解决问题的能力，还得看一线的大厂里面的工程师是怎么教、怎么用的。因此个人还是比较喜欢看开发岗的教程，而非《c primer plus》，即使它又厚又详细。</p><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>关于科研，要看是比赛还是项目。如果是比赛，那就得拿出以前的成果来提交，否则就现写。一般来说，前端写得好，后端的瑕疵也会被掩盖一部分。</p><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>当然，虽然本文标题说“全栈”，但是严格来讲我主要后端做得多一些，前端都是用的模板，不能算得上全栈，也远远达不到那样的水平。只能说，以这个为目标，总是可以的吧。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重拾数据结构</title>
      <link href="/2022/03/15/%E9%87%8D%E6%8B%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/03/15/%E9%87%8D%E6%8B%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><del>要考蓝桥杯了，但是我现在好菜啊。。。</del></p><h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>看懂这张图就行：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/374b1e8da378e1d5dea3ad0a1afcee88.png#pic_center" alt="在这里插入图片描述">其中黑色的是原数据，红色的是树。不难发现树的节点数和原数据的数量一样，因此很省空间。其中8号节点包含所有子节点的信息，因此区间[1,8]对应8号节点，同理，区间[5,6]对应6号节点。</p><p>为了之后的操作，我们需要搞清楚两个关系：如何找到区间[1,n]所涉及的所有节点，如何找到一个节点的所有父节点。</p><h3 id="lowbit函数"><a href="#lowbit函数" class="headerlink" title="lowbit函数"></a>lowbit函数</h3><p>在探究上一个问题之前，先得了解这个lowbit函数。</p><p>lowbit(x)就代表x最右边的一堆0和一个1组合起来的二进制所代表的值。比如lowbit(4)=4,lowbit(7)=1</p><h3 id="找到区间-1-n-所涉及的所有节点"><a href="#找到区间-1-n-所涉及的所有节点" class="headerlink" title="找到区间[1,n]所涉及的所有节点"></a>找到区间[1,n]所涉及的所有节点</h3><p>比如要找区间[1,6]涉及的所有节点，由图可得那就是4，6（4对应1到4，6对应5到6）</p><p>观察其二进制：4(100)，6(110)。不难发现，6减去lowbit(6)就是4。</p><p>因此对于区间[1,n],不断让n减去lowbit(n)直到为0，这期间涉及的数就是区间1到n涉及的节点</p><h3 id="从子节点找父节点"><a href="#从子节点找父节点" class="headerlink" title="从子节点找父节点"></a>从子节点找父节点</h3><p>要找5这个点的父节点，那么就相当于要找6（110），8（1000）三个节点的值。不难发现，如果把5的父节点排成一排，也就是5，6，8，则相邻两项的差值正好等于前一项的lowbit值，也就是6=5+1，8=6+2</p><p>因此如果要找到x的父节点，我们就不断的让x加上lowbit(x)，直到x被加到n为止。这期间内被加到过的值就是x的父节点</p><p>比如3(101)这个节点的父节点，就是4(100)，8(1000)</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>朴素的树状数组支持点更新和区间求和：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/374b1e8da378e1d5dea3ad0a1afcee88.png#pic_center" alt="在这里插入图片描述"></p><h3 id="点更新"><a href="#点更新" class="headerlink" title="点更新"></a>点更新</h3><p>比如要更新5号点，根据上面的讨论，我们让5不断加上其lowbit值，也就是：<br>5+lowbit(5)=6,6+lowbit(6)=8,因此我们会更新5，6，8号点的值。</p><h3 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h3><p>比如要查询[1,5]，我们就不断让5减去lowbit，也就是5-lowbit(5)=4,4-lowbit(4)=0,因此我们需要查询4，5号点的数据并汇总</p><h3 id="操作的时间复杂度"><a href="#操作的时间复杂度" class="headerlink" title="操作的时间复杂度"></a>操作的时间复杂度</h3><p>$O(logn)$，证明略</p><h2 id="树状数组扩展版"><a href="#树状数组扩展版" class="headerlink" title="树状数组扩展版"></a>树状数组扩展版</h2><h3 id="使用树状数组实现区间修改和区间查询"><a href="#使用树状数组实现区间修改和区间查询" class="headerlink" title="使用树状数组实现区间修改和区间查询"></a>使用树状数组实现区间修改和区间查询</h3><p>设原数组为$data[i]$，定义差分数组$tree[i]=data[i]-data[i-1]$，则</p><p>1：有$data[i]=\sum_{j=1}^{i}tree[i]$，因此如果要求得原数组的第a个值，就可以转换为求差分数组的前a个值之和</p><p>2：$\sum_{i=1}^ndata[i]=\sum_{i=1}^n\sum_{j=1}^{i}tree[i]=tree[1]+(tree[1]+tree[2])+(tree[1]+tree[2]+tree[3])+…+(tree[1]+…+tree[n])=ntree[1]+(n-1)tree[2]+…+(n-a+1)tree[a]+…+tree[n]=\sum_{i=1}^{n}(n-i+1)tree[i]$，因此如果令$tree2[a]=(n-a+1)tree[a]$，要求得区间的和，就需要求$\sum_{i=1}^{n}tree2[i]$的值；要修改某一个节点的值，就需要同时修改$tree[i]$和$tree2[i]$的值，</p><p>3：如果需要区间修改，比如在区间上每一个数加上a，根据差分的定义，就应该在tree数组的区间左端点-1处加上a，右端点处减去a，这样就巧妙的将区间修改转化为了点修改</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OI </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小学一波_朴素贝叶斯算法</title>
      <link href="/2022/03/12/%E5%B0%8F%E5%AD%A6%E4%B8%80%E6%B3%A2-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/12/%E5%B0%8F%E5%AD%A6%E4%B8%80%E6%B3%A2-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>$P(Y|X)=\frac{P(X|Y)P(Y)}{P(X)}$</p><h1 id="应用在文本分类上"><a href="#应用在文本分类上" class="headerlink" title="应用在文本分类上"></a>应用在文本分类上</h1><p>$P(属于某类|具有某特征)=\ \frac{P(具有某特征|属于某类)P(属于某类)}{P(具有某特征)}$</p><p>比如</p><p>$P(属于议论文|具有‘假设’这个词)=\ \frac{P(具有‘假设’这个词|属于议论文)P(属于议论文)}{P(具有‘假设’这个词)}$</p><p>其中：</p><p>$P(属于议论文)$即所有训练集文本中议论文占比</p><p>$P(具有‘假设’这个词)$即所有文本中假设这个词的出现次数除以词语总数</p><p>$P(具有‘假设’这个词|属于议论文)$即议论文中假设这个词的出现次数除以议论文的词的词数</p><h1 id="关于重复出现的词语的一些处理"><a href="#关于重复出现的词语的一些处理" class="headerlink" title="关于重复出现的词语的一些处理"></a>关于重复出现的词语的一些处理</h1><p>重复出现的词语一般分为两类：</p><p>首先是停用词，也就是没有实际意义的词，比如语气词，连接词等。</p><p>第二类是文本的关键词，需要引起重视。</p><p>因此现阶段在处理的时候，一般先建立一个停用词词典（可借鉴哈工大和川大的词典，网上能找到），使用此词典将文本中的停用词除去，然后对剩下的词采用多项式模型，即如果有重复的，那么就出现了多少次就记录多少次，然后代入公式去算。</p><p>当然，对于这种多次出现的词语，也有伯努利模型，也就是多次出现按照一次出现算的模型，暂时不表。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记
- IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> machine learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目导向的技能树和日志</title>
      <link href="/2022/03/04/%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%90%91%E7%9A%84%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%97%A5%E5%BF%97/"/>
      <url>/2022/03/04/%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%90%91%E7%9A%84%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="技能树"><a href="#技能树" class="headerlink" title="技能树"></a>技能树</h1><ul><li>python<ul><li>pandas</li><li>scikit-learn</li><li>matplotlib</li><li>pycharts</li><li>调用API</li><li>Flask</li><li>Hanlp</li></ul></li><li>机器学习<ul><li>决策树算法</li><li>随机森林算法</li><li>朴素贝叶斯算法</li></ul></li><li>web<ul><li>CSS</li><li>JavaScript</li><li>HTML5</li></ul></li><li>推荐系统<ul><li>基于内容的推荐系统</li></ul></li></ul><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="406"><a href="#406" class="headerlink" title="406"></a>406</h2><ul><li>python<ul><li>pandas(New)</li><li>scikit-learn(New)</li><li>matplotlib(New)</li></ul></li><li>机器学习(New)<ul><li>决策树算法</li><li>随机森林算法</li></ul></li></ul><h2 id="hmn"><a href="#hmn" class="headerlink" title="hmn"></a>hmn</h2><ul><li>python<ul><li>pycharts(New)</li><li>pandas</li></ul></li></ul><h2 id="科创中心考核"><a href="#科创中心考核" class="headerlink" title="科创中心考核"></a>科创中心考核</h2><ul><li>python<ul><li>pandas</li><li>pycharts</li><li>调用API(New)</li></ul></li></ul><h2 id="信网学院科创比赛"><a href="#信网学院科创比赛" class="headerlink" title="信网学院科创比赛"></a>信网学院科创比赛</h2><ul><li>python<ul><li>Flask(New)</li><li>pandas</li><li>Hanlp(New)</li></ul></li><li>web(New)<ul><li>CSS</li><li>JavaScript</li><li>HTML5</li></ul></li><li>推荐系统(New)<ul><li>基于内容的推荐系统</li></ul></li><li>机器学习<ul><li>朴素贝叶斯算法(New)</li><li>决策树算法</li><li>随机森林算法</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5光速入门（doge）</title>
      <link href="/2022/02/27/%E2%80%9CHTML5%E5%85%89%E9%80%9F%E5%85%A5%E9%97%A8%EF%BC%88doge%EF%BC%89%E2%80%9D/"/>
      <url>/2022/02/27/%E2%80%9CHTML5%E5%85%89%E9%80%9F%E5%85%A5%E9%97%A8%EF%BC%88doge%EF%BC%89%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="html是什么"><a href="#html是什么" class="headerlink" title="html是什么"></a>html是什么</h1><p>是一种向网页添加内容的语言，严格上不属于编程语言，因为没有逻辑性</p><h1 id="html的基本结构"><a href="#html的基本结构" class="headerlink" title="html的基本结构"></a>html的基本结构</h1><p>首先代入这样一个概念，那就是html中的所有东西都是标签或者被标签包起来，也就是被两个尖括号包起来（就像这个： <code>&lt;a&gt;</code> ）<br>接下来呢，html分为两个大部分:</p><ul><li>doctype,声明文档类型</li><li>html，html代码内容</li></ul><p>html中又细分为：</p><ul><li>head元素</li><li>body元素</li></ul><p>head元素就是被一对标签（ <code>&lt;head&gt;</code> , <code>&lt;/head&gt;</code>）给包起来的一部分，里面主要放网页的一些关键信息，body元素就是被一对标签（ <code>&lt;body&gt;</code> , <code>&lt;/body&gt;</code>）给包起来的一部分，里面主要规定网页长什么样子</p><p>那么现在看来，一个html文件就长这个样子：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!doctype html&gt;&lt;html&gt;    &lt;head&gt;        ......        ......    &lt;&#x2F;head&gt;    &lt;body&gt;        .....        .....    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="head元素中的标签"><a href="#head元素中的标签" class="headerlink" title="head元素中的标签"></a>head元素中的标签</h1><ul><li>meta：元信息</li><li>title：网站标题</li><li>style：连接内部css代码</li><li>link：连接到外部css样式表</li></ul><h1 id="body元素中的标签"><a href="#body元素中的标签" class="headerlink" title="body元素中的标签"></a>body元素中的标签</h1><h2 id="常见标签"><a href="#常见标签" class="headerlink" title="常见标签"></a>常见标签</h2><ul><li>p：段落标记</li><li>img：图片</li><li>a：超链接</li><li>h：标题，h1到h6</li><li>ol：有序列表</li><li>ul：无序列表</li><li>table：创建表格</li></ul><h2 id="和css结合的元素"><a href="#和css结合的元素" class="headerlink" title="和css结合的元素"></a>和css结合的元素</h2><ul><li>div：分割</li><li>span：和div类似，但是span是内联元素，div是模块元素</li></ul><h2 id="和JavaScript结合的元素"><a href="#和JavaScript结合的元素" class="headerlink" title="和JavaScript结合的元素"></a>和JavaScript结合的元素</h2><ul><li>script：用于将JavaScript代码导入网站代码内部</li></ul><h2 id="格式化文本的元素"><a href="#格式化文本的元素" class="headerlink" title="格式化文本的元素"></a>格式化文本的元素</h2><ul><li>strong：定义重要文本，显示结果一般是标粗</li><li>em：用于定义强调的文本，一般显示为斜体</li></ul><h2 id="用于定义网页部分的元素"><a href="#用于定义网页部分的元素" class="headerlink" title="用于定义网页部分的元素"></a>用于定义网页部分的元素</h2><ul><li>header：定义网页顶部</li><li>nav：定义导航</li><li>main：定义页面的主要部分</li><li>footer：定义网页的页脚</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>注释：<code>&lt;!-- --&gt;</code></li><li>字符实体：特殊字符的显示</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask初探</title>
      <link href="/2022/02/27/Flask%E5%88%9D%E6%8E%A2/"/>
      <url>/2022/02/27/Flask%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<p>看过：</p><ul><li><a href="https://www.bilibili.com/video/BV17W41177oE?p=18&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV17W41177oE?p=18&amp;spm_id_from=pageDriver</a></li><li><a href="https://www.bilibili.com/video/av254332268?from=search&amp;seid=13702896751479222359&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/av254332268?from=search&amp;seid=13702896751479222359&amp;spm_id_from=333.337.0.0</a></li></ul><h1 id="flask-基本配置"><a href="#flask-基本配置" class="headerlink" title="flask 基本配置"></a>flask 基本配置</h1><pre class="line-numbers language-py" data-language="py"><code class="language-py">from flask import Flaskapp &#x3D; Flask(__name__)  # 开头必写，创建一个Flask对象从而进行后续操作@app.route(&#39;&#x2F;&#39;)def hello_world():  # 这是视图函数    # 控制相关的代码写在这里面if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run() # 用刚刚创建的Flask对象控制程序运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="flask-规定路由和上传方式"><a href="#flask-规定路由和上传方式" class="headerlink" title="flask 规定路由和上传方式"></a>flask 规定路由和上传方式</h1><pre class="line-numbers language-py" data-language="py"><code class="language-py">@app.route(&#39;&#x2F;&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;]) # 规定访问网址（也就是路由）为ip&#x2F;，可用传输方式为GET和POSTdef hello_world():      # put application&#39;s code here    @app.route(&#39;&#x2F;index&#39;, methods&#x3D;[&#39;POST&#39;]) # 规定访问网址（也就是路由）为ip&#x2F;index，可用传输方式为POSTdef hello_world2():      # put application&#39;s code here<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 机器学习笔记</title>
      <link href="/2022/02/16/python%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/16/python%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h1><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><p><code>from sklearn.tree import DecisionTreeRegressor</code></p><p><code>model = DecisionTreeRegressor(random_state=1, max_depth=100000)</code></p><h2 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h2><p><code>from sklearn.ensemble import RandomForestRegressor</code></p><h1 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h1><p><code>model.fit(a_x, a_y)</code></p><h1 id="预测数据"><a href="#预测数据" class="headerlink" title="预测数据"></a>预测数据</h1><p><code>predictions = model.predict(b_x)</code></p><h1 id="数据拆分和计算模型准确度"><a href="#数据拆分和计算模型准确度" class="headerlink" title="数据拆分和计算模型准确度"></a>数据拆分和计算模型准确度</h1><h2 id="导入平均绝对误差（Mean-Absolute-Error，MAE）库"><a href="#导入平均绝对误差（Mean-Absolute-Error，MAE）库" class="headerlink" title="导入平均绝对误差（Mean Absolute Error，MAE）库"></a>导入平均绝对误差（Mean Absolute Error，MAE）库</h2><p><code>from sklearn.metrics import mean_absolute_error</code></p><h2 id="导入数据拆分库"><a href="#导入数据拆分库" class="headerlink" title="导入数据拆分库"></a>导入数据拆分库</h2><p><code>from sklearn.model_selection import train_test_split</code></p><h2 id="拆分数据"><a href="#拆分数据" class="headerlink" title="拆分数据"></a>拆分数据</h2><p><code>a_x, b_x, a_y, b_y = train_test_split(x, Y, random_state=1)</code></p><p>拆分后的数据a_x, b_x, a_y, b_y 是原数据x，Y的子集，一部分用来训练，一部分用来验证</p><h2 id="计算平均绝对误差"><a href="#计算平均绝对误差" class="headerlink" title="计算平均绝对误差"></a>计算平均绝对误差</h2><p><code>detla = mean_absolute_error(b_y, predictions)</code></p><p>predictions是预测出来的数据，b_y是实际的数据，函数返回差值</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
            <tag> machine learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python pandas笔记</title>
      <link href="/2022/02/16/python%20pandas%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/16/python%20pandas%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h1><p>可以读取excel，csv等：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"Name.xlsx"</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"Name.csv"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Dataframe-的创建"><a href="#Dataframe-的创建" class="headerlink" title="Dataframe 的创建"></a>Dataframe 的创建</h1><h2 id="使用字典创建"><a href="#使用字典创建" class="headerlink" title="使用字典创建"></a>使用字典创建</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name1'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'name2'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>    name1  name2<span class="token number">0</span>    <span class="token number">1</span>      <span class="token number">4</span><span class="token number">1</span>    <span class="token number">2</span>      <span class="token number">5</span><span class="token number">2</span>    <span class="token number">3</span>      <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指定行列和数据来创建"><a href="#指定行列和数据来创建" class="headerlink" title="指定行列和数据来创建"></a>指定行列和数据来创建</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"name2"</span><span class="token punctuation">,</span><span class="token string">"name1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'name1'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'name2'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  name2  name1A   <span class="token number">4</span>     <span class="token number">1</span>B   <span class="token number">5</span>     <span class="token number">2</span>C   <span class="token number">6</span>     <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p><code>df = df.astype(str)</code></p><h1 id="取得dataframe其中的数据"><a href="#取得dataframe其中的数据" class="headerlink" title="取得dataframe其中的数据"></a>取得dataframe其中的数据</h1><p>假设有如下dataframe</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">df  <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Info.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>   name   Age     Sex<span class="token number">0</span>   A      <span class="token number">40</span>    <span class="token string">"male"</span><span class="token number">2</span>   B      <span class="token number">23</span>    <span class="token string">"male"</span><span class="token number">1</span>   C      <span class="token number">61</span>    <span class="token string">"female"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这里的索引是0，2，1不是0，1，2。这对我们后面讲解iloc和loc有作用</p><h2 id="条件获取"><a href="#条件获取" class="headerlink" title="条件获取"></a>条件获取</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'male'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>   name   Age     Sex<span class="token number">0</span>   A      <span class="token number">40</span>    <span class="token string">"male"</span><span class="token number">2</span>   B      <span class="token number">23</span>    <span class="token string">"male"</span><span class="token comment"># 多条件获取用&amp;连接条件，条件记得用括号括起来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="loc，iloc"><a href="#loc，iloc" class="headerlink" title="loc，iloc"></a>loc，iloc</h2><p>loc：<code>pd.loc[name_of_index,name_of_column]</code>:也就是根据行和列的名字来定位<br>iloc: <code>pd.iloc[rank_of_index,rank_of_column]</code>：也就是更加行和列的次序（第几行第几列）来定位</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#列索引为1的人的名字</span><span class="token operator">>></span><span class="token operator">></span> C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#第一列的人的第0个数据（python从0开始计数）</span><span class="token operator">>></span><span class="token operator">></span> B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="切片-只能获取行"><a href="#切片-只能获取行" class="headerlink" title="切片(只能获取行)"></a>切片(只能获取行)</h2><p>格式：<code>df[start:end:step]</code></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span>  name  Age     Sex<span class="token number">0</span>    A   <span class="token number">40</span>    male<span class="token number">1</span>    C   <span class="token number">61</span>  female<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="dataframe中数据的删除"><a href="#dataframe中数据的删除" class="headerlink" title="dataframe中数据的删除"></a>dataframe中数据的删除</h1><p>假设有如下dataframe</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">df  <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Info.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>   name   Age     Sex<span class="token number">0</span>   A      <span class="token number">40</span>    <span class="token string">"male"</span><span class="token number">2</span>   B      <span class="token number">23</span>    <span class="token string">"male"</span><span class="token number">1</span>   C      <span class="token number">61</span>    <span class="token string">"female"</span><span class="token comment">## drop函数</span><span class="token comment">### 删除列</span>```pydf<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  name  Age<span class="token number">0</span>    A   <span class="token number">40</span><span class="token number">2</span>    B   <span class="token number">23</span><span class="token number">1</span>    C   <span class="token number">61</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py">df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 如果没有传入inplace参数的话，df就不会被修改</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  name  Age   Sex<span class="token number">0</span>    A   <span class="token number">40</span>  male<span class="token number">2</span>    B   <span class="token number">23</span>  male<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于传入index和column的参数是一个列表，因此可以批量删除</p><h1 id="Dataframe的合并"><a href="#Dataframe的合并" class="headerlink" title="Dataframe的合并"></a>Dataframe的合并</h1><p>假设有如下dataframe</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">df  <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Info.csv'</span><span class="token punctuation">)</span>df2  <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Info2.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>   name   Age     Sex<span class="token number">0</span>   A      <span class="token number">40</span>    <span class="token string">"male"</span><span class="token number">2</span>   B      <span class="token number">23</span>    <span class="token string">"male"</span><span class="token number">1</span>   C      <span class="token number">61</span>    <span class="token string">"female"</span><span class="token operator">>></span><span class="token operator">></span>   name   Age     Sex<span class="token number">0</span>   AA      <span class="token number">44</span>    <span class="token string">"female"</span><span class="token number">1</span>   BB      <span class="token number">31</span>    <span class="token string">"female"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="concat函数"><a href="#concat函数" class="headerlink" title="concat函数"></a>concat函数</h2><ul><li><p>简单的增加行数（df2就是df后面要增加的行）：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df2<span class="token punctuation">,</span>df<span class="token punctuation">]</span><span class="token punctuation">,</span>ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  name  Age     Sex<span class="token number">0</span>   AA   <span class="token number">44</span>  female<span class="token number">1</span>   BB   <span class="token number">31</span>  female<span class="token number">2</span>    A   <span class="token number">40</span>    male<span class="token number">3</span>    B   <span class="token number">23</span>    male<span class="token number">4</span>    C   <span class="token number">61</span>  female<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(这里如果不ignore_index的话，索引就会变成0,1,0,2,1)</p></li><li><p>简单的增加列数（把df2放在df1右边然后拼上）：</p></li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span>df2<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  name  Age     Sex name   Age     Sex<span class="token number">0</span>    A   <span class="token number">40</span>    male   AA  <span class="token number">44.0</span>  female<span class="token number">1</span>    C   <span class="token number">61</span>  female   BB  <span class="token number">31.0</span>  female<span class="token number">2</span>    B   <span class="token number">23</span>    male  NaN   NaN     NaN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中如果发现拼上不能凑成一个长方形，就把空出来的地方补上NaN，就像上面一样</p><ul><li>dataframe可以直接添加列，不需要使用函数</li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py">df<span class="token punctuation">[</span><span class="token string">'Location'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Asia'</span><span class="token punctuation">,</span> <span class="token string">'Asia'</span><span class="token punctuation">,</span> <span class="token string">'Asia'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  name  Age     Sex Location<span class="token number">0</span>    A   <span class="token number">40</span>    male     Asia<span class="token number">2</span>    B   <span class="token number">23</span>    male     Asia<span class="token number">1</span>    C   <span class="token number">61</span>  female     Asia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="merge函数"><a href="#merge函数" class="headerlink" title="merge函数"></a>merge函数</h2><ul><li>按照某列的值来合并（比如按照身份证号码整合一群人的信息）</li></ul><p>假设有如下dataframe：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  name  Age     Sex<span class="token number">0</span>    A   <span class="token number">40</span>    male<span class="token number">2</span>    B   <span class="token number">23</span>    male<span class="token number">1</span>    C   <span class="token number">61</span>  female  Name       Hobby       Talent<span class="token number">0</span>    A  literature      writing<span class="token number">1</span>    B   chemistry    energetic<span class="token number">2</span>    C      sports  strong will<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照名字合并：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">,</span> right_on<span class="token operator">=</span><span class="token string">'Name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  name  Age     Sex Name       Hobby       Talent<span class="token number">0</span>    A   <span class="token number">40</span>    male    A  literature      writing<span class="token number">1</span>    B   <span class="token number">23</span>    male    B   chemistry    energetic<span class="token number">2</span>    C   <span class="token number">61</span>  female    C      sports  strong will<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要可以将多出来的Name行删掉</p><p>merge详解:</p><p><a href="https://blog.csdn.net/weixin_39639919/article/details/110970746?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_paycolumn_v3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">https://blog.csdn.net/weixin_39639919/article/details/110970746?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_paycolumn_v3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3</a></p><h1 id="Dataframe缺失值的填充"><a href="#Dataframe缺失值的填充" class="headerlink" title="Dataframe缺失值的填充"></a>Dataframe缺失值的填充</h1><p><img src="https://img-blog.csdnimg.cn/7c487e0b2c7c4ca5a23586401517ebe3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="Dataframe排序"><a href="#Dataframe排序" class="headerlink" title="Dataframe排序"></a>Dataframe排序</h1><p>假设有如下dataframe</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">df  <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'Info.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>   name   Age     Sex<span class="token number">0</span>   A      <span class="token number">40</span>    <span class="token string">"male"</span><span class="token number">2</span>   B      <span class="token number">23</span>    <span class="token string">"male"</span><span class="token number">1</span>   C      <span class="token number">61</span>    <span class="token string">"female"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依照年龄排序</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'Age'</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>  name  Age     Sex<span class="token number">2</span>    B   <span class="token number">23</span>    male<span class="token number">0</span>    A   <span class="token number">40</span>    male<span class="token number">1</span>    C   <span class="token number">61</span>  female<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>ascending=True</code>是升序，否则是降序</p><h1 id="查看dataframe的大致情况"><a href="#查看dataframe的大致情况" class="headerlink" title="查看dataframe的大致情况"></a>查看dataframe的大致情况</h1><p><img src="https://img-blog.csdnimg.cn/7efe0643b18b43009fd6176f9f312f02.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><h2 id="matplotlib库"><a href="#matplotlib库" class="headerlink" title="matplotlib库"></a>matplotlib库</h2><p>导入模块：<code>import matplotlib.pyplot as plt</code></p><p><a href="https://www.runoob.com/matplotlib/matplotlib-tutorial.html">一个matplotlib更加全面的教程</a></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>创建画布：<code>fig = plt.figure()</code></p><p>添加子图：<code>axes = fig.add_subplot(a, b, c)</code>:定义fig中一共有a行b列个子图，axes是这些图中的第c个。画统计图需要在子图里面进行。如果只想画一个图，就可以让a，b，c都等于1</p><p>给子图添加横纵坐标标题：<code>axes.set_xlabel(&#39;x&#39;),axes.set_ylabel(&#39;y&#39;)</code></p><p>给子图添加标题：<code>axes.set_title(&#39;title)</code></p><p>显示画布（必须要加，不然显示不出来）：<code>plt.show()</code></p><h3 id="使用条件判定"><a href="#使用条件判定" class="headerlink" title="使用条件判定"></a>使用条件判定</h3><p>单变量：直方图，散点图，饼图：x为变量，y为值的分布</p><p>双变量：箱线图，散点图：x为变量，y为变量</p><p>多变量：散点图，堆叠图：x为变量，y为变量，颜色，大小等也可以表示变量</p><h3 id="添加线图"><a href="#添加线图" class="headerlink" title="添加线图"></a>添加线图</h3><p><code>axes.plot(X_data, Y_data)</code></p><h3 id="添加直方图"><a href="#添加直方图" class="headerlink" title="添加直方图"></a>添加直方图</h3><p><code>axes.hist(data,bins=a)</code>,也就是将data分成a段</p><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><p><code>axes.scatter(x=data1,y=data2,s=size,c=color,alpha=0.5)</code>:以data1为横轴，data2为纵轴，点的大小为size，颜色为color，透明度为0.5画散点图</p><h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h3><p><code>axes.boxplot([data1,data2],labels=[&#39;label1&#39;,&#39;label2&#39;])</code>:将数据分成data1和data2两组，分别赋予label1和label2这两个标签名</p><h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><p><code>pies.pie(x=, labels=, autopct=,counterclock=)</code></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plttips <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"seaborndata/tips.csv"</span><span class="token punctuation">)</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>axes1 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>axes1<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>tips<span class="token punctuation">[</span><span class="token string">'total_bill'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>axes1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Histogram of Total Bill"</span><span class="token punctuation">)</span>axes1<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"Total Bill"</span><span class="token punctuation">)</span>axes1<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"Frequency"</span><span class="token punctuation">)</span>scatter_plot <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>scatter_plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>tips<span class="token punctuation">[</span><span class="token string">'total_bill'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tips<span class="token punctuation">[</span><span class="token string">'tip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>scatter_plot<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Scatterplot of Total Bill VS Tip"</span><span class="token punctuation">)</span>scatter_plot<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"Total Bill"</span><span class="token punctuation">)</span>scatter_plot<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"Tip"</span><span class="token punctuation">)</span>box_plot <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>box_plot<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span><span class="token punctuation">[</span>tips<span class="token punctuation">[</span>tips<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Female'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tips<span class="token punctuation">[</span>tips<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Male'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tip'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Female'</span><span class="token punctuation">,</span> <span class="token string">'Male'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>box_plot<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Sex'</span><span class="token punctuation">)</span>box_plot<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Tip'</span><span class="token punctuation">)</span>box_plot<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Boxplot of Tips by Sex"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sexcode</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> sex <span class="token operator">==</span> <span class="token string">'Female'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token keyword">return</span> <span class="token number">1</span>tips<span class="token punctuation">[</span><span class="token string">'sex_color'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tips<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>sexcode<span class="token punctuation">)</span>scatter_plot_color <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>scatter_plot_color<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span>tips<span class="token punctuation">[</span><span class="token string">'total_bill'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">=</span>tips<span class="token punctuation">[</span><span class="token string">'tip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token operator">=</span>tips<span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span> c<span class="token operator">=</span>tips<span class="token punctuation">[</span><span class="token string">'sex_color'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>scatter_plot_color<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Total Bill with color'</span><span class="token punctuation">)</span>scatter_plot_color<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"Total Bill"</span><span class="token punctuation">)</span>scatter_plot_color<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"Tip"</span><span class="token punctuation">)</span>pies <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>pies<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">14.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'sampleA'</span><span class="token punctuation">,</span> <span class="token string">'sampleB'</span><span class="token punctuation">,</span> <span class="token string">'sampleC'</span><span class="token punctuation">,</span> <span class="token string">'sampleD'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> autopct<span class="token operator">=</span><span class="token string">'%1.1f%%'</span><span class="token punctuation">,</span>counterclock<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/421280af783046b8965ab5f1c162b48a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kaggle实战：Store Sales - Time Series Forecasting</title>
      <link href="/2022/02/16/Kaggle%E5%AE%9E%E6%88%98%EF%BC%9AStore%20Sales%20-%20Time%20Series%20Forecasting/"/>
      <url>/2022/02/16/Kaggle%E5%AE%9E%E6%88%98%EF%BC%9AStore%20Sales%20-%20Time%20Series%20Forecasting/</url>
      
        <content type="html"><![CDATA[<p>（菜鸡梦呓，大佬轻喷）</p><h1 id="数据浏览"><a href="#数据浏览" class="headerlink" title="数据浏览"></a>数据浏览</h1><p><img src="https://img-blog.csdnimg.cn/981a431061094f56adf3d278b6a705f4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_10,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="train-csv"><a href="#train-csv" class="headerlink" title="train.csv"></a>train.csv</h2><p>The training data, comprising time series of features store_nbr, family, and onpromotion as well as the target sales.</p><ul><li>store_nbr identifies the store at which the products are sold.</li><li>family identifies the type of product sold.</li><li>sales gives the total sales for a product family at a particular store at a given date. Fractional values are possible since products can be sold in fractional units (1.5 kg of cheese, for instance, as opposed to 1 bag of chips).</li><li>onpromotion gives the total number of items in a product family that were being promoted at a store at a given date.</li></ul><h2 id="test-csv"><a href="#test-csv" class="headerlink" title="test.csv"></a>test.csv</h2><p>The test data, having the same features as the training data. You will predict the target sales for the dates in this file.</p><p>The dates in the test data are for the 15 days after the last date in the training data.</p><h2 id="sample-submission-csv"><a href="#sample-submission-csv" class="headerlink" title="sample_submission.csv"></a>sample_submission.csv</h2><p>A sample submission file in the correct format.</p><h2 id="stores-csv"><a href="#stores-csv" class="headerlink" title="stores.csv"></a>stores.csv</h2><p>Store metadata, including city, state, type, and cluster.</p><p>cluster is a grouping of similar stores.</p><h2 id="oil-csv"><a href="#oil-csv" class="headerlink" title="oil.csv"></a>oil.csv</h2><p>Daily oil price. Includes values during both the train and test data timeframes. (Ecuador is an oil-dependent country and it’s economical health is highly vulnerable to shocks in oil prices.)</p><h2 id="holidays-events-csv"><a href="#holidays-events-csv" class="headerlink" title="holidays_events.csv"></a>holidays_events.csv</h2><p> Holidays and Events, with metadata</p><ul><li>NOTE: Pay special attention to the transferred column. A holiday that is transferred officially falls on that calendar day, but was moved to another date by the government. A transferred day is more like a normal day than a holiday. To find the day that it was actually celebrated, look for the corresponding row where type is Transfer. For example, the holiday Independencia de Guayaquil was transferred from 2012-10-09 to 2012-10-12, which means it was celebrated on 2012-10-12. Days that are type Bridge are extra days that are added to a holiday (e.g., to extend the break across a long weekend). These are frequently made up by the type Work Day which is a day not normally scheduled for work (e.g., Saturday) that is meant to payback the Bridge.</li><li>Additional holidays are days added a regular calendar holiday, for example, as typically happens around Christmas (making Christmas Eve a holiday).</li></ul><h2 id="Additional-Notes"><a href="#Additional-Notes" class="headerlink" title="Additional Notes"></a>Additional Notes</h2><ul><li>Wages in the public sector are paid every two weeks on the 15 th and on the last day of the month. Supermarket sales could be affected by this.</li><li>A magnitude 7.8 earthquake struck Ecuador on April 16, 2016. People rallied in relief efforts donating water and other first need products which greatly affected supermarket sales for several weeks after the earthquake.</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>稍微总结一下，现有的可用数据如下：</p><h3 id="在train-csv中"><a href="#在train-csv中" class="headerlink" title="在train.csv中"></a>在train.csv中</h3><p>每一个货物有这些特征：</p><ul><li><p>store_nbr：所在商店</p></li><li><p>family：所属商品类型</p></li><li><p>sales：所属商品类型在货物所在商店当日的销售额</p></li><li><p>onpromotion：所属商品类型在货物所在商店当日的进货数量</p><h3 id="在stores-csv中"><a href="#在stores-csv中" class="headerlink" title="在stores.csv中"></a>在stores.csv中</h3><p>每一个商店有如下特征：</p></li><li><p>city：所在城市</p></li><li><p>state：所在州</p></li><li><p>type：类型</p></li><li><p>cluster：聚类，也就是一群类似的商店抱的团（只不过不知道哪里类似……）</p></li></ul><h3 id="在oil-csv中"><a href="#在oil-csv中" class="headerlink" title="在oil.csv中"></a>在oil.csv中</h3><p>每天的油价dcoilwtico</p><h3 id="在holidays-events-csv中"><a href="#在holidays-events-csv中" class="headerlink" title="在holidays_events.csv中"></a>在holidays_events.csv中</h3><ul><li>date：日期</li><li>type：类型，包括节假日holiday，时间Event等等</li><li>locale：事件范围，全国的，本地的等等</li><li>locale_name：事件范围的地点，如果是国家性的就对应厄瓜多尔，如果是某个地方的节日就对应某个地方</li><li>description：描述，也就是节日的名字</li><li>transferred：是否是推迟后的节日。如果是推迟后的，那么就没那么重要了</li></ul><h3 id="在transactions-csv中"><a href="#在transactions-csv中" class="headerlink" title="在transactions.csv中"></a>在transactions.csv中</h3><p>就是每天的交易额</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>test.csv：训练好模型后就用这里面的数据来求答案了</p></li><li><p>sample_submission.csv：一个答案的格式示例</p></li></ul><h1 id="数据清洗和特征工程"><a href="#数据清洗和特征工程" class="headerlink" title="数据清洗和特征工程"></a>数据清洗和特征工程</h1><p>先读入数据：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">ReadInData</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> <span class="token string">'store-sales-time-series-forecasting/'</span>    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token builtin">file</span><span class="token punctuation">)</span>df_holidays_events <span class="token operator">=</span> ReadInData<span class="token punctuation">(</span><span class="token string">'holidays_events.csv'</span><span class="token punctuation">)</span>df_oil <span class="token operator">=</span> ReadInData<span class="token punctuation">(</span><span class="token string">'oil.csv'</span><span class="token punctuation">)</span>df_stores <span class="token operator">=</span> ReadInData<span class="token punctuation">(</span><span class="token string">'stores.csv'</span><span class="token punctuation">)</span>df_train <span class="token operator">=</span> ReadInData<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>df_test <span class="token operator">=</span> ReadInData<span class="token punctuation">(</span><span class="token string">"test.csv"</span><span class="token punctuation">)</span>df_transactions <span class="token operator">=</span> ReadInData<span class="token punctuation">(</span><span class="token string">'transactions.csv'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h2><p>oil.csv中dcoilwtico属性下有一部分缺失值，观察油价图形:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">DrawLine</span><span class="token punctuation">(</span>X_data<span class="token punctuation">,</span> Y_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    axes <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    axes<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X_data<span class="token punctuation">,</span> Y_data<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>DrawLine<span class="token punctuation">(</span>df_oil<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df_oil<span class="token punctuation">[</span><span class="token string">'dcoilwtico'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现油价变动较大<br><img src="https://img-blog.csdnimg.cn/9d8a1029a99c44ffbfe3110b5201b217.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>因此使用平均值来填充意义不大，因此使用前一个数据填充:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">df_oil_withoutNA <span class="token operator">=</span> df_oil<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">"pad"</span><span class="token punctuation">)</span>DrawLine<span class="token punctuation">(</span>df_oil_withoutNA<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df_oil_withoutNA<span class="token punctuation">[</span><span class="token string">'dcoilwtico'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/84134744ba7d4af6943cbd0f80195d19.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="特征整合"><a href="#特征整合" class="headerlink" title="特征整合"></a>特征整合</h2><p>观察发现在其他的文件里面有一些可以整合到训练集(train.csv)和测试集(test.csv)里面的特征:</p><ul><li>stores.csv中的city，state，type，cluster</li><li>oil.csv中的dcoilwtico</li><li>holidays_events.csv中的locale，locale_name，description，transferred</li><li>transaction中的交易额</li></ul><p>因此先对其他文件里面的索引重命名，然后使用merge函数对其进行合并操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Add_Feature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_holidays_events<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'date'</span><span class="token punctuation">:</span> <span class="token string">'date'</span><span class="token punctuation">,</span>                                       <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'Daily_holiday_type'</span><span class="token punctuation">,</span>                                       <span class="token string">'locale'</span><span class="token punctuation">:</span> <span class="token string">'Daily_holiday_locale'</span><span class="token punctuation">,</span>                                       <span class="token string">'locale_name'</span><span class="token punctuation">:</span> <span class="token string">'Daily_holiday_locale_name'</span><span class="token punctuation">,</span>                                       <span class="token string">'description'</span><span class="token punctuation">:</span> <span class="token string">"Daily_holiday_description"</span><span class="token punctuation">,</span>                                       <span class="token string">'transferred'</span><span class="token punctuation">:</span> <span class="token string">"Daily_holiday_transferred"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                              inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    df_stores<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'store_nbr'</span><span class="token punctuation">:</span> <span class="token string">'store_nbr'</span><span class="token punctuation">,</span>                              <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'stores_city'</span><span class="token punctuation">,</span>                              <span class="token string">'state'</span><span class="token punctuation">:</span> <span class="token string">'store_state'</span><span class="token punctuation">,</span>                              <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'store_type'</span><span class="token punctuation">,</span>                              <span class="token string">'cluster'</span><span class="token punctuation">:</span> <span class="token string">'store_cluster'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                     inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    df_transactions<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'transactions'</span><span class="token punctuation">:</span> <span class="token string">'Daily_transactions'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    DfTrainNew <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df_train<span class="token punctuation">,</span> df_holidays_events<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'date'</span><span class="token punctuation">,</span> right_on<span class="token operator">=</span><span class="token string">'date'</span><span class="token punctuation">)</span>    DfTestNew <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df_test<span class="token punctuation">,</span> df_holidays_events<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'date'</span><span class="token punctuation">,</span> right_on<span class="token operator">=</span><span class="token string">'date'</span><span class="token punctuation">)</span>    DfTrainNew <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>DfTrainNew<span class="token punctuation">,</span> df_oil_withoutNA<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'date'</span><span class="token punctuation">,</span> right_on<span class="token operator">=</span><span class="token string">'date'</span><span class="token punctuation">)</span>    DfTestNew <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>DfTestNew<span class="token punctuation">,</span> df_oil_withoutNA<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'date'</span><span class="token punctuation">,</span> right_on<span class="token operator">=</span><span class="token string">'date'</span><span class="token punctuation">)</span>    DfTrainNew <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>DfTrainNew<span class="token punctuation">,</span> df_stores<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'store_nbr'</span><span class="token punctuation">,</span> right_on<span class="token operator">=</span><span class="token string">'store_nbr'</span><span class="token punctuation">)</span>    DfTestNew <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>DfTestNew<span class="token punctuation">,</span> df_stores<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> left_on<span class="token operator">=</span><span class="token string">'store_nbr'</span><span class="token punctuation">,</span> right_on<span class="token operator">=</span><span class="token string">'store_nbr'</span><span class="token punctuation">)</span>    DfTrainNew <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>DfTrainNew<span class="token punctuation">,</span> df_transactions<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'store_nbr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    DfTestNew <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>DfTestNew<span class="token punctuation">,</span> df_transactions<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'store_nbr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> DfTrainNew<span class="token punctuation">,</span> DfTestNewres <span class="token operator">=</span> Add_Feature<span class="token punctuation">(</span><span class="token punctuation">)</span>df_train_New <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>df_test_New <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>操作完后，统计一下非NA值的个数，来看看数据合并的效果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">LookIn</span><span class="token punctuation">(</span>DF_In<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"length:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>DF_In<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> DF_In<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>        a <span class="token operator">=</span> DF_In<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Name:&#123;&#125; Rate:&#123;&#125;%"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>DF_In<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"df_train_New:>>>>>>"</span><span class="token punctuation">)</span>LookIn<span class="token punctuation">(</span>df_train_New<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"df_test_New:>>>>>>"</span><span class="token punctuation">)</span>LookIn<span class="token punctuation">(</span>df_test_New<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"df_test:>>>>>>"</span><span class="token punctuation">)</span>LookIn<span class="token punctuation">(</span>df_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果稍微有点出乎意料：</p><pre class="line-numbers language-none"><code class="language-none">df_train_New:&gt;&gt;&gt;&gt;&gt;&gt;length:3054348Name:id Rate:100.0%Name:date Rate:100.0%Name:store_nbr Rate:100.0%Name:family Rate:100.0%Name:sales Rate:100.0%Name:onpromotion Rate:100.0%Name:Daily_holiday_type Rate:16.45274212368728%Name:Daily_holiday_locale Rate:16.45274212368728%Name:Daily_holiday_locale_name Rate:16.45274212368728%Name:Daily_holiday_description Rate:16.45274212368728%Name:Daily_holiday_transferred Rate:16.45274212368728%Name:dcoilwtico Rate:71.17852975495916%Name:stores_city Rate:100.0%Name:store_state Rate:100.0%Name:store_type Rate:100.0%Name:store_cluster Rate:100.0%Name:transactions Rate:91.84385669216475%df_test_New:&gt;&gt;&gt;&gt;&gt;&gt;length:28512Name:id Rate:100.0%Name:date Rate:100.0%Name:store_nbr Rate:100.0%Name:family Rate:100.0%Name:onpromotion Rate:100.0%Name:Daily_holiday_type Rate:6.25%Name:Daily_holiday_locale Rate:6.25%Name:Daily_holiday_locale_name Rate:6.25%Name:Daily_holiday_description Rate:6.25%Name:Daily_holiday_transferred Rate:6.25%Name:dcoilwtico Rate:75.0%Name:stores_city Rate:100.0%Name:store_state Rate:100.0%Name:store_type Rate:100.0%Name:store_cluster Rate:100.0%Name:transactions Rate:0.0%df_test:&gt;&gt;&gt;&gt;&gt;&gt;length:28512Name:id Rate:100.0%Name:date Rate:100.0%Name:store_nbr Rate:100.0%Name:family Rate:100.0%Name:onpromotion Rate:100.0%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难发现，交易额合并后，测试集里面的所有样本都没有对应的销售额，因此销售额这个特征也许不应该这样用</p><p>之后看了看训练集数据后发现了一个更大的问题，就是经过增加特征后，训练集里面的样本数量变多了……花了一下午的时间才发现，原来同一天可以有很多节日……</p><p>很无语，只好暂时简单粗暴的去个重，有更好的办法就再说吧：</p><p><code>df_train_New.drop_duplicates(subset=&#39;id&#39;, keep=&#39;first&#39;, inplace=True)</code></p><p>当然还有一个问题，那就是大量的空缺值的问题。现阶段暂时先删掉这些东西：</p><p><code>df_train_New.dropna(axis=0, inplace=True)</code></p><p>下面也许可以先尝试一下建模，到时候再迭代修改就行</p><p>但是建模之前先要把数据映射一下，不然数据进不了机器学习模型的</p><h2 id="数据映射"><a href="#数据映射" class="headerlink" title="数据映射"></a>数据映射</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">PreWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_train_New<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    df_train_New<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">,</span> keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    df_train_New<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_train_New<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> X<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span>                                                                    <span class="token builtin">str</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>                                                                    <span class="token builtin">str</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    df_train_New<span class="token punctuation">[</span><span class="token string">'family'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>factorize<span class="token punctuation">(</span>df_train_New<span class="token punctuation">[</span><span class="token string">'family'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    df_train_New<span class="token punctuation">[</span><span class="token string">'Daily_holiday_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>factorize<span class="token punctuation">(</span>df_train_New<span class="token punctuation">[</span><span class="token string">'Daily_holiday_type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    df_train_New<span class="token punctuation">[</span><span class="token string">'Daily_holiday_locale'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>factorize<span class="token punctuation">(</span>df_train_New<span class="token punctuation">[</span><span class="token string">'Daily_holiday_locale'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    df_train_New<span class="token punctuation">[</span><span class="token string">'Daily_holiday_locale_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>factorize<span class="token punctuation">(</span>df_train_New<span class="token punctuation">[</span><span class="token string">'Daily_holiday_locale_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    df_train_New<span class="token punctuation">[</span><span class="token string">'Daily_holiday_description'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>factorize<span class="token punctuation">(</span>df_train_New<span class="token punctuation">[</span><span class="token string">'Daily_holiday_description'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    df_train_New<span class="token punctuation">[</span><span class="token string">'Daily_holiday_transferred'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>factorize<span class="token punctuation">(</span>df_train_New<span class="token punctuation">[</span><span class="token string">'Daily_holiday_transferred'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    df_train_New<span class="token punctuation">[</span><span class="token string">'stores_city'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>factorize<span class="token punctuation">(</span>df_train_New<span class="token punctuation">[</span><span class="token string">'stores_city'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    df_train_New<span class="token punctuation">[</span><span class="token string">'store_state'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>factorize<span class="token punctuation">(</span>df_train_New<span class="token punctuation">[</span><span class="token string">'store_state'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    df_train_New<span class="token punctuation">[</span><span class="token string">'store_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>factorize<span class="token punctuation">(</span>df_train_New<span class="token punctuation">[</span><span class="token string">'store_type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>PreWork<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h1><p>这个题给了每个商品很多特征，然后需要预测另外一些商品的价格。根据这个题的特点，发现可以先试一试决策树或者随机森林模型。至于题目里面说的时间序列预测……暂时还比较迷。</p><p>然后对训练集先用两个模型试试，然后使用MAE来评一下误差度：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">BuildDecisionTree</span><span class="token punctuation">(</span>x_F<span class="token punctuation">,</span> Y_F<span class="token punctuation">,</span> DataLog<span class="token punctuation">)</span><span class="token punctuation">:</span>    x_ <span class="token operator">=</span> DataLog<span class="token punctuation">[</span>x_F<span class="token punctuation">]</span>    Y_ <span class="token operator">=</span> DataLog<span class="token punctuation">[</span>Y_F<span class="token punctuation">]</span>    model <span class="token operator">=</span> DecisionTreeRegressor<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    a_x<span class="token punctuation">,</span> b_x<span class="token punctuation">,</span> a_y<span class="token punctuation">,</span> b_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x_<span class="token punctuation">,</span> Y_<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>a_x<span class="token punctuation">,</span> a_y<span class="token punctuation">)</span>    predictions <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>b_x<span class="token punctuation">)</span>    delta <span class="token operator">=</span> mean_absolute_error<span class="token punctuation">(</span>b_y<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"DecisionTree:mean_absolute_error delta:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">BuildRandomForest</span><span class="token punctuation">(</span>x_F<span class="token punctuation">,</span> Y_F<span class="token punctuation">,</span> DataLog<span class="token punctuation">)</span><span class="token punctuation">:</span>    x_ <span class="token operator">=</span> DataLog<span class="token punctuation">[</span>x_F<span class="token punctuation">]</span>    Y_ <span class="token operator">=</span> DataLog<span class="token punctuation">[</span>Y_F<span class="token punctuation">]</span>    model <span class="token operator">=</span> RandomForestRegressor<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    a_x<span class="token punctuation">,</span> b_x<span class="token punctuation">,</span> a_y<span class="token punctuation">,</span> b_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x_<span class="token punctuation">,</span> Y_<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>a_x<span class="token punctuation">,</span> a_y<span class="token punctuation">)</span>    predictions <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>b_x<span class="token punctuation">)</span>    delta <span class="token operator">=</span> mean_absolute_error<span class="token punctuation">(</span>b_y<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RandomForest:mean_absolute_error delta:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token punctuation">)</span>X_Feature <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'store_nbr'</span><span class="token punctuation">,</span> <span class="token string">'family'</span><span class="token punctuation">,</span> <span class="token string">'onpromotion'</span><span class="token punctuation">,</span>             <span class="token string">'Daily_holiday_type'</span><span class="token punctuation">,</span> <span class="token string">'Daily_holiday_locale'</span><span class="token punctuation">,</span>             <span class="token string">'Daily_holiday_locale_name'</span><span class="token punctuation">,</span> <span class="token string">'Daily_holiday_description'</span><span class="token punctuation">,</span>             <span class="token string">'Daily_holiday_transferred'</span><span class="token punctuation">,</span> <span class="token string">'dcoilwtico'</span><span class="token punctuation">,</span> <span class="token string">'stores_city'</span><span class="token punctuation">,</span> <span class="token string">'store_state'</span><span class="token punctuation">,</span>             <span class="token string">'store_type'</span><span class="token punctuation">,</span> <span class="token string">'store_cluster'</span><span class="token punctuation">,</span> <span class="token string">'transactions'</span><span class="token punctuation">]</span>Y_Feature <span class="token operator">=</span> <span class="token string">'sales'</span>BuildRandomForest<span class="token punctuation">(</span>X_Feature<span class="token punctuation">,</span> Y_Feature<span class="token punctuation">,</span> df_train_New<span class="token punctuation">)</span>BuildDecisionTree<span class="token punctuation">(</span>X_Feature<span class="token punctuation">,</span> Y_Feature<span class="token punctuation">,</span> df_train_New<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然随机森林不出意外的要精确一些：</p><pre class="line-numbers language-none"><code class="language-none">RandomForest:mean_absolute_error delta:73.51907510982585DecisionTree:mean_absolute_error delta:97.08605686543322<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>于是尝试用随机森林模型来预测一下测试集</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">Forecast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> RandomForestRegressor<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_depth<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>df_train_New<span class="token punctuation">[</span>X_Feature<span class="token punctuation">]</span><span class="token punctuation">,</span> df_train_New<span class="token punctuation">[</span>Y_Feature<span class="token punctuation">]</span><span class="token punctuation">)</span>    Aim <span class="token operator">=</span> df_test_New<span class="token punctuation">[</span>X_Feature<span class="token punctuation">]</span>    predictions <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>Aim<span class="token punctuation">)</span>    res <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>predictions<span class="token punctuation">)</span>    path <span class="token operator">=</span> <span class="token string">"store-sales-time-series-forecasting/submission.csv"</span>    res<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>Forecast<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把预测数据修改一下索引，放到kaggle上面去：</p><p><img src="https://img-blog.csdnimg.cn/3c3144c2361144178a09bb9e3b926104.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>芜湖！</p><h1 id="To-Be-Continue："><a href="#To-Be-Continue：" class="headerlink" title="To Be Continue："></a>To Be Continue：</h1>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kaggle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF刷题记</title>
      <link href="/2021/11/14/CTF%E5%88%B7%E9%A2%98%E8%AE%B0/"/>
      <url>/2021/11/14/CTF%E5%88%B7%E9%A2%98%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="BUUCTF-MD5"><a href="#BUUCTF-MD5" class="headerlink" title="BUUCTF MD5"></a>BUUCTF MD5</h2><p>给一段MD5加密后的32位码,使用<a href="https://www.cmd5.com/%E5%B7%A5%E5%85%B7%E5%AF%B9%E8%BF%99%E6%AE%B5%E7%A0%81%E8%BF%9B%E8%A1%8C%E7%A0%B4%E8%A7%A3%E5%BE%97%E5%88%B0flag">https://www.cmd5.com/工具对这段码进行破解得到flag</a></p><blockquote><p>md5加密后是16位或者32位的字符，由字母和数字组成，字母大小写统一；<br>理论上无法解密，除非暴力破解</p></blockquote><p>这里的这个网站就是一个使用暴力破解来解码的网站</p><h2 id="BUUCTF-丢失的MD5-1"><a href="#BUUCTF-丢失的MD5-1" class="headerlink" title="BUUCTF 丢失的MD5 1"></a>BUUCTF 丢失的MD5 1</h2><p>给一段python源码如下:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> hashlib   <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            m<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">'TASC'</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'O3RJMV'</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'WDJKX'</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'ZM'</span><span class="token punctuation">)</span>            des<span class="token operator">=</span>m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'e9032'</span> <span class="token keyword">in</span> des <span class="token keyword">and</span> <span class="token string">'da'</span> <span class="token keyword">in</span> des <span class="token keyword">and</span> <span class="token string">'911513'</span> <span class="token keyword">in</span> des<span class="token punctuation">:</span>                <span class="token keyword">print</span> des<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我这里显示update函数里面的参数需要加密,修改后是这样的:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># Andrew82106</span><span class="token comment"># time: 2021/10/2 21:02</span><span class="token keyword">import</span> hashlib<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            m<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            m<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">'TASC'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'O3RJMV'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'WDJKX'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'ZM'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            des<span class="token operator">=</span>m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'e9032'</span> <span class="token keyword">in</span> des <span class="token keyword">and</span> <span class="token string">'da'</span> <span class="token keyword">in</span> des <span class="token keyword">and</span> <span class="token string">'911513'</span> <span class="token keyword">in</span> des<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后得到flag</p><blockquote><p>hashlib补充</p></blockquote><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> hashlib<span class="token operator">>></span><span class="token operator">></span> m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 通过构造函数获得一个hash对象</span><span class="token operator">>></span><span class="token operator">></span> m<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'Nobody inspects'</span><span class="token punctuation">)</span>        <span class="token comment"># 使用hash对象的update方法添加消息</span><span class="token operator">>></span><span class="token operator">></span> m<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b' the spammish repetition'</span><span class="token punctuation">)</span>   <span class="token comment"># 同上</span><span class="token operator">>></span><span class="token operator">></span> m<span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment"># 获得bytes类型的消息摘要</span>b'\x03\x1e\xdd<span class="token punctuation">&#125;</span>Ae\x15\x93\xc5\xfe\\\x00o\xa5u<span class="token operator">+</span><span class="token number">7</span>\xfd\xdf\xf7\xbcN\x84<span class="token punctuation">:</span>\xa6\xaf\x0c\x95\x0fK\x94\x06‘<span class="token operator">>></span><span class="token operator">></span> m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment"># 获得16进制str类型的消息摘要</span><span class="token string">'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406'</span><span class="token operator">>></span><span class="token operator">></span> m<span class="token punctuation">.</span>digest_size                   <span class="token comment"># 查看消息摘要的位长</span><span class="token number">32</span>  <span class="token operator">>></span><span class="token operator">></span> m<span class="token punctuation">.</span>block_size                    <span class="token comment"># 查看消息摘要的内部块大小</span><span class="token number">64</span>更简洁的用法：<span class="token operator">>></span><span class="token operator">></span> hashlib<span class="token punctuation">.</span>sha224<span class="token punctuation">(</span><span class="token string">b"Nobody inspects the spammish repetition"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'</span><span class="token builtin">hash</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>更新<span class="token builtin">hash</span>对象。连续的调用该方法相当于连续的追加更新。例如m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token punctuation">)</span>相当于m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>。注意，当数据规模较大的时候，Python的GIL在此时会解锁，用于提高计算速度。一定要理解update<span class="token punctuation">(</span><span class="token punctuation">)</span>的作用，由于消息摘要是只针对当前状态产生的，所以每一次update后，再次计算hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>的值都会不一样。 <span class="token builtin">hash</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>返回<span class="token builtin">bytes</span>格式的消息摘要 <span class="token builtin">hash</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>与digest方法类似，不过返回的是两倍长度的字符串对象，所有的字符都是十六进制的数字。通常用于邮件传输或非二进制环境中。通常我们比较摘要时，比较的就是这个值！ <span class="token builtin">hash</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>返回一个<span class="token builtin">hash</span>对象的拷贝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BUUCTF-一眼就解密"><a href="#BUUCTF-一眼就解密" class="headerlink" title="BUUCTF 一眼就解密"></a>BUUCTF 一眼就解密</h2><p>出来的密码看到后面有个等号，想到是不是base64编码。一搞，果然是，就出来了。</p><p>base64原理：<br><a href="https://www.cnblogs.com/luguo3000/p/3940197.html">https://www.cnblogs.com/luguo3000/p/3940197.html</a></p><h2 id="BUUCTF-Url编码-1"><a href="#BUUCTF-Url编码-1" class="headerlink" title="BUUCTF Url编码 1"></a>BUUCTF Url编码 1</h2><p>使用Url编码解码器就可以了</p><p>url是什么：<a href="https://blog.csdn.net/houqicun/article/details/78296886">https://blog.csdn.net/houqicun/article/details/78296886</a></p><h2 id="BUUCTF-看我回旋踢"><a href="#BUUCTF-看我回旋踢" class="headerlink" title="BUUCTF 看我回旋踢"></a>BUUCTF 看我回旋踢</h2><p>一看就很像凯撒密码，试了一下果然是</p><h2 id="BUUCTF-摩丝-1"><a href="#BUUCTF-摩丝-1" class="headerlink" title="BUUCTF 摩丝 1"></a>BUUCTF 摩丝 1</h2><p>文件下载下来看发现是摩尔斯电码，解密后套上flag{}得到答案</p><h2 id="BUUCTF-password"><a href="#BUUCTF-password" class="headerlink" title="BUUCTF password"></a>BUUCTF password</h2><p>离谱，居然还有这种题。。。姓名首字母+生日=flag</p><h2 id="BUUCTF-变异凯撒"><a href="#BUUCTF-变异凯撒" class="headerlink" title="BUUCTF 变异凯撒"></a>BUUCTF 变异凯撒</h2><p>这题正确的思路应该是先去找标识符，也就是先假设密码里面的前四个字母对应的是flag，这样的话就可以去找规律。从ascii的角度出发，那么不难知道，这个密码每一位的位移都不一样，第一位在ascii里面移动了5，第二位是6，第三位是7，以此类推，就得到flag</p><h2 id="BUUCTF-Quoted-printable"><a href="#BUUCTF-Quoted-printable" class="headerlink" title="BUUCTF Quoted-printable"></a>BUUCTF Quoted-printable</h2><p>使用Quoted-printable揭秘工具就可以得到flag</p><p>quoted-printable是什么:<a href="http://blog.chacuo.net/494.html">http://blog.chacuo.net/494.html</a> </p><h2 id="BUUCTF-rabbit"><a href="#BUUCTF-rabbit" class="headerlink" title="BUUCTF rabbit"></a>BUUCTF rabbit</h2><p>rabbit 解密工具即可：<a href="http://www.jsons.cn/rabbitencrypt/">http://www.jsons.cn/rabbitencrypt/</a></p><p>至于rabbit是个啥。。。不是很懂</p><h2 id="BUUCTF篱笆墙的影子"><a href="#BUUCTF篱笆墙的影子" class="headerlink" title="BUUCTF篱笆墙的影子"></a>BUUCTF篱笆墙的影子</h2><p>题名就提示了是栅栏密码，那就对应的解密工具解密就ok了 </p><h2 id="BUUCTF-RSA"><a href="#BUUCTF-RSA" class="headerlink" title="BUUCTF RSA"></a>BUUCTF RSA</h2><p>就是RSA加密的过程，写个脚本就ok（我一开始居然还把欧拉函数写错了。。。）</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">gcdInverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> gcd <span class="token operator">=</span> Math<span class="token punctuation">.</span>myExtGCD<span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    t <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">1</span>        x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>n<span class="token operator">/</span>gcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>t        y <span class="token operator">=</span> y <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token operator">/</span>gcd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>t    <span class="token keyword">return</span> xp <span class="token operator">=</span> <span class="token number">473398607161</span>q <span class="token operator">=</span> <span class="token number">4511491</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">17</span>d <span class="token operator">=</span> gcdInverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BUUCTF-Alice与Bob"><a href="#BUUCTF-Alice与Bob" class="headerlink" title="BUUCTF Alice与Bob"></a>BUUCTF Alice与Bob</h2><p> 大数分解，自己写了个脚本，然后发现 $O（n),n=98554799767$数太大了，就尝试用n=800000来碰运气，估计它的质因子中小的那个是不会超过800000的（其实是在$\sqrt n$内的），果然碰到了,然后网上找加密工具加密md5就OK</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">shai</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        isprime<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cleaning&#123;0&#125;/&#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10000</span><span class="token punctuation">:</span>           <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"shaiing&#123;0&#125;/&#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> isprime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            prime<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> prime<span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token operator">*</span> i <span class="token operator">></span> n <span class="token keyword">or</span> j <span class="token operator">></span> i<span class="token punctuation">:</span>                <span class="token keyword">break</span>            isprime<span class="token punctuation">[</span>i <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>x <span class="token operator">=</span> <span class="token number">98554799767</span>Math<span class="token punctuation">.</span>shai<span class="token punctuation">(</span><span class="token number">800000</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finish shai"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> prime<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">>>>>>prime:&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BUUCTF-rsarsa"><a href="#BUUCTF-rsarsa" class="headerlink" title="BUUCTF rsarsa"></a>BUUCTF rsarsa</h2><p>很基本的rsa题，对rsa的几个参数(p,q,n,phi(n),e,d)熟悉就可以做出来。根据p,q解出密钥d就可以加密了</p><h2 id="ppsucctf-Ez-RSA"><a href="#ppsucctf-Ez-RSA" class="headerlink" title="ppsucctf Ez_RSA"></a>ppsucctf Ez_RSA</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>N <span class="token operator">=</span> <span class="token number">256</span>e <span class="token operator">=</span> <span class="token number">0x10001</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span>N<span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span>N<span class="token punctuation">)</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qc<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c ="</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n ="</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment"># c = 3618024754787832879542402954935336544965695963410957633567630750730786939446769264496599427155251046600603185418150833996277337099069341533669469565571611</span><span class="token comment"># n = 9383276537608078349535621522991738128187383466558445196747484046721007434310900666285073167852908643341834658220819934949482623747778117119750134628904301</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要大质数分解：<a href="https://www.alpertron.com.ar/ECM.HTM">https://www.alpertron.com.ar/ECM.HTM</a></p><p>分解后得到p和q，然后就是最基本的模版题了</p><h2 id="ppsucctf-baby-RSA"><a href="#ppsucctf-baby-RSA" class="headerlink" title="ppsucctf baby_RSA"></a>ppsucctf baby_RSA</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">e<span class="token operator">=</span><span class="token number">0x10001</span>m<span class="token operator">=</span>bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c ="</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n ="</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment">#c = 3503555533881684856570031484769524680665517452904890440380565341537817578824459577068250072204182945458907027431274552419287247174636601487755606335172398103543874403919273506393972459591151327824496303370938563387294059</span><span class="token comment">#n = 4711930799906184953162487834760260422020574773409675520188634839616415335845034221205289256705544681972439104097777157991804380284218315038719444943990492579030720635990538452312528339864352999310398481791730017201031090</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分解n，得到n是由小于等于541的质数相乘得到的，因此可以有计算欧拉函数的式子：</p><p>$\phi(n)=\prod_{i=1}^t （prime(i)-1）$</p><p>然后就可以根据题目条件算出d来解密了 </p><h2 id="BUUCTF-RSA1"><a href="#BUUCTF-RSA1" class="headerlink" title="BUUCTF RSA1"></a>BUUCTF RSA1</h2><p>出现了dp，dq这两个东西，不知道什么意思。先跑个脚本：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">dpdq</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> dq<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> c<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    i_ <span class="token operator">=</span> invert<span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>  <span class="token comment"># I为p(mod q)的逆元，即p*I = 1(mod q)</span>    mp <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token comment"># 计算mp = c^dp % p</span>    mq <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> dq<span class="token punctuation">,</span> q<span class="token punctuation">)</span>  <span class="token comment"># 计算mq = c^dq % q</span>    m <span class="token operator">=</span> <span class="token punctuation">(</span>mp <span class="token operator">+</span> <span class="token punctuation">(</span>i_ <span class="token operator">*</span> <span class="token punctuation">(</span>mq <span class="token operator">-</span> mp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> n  <span class="token comment"># 明文求解公式</span>    m <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 转十六进制数据</span>    flags <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flags <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> flagsflag <span class="token operator">=</span> dpdq<span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>dq<span class="token punctuation">,</span>dp<span class="token punctuation">,</span>c<span class="token punctuation">,</span>p<span class="token operator">*</span>q<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 然后出flag。<br>原理：</p><p><a href="https://blog.csdn.net/xiao_han_a/article/details/118516038?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.no_search_link&amp;spm=1001.2101.3001.4242.1">https://blog.csdn.net/xiao_han_a/article/details/118516038?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.no_search_link&amp;spm=1001.2101.3001.4242.1</a></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><ul><li>BUUCTF Linux Labs</li></ul><p><code>ssh -p 25815 root@node3.buuoj.cn</code>即可</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><ul><li>buuctf JING_SAN_PANG</li></ul><p>使用stegsolve解析gif得到flag</p><p>用之前要配置一手java环境就ok</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog搭建指南</title>
      <link href="/2021/10/16/BLOG%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
      <url>/2021/10/16/BLOG%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>本教程使用<strong>hexo+github</strong>搭建博客网站</p><p><a href="https://andrew82106.github.io/2021/10/16/BLOG%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/">本教程的另一个访问地址:</a></p><p>本教程持续更新ing,更新截止时间为….<del>大家都搞好网站了再停吧</del></p><p>自主搭建网站,不可避免的会出现一些不可描述的新问题,这个时候就需要发挥<strong>Baidu everything</strong>的精神了.但在克服千难万险后能够看到自己的博客顺利上线后的感觉是很爽的</p><blockquote><p>一些以hexo为框架搭建的优秀网页:</p></blockquote><p><a href="https://wangzhongqing.xyz/">wangzhongqing(这个建的是真的好,里面还写了几个小游戏)</a></p><p><a href="https://fech.in/">fech</a></p><p><a href="https://www.yunyoujun.cn/">yunyoujun</a></p><p><a href="https://avimitin.github.io/">avimitin</a></p><p><a href="https://d2fan.com/">d2fan</a></p><p><a href="https://qinghan586.github.io/">qinghan586</a></p><p><a href="https://www.lixl.cn/index.html">lixl</a></p><p><a href="https://sandyzikun.github.io/">sandyzikun</a></p><p><a href="https://blog.cofess.com/">cofess</a></p><p><a href="https://molunerfinn.com/">molunerfinn</a></p><h1 id="Step-One-搭建环境"><a href="#Step-One-搭建环境" class="headerlink" title="Step One 搭建环境"></a>Step One 搭建环境</h1><p>使用hexo+github搭建博客之前需要在电脑上配置一些环境</p><h2 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h2><p>Nodejs可以理解为JavaScript(<del>一种编程语言,没听过也没关系</del>)的”翻译器”,我们之后需要用到的Hexo框架(马上要提到的别急)就需要JavaScript环境才能运行</p><p>下载地址:<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p>网站长成这样的:<br><img src="https://img-blog.csdnimg.cn/6ea1d1f78f50446daa7afc74fec327cb.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>然后点长期维护版,浏览器就会自动下载了,下载好了点开安装包就有这个:<br>,<img src="https://img-blog.csdnimg.cn/0e4f09ea4653455f8d646ed6bd6cea8f.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这个时候按照自己的需求改一下安装的位置(放C盘放多了会炸的)</p><p><img src="https://img-blog.csdnimg.cn/868881d245c34a3fa8180f56f0e54dd9.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>然后一路next到这里后,一定不要选上这个选项,不然会配置不上环境(不知道为什么…)</p><p><img src="https://img-blog.csdnimg.cn/cb4f890ee5c349699d6866ffbbb33179.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>然后一路next即可</p><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p>Git是一个”分布式代码管理平台”的”客户端”,可以把计算机上的代码上传到网络中的库里面.在本方法下的库就是后面会提到的<strong>github</strong></p><p>地址:<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>是windos的就点击windos,mac的就点击mac,下面的是win版本的(<del>没用过mac,穷</del>)</p><p><img src="https://img-blog.csdnimg.cn/206c5e462dc648afac0315ae016fdbd8.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>点击之后自动开始下载</p><p><img src="https://img-blog.csdnimg.cn/f1a9d427d2514dac99279943c6e18074.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>然后打开安装包,一路next到这里,可以按照图中所选的配置来选(建议全部选上，方便)</p><p><img src="https://img-blog.csdnimg.cn/0ce5ce6e1eaa4c9c8c03f751d318d557.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后后面一路next即可,虽然配置多但不管他~~<br><img src="https://img-blog.csdnimg.cn/df9e2efe66954dd9b8c2bce363968457.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/4cf4ad9fc8fc43e9a421fb67b7d1d6e3.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h2><p>前面说过,Github就是网络上的库,用来存放我们网页的源代码的库</p><p>需要注意的是,github在国内访问的速度不是特别快,毕竟是国外的网.当完成本博客后,大家可以尝试使用国内的一些云库来放大家的博客文件(<del>只是给点钱嘛,换来的是访问速度</del>)</p><p>经过测试,用手机开热点让电脑连上然后登陆github比用学校的网登陆快得多,不知道为什么</p><p>地址:<a href="https://github.com/">https://github.com/</a></p><p>点击<strong>sign in</strong>,然后根据提示输入邮箱等进行注册即可.建议在他问你是否要接收最新消息的时候输入<strong>no</strong>,不然垃圾邮件比较烦人.</p><p>后面他要问你和多少人协作,你的身份(students or teachers),关注的领域等等,我感觉随便填就行,都填上没什么影响.后面需要选版本的时候选择<strong>Free</strong>版本的就行了,没必要<strong>student benefit</strong>版的(<del>付费</del>)</p><h2 id="创建Github仓库并且和电脑本地创建联系"><a href="#创建Github仓库并且和电脑本地创建联系" class="headerlink" title="创建Github仓库并且和电脑本地创建联系"></a>创建Github仓库并且和电脑本地创建联系</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>在主页面找到<strong>new repository</strong>,创建一个仓库</p><p>创建仓库的名字有固定格式:<strong>用户名.github.io</strong></p><p>比如我的用户名是username,那么我的仓库名字就是username.github.io</p><p>按照这样的规则创建的网站,访问的域名也是username.github.io</p><h3 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h3><p>现在已经有了网络上的库(也就是github账号里面的仓库),接下来要做的就是把电脑和网络上的库连接起来.这里我们通过”非对称加密”(这是github的默认连接方式,不懂也没有任何影响)来实现:</p><p>首先在电脑桌面上上点击右键(其实在哪里应该都可以),在右键菜单里面选择<strong>Git bash</strong>这个选项</p><p>然后会弹出来一个黑色的框框,在里面设置好你的用户名和邮箱,也就是输入:</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>记住<strong>一定要打双引号和空格</strong>,<del>电脑没那么聪明</del>,比如我的用户名是A,邮箱是<a href="mailto:&#66;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#109;">&#66;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#109;</a>,那么就这样写:</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;A&quot;git config --global user.email &quot;B@qq.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以输入</p><pre class="line-numbers language-none"><code class="language-none">git config user.namegit config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两行命令来看看是否成功设置好了用户名和邮箱.如果输入命令后,git bash打印出来了你刚刚输入的用户名和邮箱,那么就说明成功了</p><p>然后就是创建连接,在黑框框里面输入</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要注意的地方和上面一样,<strong>空格,大小写,符号</strong>等都要一样</p><p>成功输入之后会给你提示,让你选择存放密匙的地方.我们不管他,直接按三个回车就行,最后会显示说密匙已经成功创建:<code>Your public key has been saved in</code>:然后这句话后面会跟一个位置,然后就去电脑上找到这个位置(注意,User文件夹在C盘里面一般是叫做”用户”).如果找到了的话会看到两个文件:</p><p><strong>id_rsa和id_rsa.pub</strong></p><p>用<strong>记事本</strong>打开<strong>id_rsa.pub</strong>文件,把里面的东西全部复制.</p><p>然后打开github,通过点击界面右上角的用户头像旁边的小三角形来点开下拉菜单,里面会有<strong>settings</strong>这个选项,点开后是这个样子的:</p><p><img src="https://img-blog.csdnimg.cn/26220455640b4232a8e19633bf48964f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>点击SSH and GPG keys选项:</p><p><img src="https://img-blog.csdnimg.cn/5c2589cd8c0144378ba13970d93c2d38.jpg?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>然后选择<strong>New SSH Key</strong>,自己随便写一个title,然后把刚才复制的东西复制到下面的Key那个大框框里面,然后点击Add SSH Key</p><p>然后就建立起联系了</p><p>可以在黑框框(Git Bash)里面用</p><pre class="line-numbers language-none"><code class="language-none">ssh git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来检测是否建立起联系</p><p>第一次使用这个命令可能会让选yes或no,输入yes(和下面图中红圈一样),然后在使用一次这个命令(按键盘上的向上方向键可以将上一条命令复制到当前行),就可以得到成功的显示了(<code>You&#39;ve successfully authenticated,but Git does not provide shell access</code>)</p><p>如果结果显示大概是这样就算成功了:</p><p><img src="https://img-blog.csdnimg.cn/f6b5056884bd4bdaba0e26ca06742035.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="最后检查"><a href="#最后检查" class="headerlink" title="最后检查"></a>最后检查</h2><p>打开运行窗口(Windows10的大佬们需要按快捷键<code>window+r</code>,window就是左下角的那个微软标志按键),输入cmd三个字母,回车,打开一个黑框框,也就是dos命令行窗口.输入<code>node -v</code>,如果返回了版本号,说明nodejs安装成功</p><p>同样在dos里面输入<code>npm -v</code>,如果返回了版本号,说明npm安装成功</p><h1 id="Step-Two-安装Hexo并且创建博客源文件"><a href="#Step-Two-安装Hexo并且创建博客源文件" class="headerlink" title="Step Two 安装Hexo并且创建博客源文件"></a>Step Two 安装Hexo并且创建博客源文件</h1><p>现在电脑本机和网库已经连接好了,接下来要做的就是建设网页文件了</p><p>这里我们使用Hexo.</p><p>Hexo 是一个基于nodejs 的<strong>静态博客网站生成器</strong>(这也就是为什么要先安装nodejs的原因了)，作者是台湾同胞Tommy Chen</p><p>使用Hexo可以快速的将我们的博客文件编译为网页代码,<del>不需要手打代码</del></p><p>先在电脑的某个位置创建一个文件夹(<del>不要用中文名字!不要用中文名字!不要用中文名字!重要的事情说三遍!</del>)来放博客文件,仍然建议不要放在C盘</p><p>然后<strong>在dos命令行窗口使用cd命令进入你创建的博客文件夹</strong>,具体格式为:</p><pre class="line-numbers language-none"><code class="language-none">cd D:XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中D:XXX是你文件夹的位置(假设我们把文件放在D盘)</p><p>(一般来讲这一步之后还需要输入一个<code>D:</code>来转换位置,然后当C:XXXX那一堆东西变成D:XXXX的时候说明dos窗口已经进入了D:XXXX这个文件夹了)</p><p><img src="https://img-blog.csdnimg.cn/944452146d034fd18fd4ccf7c6aee2d9.png" alt="在这里插入图片描述"><br>让dos窗口进入你的博客文件夹后,在dos窗口里面输入<code>npm install -g hexo-cli </code>来为电脑安装hexo框架用于快速搭建较为美观的网页</p><p><del>注意命令不要输错了,空格啥的不能丢</del></p><p>等待一段时间后安装完毕,输入:</p><pre class="line-numbers language-none"><code class="language-none">hexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来初始化我们的博客文件</p><p>其中,blog是博客文件的文件名,可以自行修改</p><p>成功后,博客的基本界面就已经创建好了</p><p>这个时候,打开博客文件夹blog,里面就有下面这些文件.</p><p><img src="https://img-blog.csdnimg.cn/45ff1c4418c94bc89fc597166ccb6188.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>在里面点击右键打开<strong>git bash</strong>,就可以在弹出来的黑框框里面对博客文件进行操作了.</p><h1 id="配置hexo从而上传网页文件"><a href="#配置hexo从而上传网页文件" class="headerlink" title="配置hexo从而上传网页文件"></a>配置hexo从而上传网页文件</h1><p>如果电脑上安装了pycharm,就用它打开上面博客源文件的_config.yml文件,如果没安装就用记事本打开.这个文件叫做配置文件,控制着整个博客的基础设置.</p><p>然后找到<code>deploy</code>字段(可以按<code>ctrl+f</code>来查找deploy这个单词),改成:</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: address  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中的address就是你<strong>仓库的确切地址</strong>:</p><p><img src="https://img-blog.csdnimg.cn/fd5ac8485a884a83bcf05d744daed692.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>就是图中红圈里的东西(建议选https),复制过来替换掉address那里就可以了</p><p>然后保存一下配置文件,在博客文件夹下打开<strong>git bash</strong>,输入</p><pre class="line-numbers language-none"><code class="language-none">hexo new &quot;my new page&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来新建一个名为my new page的文章(命令里面必须打引号)</p><p>然后下载一个部署器,用来把博客文件部署到网库里面,即在git bash里面输入:(一定把git bash的位置放在博客源文件夹下)</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后依次输入这三条命令,依次执行清除,编译,部署三个步骤.</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当运行部署这一步的时候可能会需要你输入你github的账号和密码,输入就可以了.有的也有可能有一个”使用浏览器登陆”的选项,这个时候只要保证浏览器上你的github主页是登陆并打开的就行(<del>应该吧</del>)</p><p>这三步搞完后,你的网站就正式运行了,网址是:username.github.io</p><p>其中,username就是你的用户名</p><p>在网址栏输入,按下回车后,就会来到你的网站的最初始界面:</p><p><img src="https://img-blog.csdnimg.cn/915feeb437514481bece53af6bc6ef4d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>在这里建议,执行到这一步后,把博客源文件拷贝一份放在另外一个位置.后面的操作对于刚刚接触这个项目的人来说略显复杂,如果出现了不可逆的错误,那么就可以用拷贝的文件把出错的文件覆盖掉然后重新配置.博客源文件中最重要的是<code>_post</code>文件中的文章,这些东西复制下来存好也是可以的.</p><p><strong>在进行第三步之前,需要了解一些前置知识如下所示:</strong></p><h1 id="博客源文件功能解析"><a href="#博客源文件功能解析" class="headerlink" title="博客源文件功能解析"></a>博客源文件功能解析</h1><p>经过前面的操作,我们已经有了博客源文件夹(<strong>也叫博客根目录</strong>),里面长这个样子</p><p><img src="https://img-blog.csdnimg.cn/7081d6631c2741a2b9e1e7635113ad5c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>一般来说,管理网站只需要明白以下几个文件的含义,其他的文件很少用得到(前提是对博客的个性化要求不高):</p><h2 id="source-文件夹"><a href="#source-文件夹" class="headerlink" title="source 文件夹"></a>source 文件夹</h2><p>这个文件夹里面的_posts文件夹里面放着网页的各个文章.一般来讲,里面的文章都使用markdown来编写.关于markdown,后面会详细提及.</p><p><img src="https://img-blog.csdnimg.cn/025c38a0b7d945ffb191eedc8711365a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQW5kcmV3TWU4MjEx,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h2><p>themes存放的是主题文件夹.在hexo框架下,来自全世界各地的大佬开发了成千上万种不同的主题.在一开始的时候我们初始的主题叫做<strong>landscape</strong>,效果就像上面的那幅图一样.</p><p>如果涉及到更换主题文件,那么新的主题文件就会放在themes文件夹里面.</p><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>这个文件就是前面提到的配置文件,控制着网页的各个基础设置.</p><h1 id="markdown-文本编辑器基础"><a href="#markdown-文本编辑器基础" class="headerlink" title="markdown 文本编辑器基础"></a>markdown 文本编辑器基础</h1><p>markdown是一种文本编辑器,熟练操作后可以快速制作出格式工整的文章,并且可以很方便的支持图片插入,数学公式(就像这种神奇的东西也能打得出来:$\lim_{x\to \infty}\prod_{i=0}^{n}\sqrt{x_{i}^{3^{e\frac{e^6}{3x_{i}}}}}$)书写,表格编辑等略显复杂的操作(<del>这就是我基本不用word和ppt的借口,因为太低效了</del>)</p><p>本文也是使用markdown编写</p><h2 id="markdown语法基础"><a href="#markdown语法基础" class="headerlink" title="markdown语法基础"></a>markdown语法基础</h2><p>这里汇总常见的几个.更详细的请自行百度</p><p>推荐几个在线的markdown编辑器</p><p><a href="https://stackedit.io/app#">stackedit</a></p><p><a href="http://mahua.jser.me/">mahua(这个没法使用公式,比较菜)</a></p><p>当然也可以在CSDN里面注册一个账号,使用CSDN里面的编辑器,也很好用(CSDN是一个程序员技术交流平台,里面有大量的计算机技术相关的博客,可以去看看)</p><p>本地的编辑器的话,墙裂推荐pycharm.这个东西不仅可以用来打python代码,还可以下载markdown插件,然后支持markdown的写作,手感极好.</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><blockquote><p>编辑时的样子:</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 一级标题## 二级标题### 三级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>显示出来的样子:</p></blockquote><p><img src="https://img-blog.csdnimg.cn/a03addd416c448d4999a605e5b287f05.png" alt="在这里插入图片描述"></p><h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><blockquote><p>编辑时</p></blockquote><p>用两个: ```符号把代码包起来</p><blockquote><p>显示为</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><blockquote><p>编辑时</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[baidu一下](www.baidu.com)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>显示为</p></blockquote><p><a href="www.baidu.com">baidu一下</a></p><h3 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h3><blockquote><p>编辑时</p></blockquote><pre class="line-numbers language-none"><code class="language-none">![](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;img_convert&#x2F;2fd39103d60b6a4af36825fe8a3245f1.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>显示为</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/2fd39103d60b6a4af36825fe8a3245f1.png"></p><p>这里注意,能够放在这上面的图片都需要有地址.可以通过找图床,将图片存在图床中来获得图片的地址</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><blockquote><p>编辑时</p></blockquote><pre class="line-numbers language-none"><code class="language-none">- 项目  * 项目    + 项目1. 项目12. 项目23. 项目3- [ ] 计划任务- [x] 完成任务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>显示为</p></blockquote><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li><input disabled="" type="checkbox"> 计划任务</li><li><input checked="" disabled="" type="checkbox"> 完成任务</li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><blockquote><p>编辑为</p></blockquote><pre class="line-numbers language-none"><code class="language-none">项目     | Value-------- | -----电脑  | $1600手机  | $12导管  | $1| Column 1 | Column 2      ||:--------:| -------------:|| centered 文本居中 | right-aligned 文本居右 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>显示为</p></blockquote><table><thead><tr><th>项目</th><th>Value</th></tr></thead><tbody><tr><td>电脑</td><td>$1600</td></tr><tr><td>手机</td><td>$12</td></tr><tr><td>导管</td><td>$1</td></tr></tbody></table><table><thead><tr><th align="center">Column 1</th><th align="right">Column 2</th></tr></thead><tbody><tr><td align="center">centered 文本居中</td><td align="right">right-aligned 文本居右</td></tr></tbody></table><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>这个的规则比较多,<a href="https://khan.github.io/KaTeX/">参考文档</a></p><p>也可以自行百度</p><p>公式展示 </p><p><code>\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N 显示为:</code>$\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ </p><p><code>\Gamma(z) = \int_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt\,. 显示为:</code></p><p>$$<br>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt,.<br>$$</p><h1 id="hexo部署博客基本操作"><a href="#hexo部署博客基本操作" class="headerlink" title="hexo部署博客基本操作"></a>hexo部署博客基本操作</h1><p>在博客根目录下(之前讲到过)打开git bash,然后进行相应命令的输入:</p><p>一般根据需求会用到以下几个命令</p><pre class="line-numbers language-none"><code class="language-none">hexo new &quot;name&quot;  (创建一个名为name的,格式为markdown的文章,放在sourse下面的_post文件夹下)hexo clean(只清除编译后的网页文件,不会清除文章)hexo g(以文章为基本编译网页文件)hexo d(将编译后的网页文件部署到网库中)hexo s(开启本地调试模式,以现有的网页编译文件为基础生成一个本地网站,可以通过黑框框里面所给的网址来访问)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要删除文章,直接在_post文件夹下删除相应的.md文件就可以了</p><p>如果部署的时候出现乱码的情况,那么就需要更改文章的编码,将其改为<code>utf-8</code>编码</p><p>因此,日常的博客操作中,<strong>可以</strong>这样使用命令:</p><blockquote><p>如果要新建一篇文章:</p></blockquote><pre class="line-numbers language-none"><code class="language-none">hexo new &quot;passage one&quot;(然后去修改文章(用markdown写))hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果要修改一篇文章</p></blockquote><pre class="line-numbers language-none"><code class="language-none">(先修改)hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果要修改博客的配置</p></blockquote><pre class="line-numbers language-none"><code class="language-none">hexo s(然后修改配置)(修改后进入所给的本地网站查看效果并反复修改)(修改成功后按下ctrl+c来停止本地调试)hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Step-Three-博客美化"><a href="#Step-Three-博客美化" class="headerlink" title="Step Three 博客美化"></a>Step Three 博客美化</h1><p>按照上面的第一二步过后,得到的是一个简单的界面,主题是landscape，标题栏啥的都没改，因此首先最基础的要做的事情就是<strong>在网站的配置文件（config.yml）里面去修改基本参数，包括网站名字，网站签名，作者名字，作者签名等等</strong>，具体请百度（比如百度 hexo blog 基础设置 之类的）</p><p>而就像前面提到的一样,hexo有成千上万个主题,因此大家可以自主选择主题,然后进行各种个性化的设置</p><p>这里就使用next主题来作为一个美化的例子</p><p>注意,接下来的操作出错的可能性很大,因此最好每操作一步就部署一下博客看看有没有效果,有没有出错.如果出错了就可以去对点查询,否则一下做很多步的话就不知道哪里出问题了.</p><p>注意,在这一步之后的所有命令一般都是在博客源文件下打开git bash然后输入执行,后面就不重复说了.</p><h2 id="下载next主题"><a href="#下载next主题" class="headerlink" title="下载next主题"></a>下载next主题</h2><p>在博客根目录打开git bash,在其中使用如下命令下载next主题</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后需要在 <strong>站点配置文件(_config.yml)</strong> 中找到<strong>theme</strong> 这个关键字，将其冒号后面的主题改成<strong>next</strong>（正常的话应该本来是landscape）</p><h2 id="基本信息配置"><a href="#基本信息配置" class="headerlink" title="基本信息配置"></a>基本信息配置</h2><p>基本信息包括：博客标题、作者、描述、语言等等。</p><p>打开**站点配置文件(_config.yml)**，找到Site字段,按照上文中的提示修改(翻翻前面的就看得到)</p><h2 id="主题特色配置"><a href="#主题特色配置" class="headerlink" title="主题特色配置"></a>主题特色配置</h2><p>主题也有一个配置文件,在theme文件夹中的next文件夹下面,也叫_config.yml,后面不妨叫这个文件为<strong>主题配置文件</strong></p><h3 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h3><p>我们刚开始默认的菜单只有首页和归档两个，不能够满足我们的要求，所以需要添加菜单，打开 主题配置文件 找到Menu Settings</p><pre class="line-numbers language-none"><code class="language-none">menu:  home: &#x2F; || home                          &#x2F;&#x2F;首页  archives: &#x2F;archives&#x2F; || archive          &#x2F;&#x2F;归档  categories: &#x2F;categories&#x2F; || th           &#x2F;&#x2F;分类  tags: &#x2F;tags&#x2F; || tags                     &#x2F;&#x2F;标签  about: &#x2F;about&#x2F; || user                   &#x2F;&#x2F;关于  #schedule: &#x2F;schedule&#x2F; || calendar        &#x2F;&#x2F;日程表  #sitemap: &#x2F;sitemap.xml || sitemap        &#x2F;&#x2F;站点地图  #commonweal: &#x2F;404&#x2F; || heartbeat          &#x2F;&#x2F;公益404<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看你需要哪个菜单就把哪个取消注释(就是那个<code>#</code>)打开就行了；<br>关于后面的格式，以<code>archives: /archives/ || archive</code>为例：<br><code>||</code> 之前的<code>/archives/</code>表示标题“归档,<code>||</code>之后的<code>archive</code>表示图标，可以去<code>Font Awesome</code>中查看或修改，Next主题所有的图标都来自<code>Font Awesome</code>.</p><h3 id="next的风格设置"><a href="#next的风格设置" class="headerlink" title="next的风格设置"></a>next的风格设置</h3><p>Next主题还有4种风格供我们选择，打开主题配置文件 找到Scheme Settings</p><pre class="line-numbers language-none"><code class="language-none"># Schemes# scheme: Muse# scheme: Mist# scheme: Pisces# scheme: Gemini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4种风格大同小异，可以选择自己喜欢的风格</p><h3 id="侧栏设置"><a href="#侧栏设置" class="headerlink" title="侧栏设置"></a>侧栏设置</h3><p>侧栏设置包括：侧栏位置、侧栏显示与否、文章间距、返回顶部按钮等等</p><p>打开 主题配置文件 找到sidebar字段</p><pre class="line-numbers language-none"><code class="language-none">sidebar:# Sidebar Position - 侧栏位置（只对Pisces | Gemini两种风格有效）  position: left        &#x2F;&#x2F;靠左放置  #position: right      &#x2F;&#x2F;靠右放置# Sidebar Display - 侧栏显示时机（只对Muse | Mist两种风格有效）  #display: post        &#x2F;&#x2F;默认行为，在文章页面（拥有目录列表）时显示  display: always       &#x2F;&#x2F;在所有页面中都显示  #display: hide        &#x2F;&#x2F;在所有页面中都隐藏（可以手动展开）  #display: remove      &#x2F;&#x2F;完全移除  offset: 12            &#x2F;&#x2F;文章间距（只对Pisces | Gemini两种风格有效）  b2t: false            &#x2F;&#x2F;返回顶部按钮（只对Pisces | Gemini两种风格有效）  scrollpercent: true   &#x2F;&#x2F;返回顶部按钮的百分比<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><p>打开 主题配置文件 找到Sidebar Avatar字段</p><pre class="line-numbers language-none"><code class="language-none"># Sidebar Avataravatar: &#x2F;images&#x2F;header.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是头像的路径，只需把你的头像命名为header.jpg（随便命名）放入<code>themes/next/source/images</code>中，将avatar的路径名改成你的头像名就OK</p><h3 id="添加分类模块"><a href="#添加分类模块" class="headerlink" title="添加分类模块"></a>添加分类模块</h3><ul><li><p>新建一个分类页面</p><pre class="line-numbers language-none"><code class="language-none">$ hexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>你会发现你的source文件夹下有了<code>categorcies/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 分类</code></p></li><li><p>打开 主题配置文件 找到menu，将categorcies取消注释</p></li><li><p>把文章归入分类只需在文章的<strong>顶部标题下方</strong>添加<code>categories</code>字段，即可自动创建分类名并加入对应的分类中</p></li></ul><p>举个栗子：</p><pre class="line-numbers language-none"><code class="language-none">title: 分类测试文章标题categories: 分类名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="添加标签模块"><a href="#添加标签模块" class="headerlink" title="添加标签模块"></a>添加标签模块</h3><ul><li>新建一个标签页面</li></ul><pre class="line-numbers language-none"><code class="language-none">$ hexo new page tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>你会发现你的source文件夹下有了<code>tags/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 标签</code></p></li><li><p>打开 主题配置文件 找到menu，将tags取消注释</p></li><li><p>把文章添加标签只需在文章的顶部标题下方添加tags字段，即可自动创建标签名并归入对应的标签中</p></li></ul><p>举个栗子：</p><pre class="line-numbers language-none"><code class="language-none">title: 标签测试文章标题tags:   - 标签1  - 标签2  ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加关于模块"><a href="#添加关于模块" class="headerlink" title="添加关于模块"></a>添加关于模块</h3><ul><li><p>新建一个关于页面</p><pre class="line-numbers language-none"><code class="language-none">$ hexo new page about<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>你会发现你的source文件夹下有了<code>about/index.md</code>，打开<code>index.md</code>文件即可编辑关于你的信息，可以随便编辑。</p></li><li><p>打开 主题配置文件 找到menu，将about取消注释</p></li></ul><h3 id="添加阅读全文按钮"><a href="#添加阅读全文按钮" class="headerlink" title="添加阅读全文按钮"></a>添加阅读全文按钮</h3><p>因为在你的博客主页会有多篇文章，如果你想让你的文章只显示一部分，多余的可以点击阅读全文来查看，那么你需要在你的文章中添加</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--more--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其后面的部分就不会显示了，只能点击阅读全文才能看</p><h3 id="增加文章字数统计及阅读时常功能"><a href="#增加文章字数统计及阅读时常功能" class="headerlink" title="增加文章字数统计及阅读时常功能"></a>增加文章字数统计及阅读时常功能</h3><p>安装插件hexo-wordcount,执行以下命令:</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-wordcount --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改<code>themes/next/_config.yml</code>主题配置文件，搜索关键字<code>post_wordcount</code>,修改如下:</p><pre class="line-numbers language-none"><code class="language-none">post_wordcount:  item_text: true  wordcount: true #单篇文章字数  min2read: true #单篇阅读时长  totalcount: true #站点总字数  separated_meta: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文章置顶功能"><a href="#文章置顶功能" class="headerlink" title="文章置顶功能"></a>文章置顶功能</h3><p>使用git bash移除默认安装的插件：</p><pre class="line-numbers language-none"><code class="language-none">npm uninstall hexo-generator-index --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装新插件:</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-index-pin-top --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后编辑有这需求的相关文章时，在<strong>Front-matter</strong>（文件最上方以<code>—</code>分隔的区域）加上一行：<br><code>top: true</code><br>如果你置顶了多篇，怎么控制顺序呢？<strong>设置top的值（大的在前面）</strong>，比如：</p><pre class="line-numbers language-none"><code class="language-none"># Post a.mdtitle: atop: 1# Post b.mdtitle: btop: 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="为博客加上宠物-或者小哥哥小姐姐"><a href="#为博客加上宠物-或者小哥哥小姐姐" class="headerlink" title="为博客加上宠物(或者小哥哥小姐姐)"></a>为博客加上宠物(或者小哥哥小姐姐)</h3><h4 id="Step-A-下载插件"><a href="#Step-A-下载插件" class="headerlink" title="Step A 下载插件"></a>Step A 下载插件</h4><p>git bash输入下方代码</p><pre class="line-numbers language-none"><code class="language-none">npm install -save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Step-B-添加参数"><a href="#Step-B-添加参数" class="headerlink" title="Step B 添加参数"></a>Step B 添加参数</h4><p>然后在在站点配置文件 _config.yml中添加参数：</p><pre class="line-numbers language-none"><code class="language-none">live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw&#x2F;  pluginJsPath: lib&#x2F;  pluginModelPath: assets&#x2F;  tagMode: false  log: false  model:    use: live2d-widget-model-&lt;你喜欢的模型名字&gt;  display:    position: right    width: 150    height: 300  mobile:    show: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可供选择模型(具体长什么样子去百度)：</p><pre class="line-numbers language-none"><code class="language-none">live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-haru&#x2F;01 (use npm install --save live2d-widget-model-haru)live2d-widget-model-haru&#x2F;02 (use npm install --save live2d-widget-model-haru)live2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Step-C-建配置文件"><a href="#Step-C-建配置文件" class="headerlink" title="Step C 建配置文件"></a>Step C 建配置文件</h4><p>在站点目录下建文件夹<code>live2d_models</code>，</p><p>再在<code>live2d_models</code>下建文件夹<code>&lt;你喜欢的模型名字&gt;</code>,</p><p>再在<code>&lt;你喜欢的模型名字&gt;</code>下建<code>json</code>文件：<code>&lt;你喜欢的模型名字&gt;</code>.model.json</p><p>安装模型。在命令行（即Git Bash）运行以下命令即可：</p><pre class="line-numbers language-none"><code class="language-none">npm install --save live2d-widget-model-&lt;你喜欢的模型名字&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="各版块透明度修改"><a href="#各版块透明度修改" class="headerlink" title="各版块透明度修改"></a>各版块透明度修改</h3><h4 id="内容板块透明"><a href="#内容板块透明" class="headerlink" title="内容板块透明"></a>内容板块透明</h4><p>博客根目录 <code>themes\next\source\css\_schemes\Pisces\_layout.styl</code>文件 <code>.content-wrap</code> 标签下 <code>background: white</code>修改为：</p><p><code>background: rgba(255,255,255,0.7); //0.7</code>是透明度</p><h4 id="菜单栏背景"><a href="#菜单栏背景" class="headerlink" title="菜单栏背景"></a>菜单栏背景</h4><p>博客根目录 <code>themes\next\source\css\_schemes\Pisces\_layout.styl</code>文件<code>.header-inner</code>标签下<code> background: white</code>修改为：</p><p><code>background: rgba(255,255,255,0.7); //0.7</code>是透明度</p><h4 id="站点概况背景"><a href="#站点概况背景" class="headerlink" title="站点概况背景"></a>站点概况背景</h4><p>博客根目录<code>themes\next\source\css\_schemes\Pisces\_sidebar.styl</code> 文件<code>.sidebar-inner</code> 标签下<code> background: white</code>修改为：</p><p><code>background: rgba(255,255,255,0.7); //0.7</code>是透明度</p><p>然后修改博客根目录<code>themes\next\source\css\_schemes\Pisces\_layout.styl</code>文件<code>.sidebar </code>标签下 <code>background: $body-bg-color</code>修改为：</p><p><code>background: rgba(255,255,255,0.7); //0.7</code>是透明度</p><h3 id="背景图片设置"><a href="#背景图片设置" class="headerlink" title="背景图片设置"></a>背景图片设置</h3><p>配置步骤</p><p>1）修改NexT配置文件<br>在NexT的配置文件中的<code>custom_file_path</code>参数下新建或设置CSS样式文件<code>style.styl</code>的存储路径，我们可以在此文件中自定义使用自己的各种样式，此路径必须在Hexo根目录source文件夹下，建议设置成默认路径<code>source/_data/style.styl</code>，然后在对应路径下创建对应的<code>style.styl</code>文件。</p><p>2）配置<code>style.styl</code>文件<br>此脚本内容遵循CSS语法，以下是配置示例：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// Custom styles.// 整体背景设置body</span> <span class="token punctuation">&#123;</span>     <span class="token property">background</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/images/adrian-Xft-JdC-Jbc-unsplash.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>// 设定背景图片<span class="token punctuation">,</span>images同处于source文件夹下     <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>// 设定背景图片非重复填充    <span class="token property">background-attachment</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>// 设置背景图片不随页面滚动    <span class="token property">background-position</span><span class="token punctuation">:</span>50% 50%<span class="token punctuation">;</span>// 设置背景图片位置    <span class="token property">background-size</span><span class="token punctuation">:</span> cover// 设置保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小<span class="token punctuation">&#125;</span><span class="token selector">// 页面头样式属性.header-inner</span> <span class="token punctuation">&#123;</span>  // 也可以同时定义背景色  // <span class="token property">background</span><span class="token punctuation">:</span> #ddd   // 透明度  // <span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">// sidebar侧边工具栏样式属性.sidebar</span><span class="token punctuation">&#123;</span>    // 动画过渡时间    <span class="token property">transition-duration</span><span class="token punctuation">:</span> 0.4s<span class="token punctuation">;</span>    // 透明度    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">&#125;</span><span class="token selector">// 标题样式.posts-expand .post-title-link</span> <span class="token punctuation">&#123;</span>    // 设置字体颜色    <span class="token property">color</span><span class="token punctuation">:</span> #222<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">// 文章版块样式.post-block</span> <span class="token punctuation">&#123;</span>    //<span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--content-bg-color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #fff    <span class="token property">border-radius</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 2px 2px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.12<span class="token punctuation">)</span><span class="token punctuation">,</span> 0 3px 1px -2px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.06<span class="token punctuation">)</span><span class="token punctuation">,</span> 0 1px 5px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.12<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多的个性化操作可以自行百度.</p><p>按理来讲,对个性化的要求越高,对网页代码的修改也就更多,对技术方面的要求也就更多.如果更加感兴趣,可以尝试使用不同 网库,不同的博客框架,甚至于去学习一下PHP,从而开发出更加个性化的网页.有兴趣的同学可以更加深入的去自行研究,本教程就只能浅尝辄止,做一个指路者,领大家进入这个新的领域罢了.</p><p><del>建好网站的同学可以私信我把网址发一下,然后我们可以做一个友链,每个人的网站上都有其他44个人的网址,岂不美哉</del></p><h1 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h1><h2 id="执行hexo-d的时候出现问题"><a href="#执行hexo-d的时候出现问题" class="headerlink" title="执行hexo d的时候出现问题"></a>执行hexo d的时候出现问题</h2><ul><li>如果在执行hexo d的时候发现只输出了两句话,并没有输出一大串代码,说明很可能是在写配置文件的时候,deploy字段出现<strong>没打空格</strong>的情况:</li></ul><pre class="line-numbers language-none"><code class="language-none">deploy:  type:git  repo:address  branch:master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样就要不得的</p><p>要这样才会生效:</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: address  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果hexo d的时候出现<code>Time Out</code>这样的错误提示信息,说明现在和github的连接不太好,多试几下,多换几个网,甚至于用手机热点也行</li></ul><h2 id="在查看自己的网站时出现404"><a href="#在查看自己的网站时出现404" class="headerlink" title="在查看自己的网站时出现404"></a>在查看自己的网站时出现404</h2><p>先查看自己的仓库,如果里面没东西,就说明没传上去.否则就是传上去了但是没有缓过来,等一下就好了.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论...这一波令人窒息的操作</title>
      <link href="/2021/08/20/%E6%95%B0%E8%AE%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/20/%E6%95%B0%E8%AE%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>翻了翻之前写的博客……</p><p>为啥我还写过这么牛的东西啊啊啊啊啊啊</p><p>马上搬过来,不说别的了</p><blockquote><p>2019.7.25</p></blockquote><p>最近在搞数论,为了防止忘记,在这里留一个文章记录,其中包含一些非常细节的证明和推导,据说这对数学思维的培养很有帮助 <del>(大佬莫喷,蒟蒻刚学OI)</del></p><h1 id="1-整除"><a href="#1-整除" class="headerlink" title="1.整除"></a>1.整除</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>$\exists q满足 a=qb$<br>则a能被b整除，记作：$b|a$</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ul><li>若$a|b且b|a,则a=b或a=-b$</li><li>$若a|b,b|c,则a|c$</li><li>$若a|b,a|c,则对于任意整数x,y,有a|(bx+cy)$<br>证明:<br>$由a|b,a|c$<br>$得k_1\times a=b,k_2\times a=c$<br>$则bx+cy=k_1\times a+k_2\times a=a(k_1+k_2)$<br>$故a|(bx+cy)$</li></ul><h1 id="2-带余除法"><a href="#2-带余除法" class="headerlink" title="2.带余除法"></a>2.带余除法</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>$对于整数a,b(a&gt;=b),a可以被唯一表示为a=bq+r,r即为余数$</p><h2 id="余数的范围和唯一性"><a href="#余数的范围和唯一性" class="headerlink" title="余数的范围和唯一性"></a>余数的范围和唯一性</h2><p>余数范围<del>显然是</del>:$[0,|b|)$<br>唯一性证明:考虑使用反证法<br>$假设a可以被表示为a=b\times q_1+r_1=b\times q_2+r_2$<br>$则b\times q_1+r_1=b\times q_2+r_2$<br>$b\times (q_1-q_2)=r_2-r_1$<br>$即b|r2-r1$<br>$由于r_i\in [0,|b|)且b|r_2-r_1$<br>$r_2-r_1=0,即r_2=r_1$<br>$由于开始我们假设r_2 != r_1,故与原命题矛盾$<br>$得证$</p><h1 id="3-素数"><a href="#3-素数" class="headerlink" title="3.素数"></a>3.素数</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>除了1和它本身外没有其他因子的数</p><h2 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h2><ul><li>一个数除1以外的最小正因数是素数</li><li>任意数可以被分解为若干素数之积</li><li>素数有无穷个</li></ul><h2 id="判定素数和线性筛"><a href="#判定素数和线性筛" class="headerlink" title="判定素数和线性筛"></a>判定素数和线性筛</h2><h3 id="判定素数"><a href="#判定素数" class="headerlink" title="判定素数"></a>判定素数</h3><h3 id="各种筛法"><a href="#各种筛法" class="headerlink" title="各种筛法"></a>各种筛法</h3><h2 id="算数基本定理-唯一分解定理"><a href="#算数基本定理-唯一分解定理" class="headerlink" title="算数基本定理(唯一分解定理)"></a>算数基本定理(唯一分解定理)</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>$\forall x=p_1^{s1}\times p_2^{s_2}\times……p_n^{s_m}=\prod_{i=1}^{m}p_i^{s_i},p_i是素数$<br>即:任意数可以被分解为若干素数之积</p><h3 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h3><ul><li>$x的约数个数d(n)=\prod_{i=1}^{m}(s_i+1),根据乘法原理可证明$</li><li>$x的约数和\sigma(n)=\prod_{i=1}^{m}(p_i+p_i^2+……+p_i^{c_i})=\prod_{i=1}^{m}(\sum_{j=1}^{c_i}(p_i)^j)$</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>$令a=p_1^{s1}\times p_2^{s_2}\times……p_n^{s_n},b=p_1^{k1}\times p_2^{k_2}\times……p_n^{k_n}$<br>$[a,b]=p_1^{max(s_1,k_1)}\times p_2^{max(s_2,k_2)}\times……p_n^{max(s_n,k_n)}=\prod_{i=1}^{n}p_i^{max(s_i,k_i)}$<br>$(a,b)=p_1^{min(s_1,k_1)}\times p_2^{min(s_2,k_2)}\times……p_n^{min(s_n,k_n)}=\prod_{i=1}^{n}p_i^{min(s_i,k_i)}$</li><li>由上面这个性质可得,$[a,b]\times(a,b)=|a\times b|$</li><li>若(a,b)=1,则$\prod_{i=1}^{n}p_i^{min(s_i,k_i)}=1$,即每一个pi的最小指数为0</li></ul><h1 id="4-最大公因数"><a href="#4-最大公因数" class="headerlink" title="4.最大公因数"></a>4.最大公因数</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><p>从字面意思即可了解<br>$\oplus$:a,b的最大公因数表示为$(a,b)$</p><h2 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h2><ul><li><p>$若(a,b)=1,则a,b互素$</p></li><li><p><strong>辗转相减</strong>$(a,b)=(a-b,b)$</p></li></ul><p>证明:<br>$设a和b的所有因子组成集合S,a-b和b的所有因子组成集合K$<br>$则对于任意的d\in S有:$<br>$d|a,d|b$<br>$则d|(a\times x+b\times y),x和y任意取值$<br>$令x=1,y=-1,则有$<br>$d|(a-b)$<br>$则对于任意的d\in S有d|(a-b),d|b,即d\in K$<br>$同理,对于任意的d\in K有d\in S$<br>$由上可知:K\subseteq S且S \subseteq K$<br>$故S=K$<br>$故(a,b)=(a-b,b)$</p><ul><li><strong>辗转相除</strong>$(a,b)=(b,a\pmod b)$</li></ul><p>证明:</p><p>$设r=a\pmod b,根据带余除法:$<br>$r=a-k\times b$<br>$待证式子即化为:(a,b)=(a,a-k\times b)$<br>按照辗转相减的证明思路不难证得辗转相减的推论:<br>$(a,b)=(a-q\times b,b)$<br>$令q=k,得证$</p><ul><li>$(\frac{a}{(a,b)},\frac{b}{(a,b)})=1$(用唯一分解定理互素的等价变换可知)</li></ul><h1 id="5-裴蜀定理"><a href="#5-裴蜀定理" class="headerlink" title="5.裴蜀定理"></a>5.裴蜀定理</h1><h2 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h2><p>$若d=(a,b)$<br>$则\exists m,n 使得 a\times m+b\times n=d$</p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>考虑用数学归纳法证明：</p><p>$当b=0时:$<br>$显然a=d，a可以取任意值，存在m，n满足上式$<br>$当b&gt;0时：$<br>$假设对于x\in [0,b-1],都满足上式，其中a可以取任意值$<br>$首先,显然(a,b)=(b,a\pmod b)=d$<br>$则对于c=a\pmod b，由于c\in[0,b-1]$<br>$故:b\times m+c\times n=d ——(\theta)$<br>$由带余除法得:a=k\times b+c,即c=a-k\times b$<br>$将c代入(\theta)中得b\times m+(a-k\times b)\times n=d$<br>$整理得a\times n+b\times(m-k\times n)=d$<br>$则对于a,b,有m’=n,n’=m-k\times n使得a\times m’+b\times n’=d成立$<br><strong>(这里证得了若对于[0,n]满足上式，则[0,n+1]满足了上式)</strong><br>$故对于任意a，b，d=(a,b),\exists m,n 使得 a\times m+b\times n=d$</p><h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><p>$(a,b)=1\Leftarrow\Rightarrow a\times m+b\times n=1$</p><h3 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h3><h2 id="推论-1"><a href="#推论-1" class="headerlink" title="推论"></a>推论</h2><ul><li>若$a|b\times c,(a,b)=1,则a|c$</li><li>$若p是素数,p|a\times b,则p|a或p|b$</li><li>$若(a,n)=1,(b,n)=1,则(a\times b,n)=1$</li></ul><h1 id="6-最小公倍数"><a href="#6-最小公倍数" class="headerlink" title="6.最小公倍数"></a>6.最小公倍数</h1><h2 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h2><p>从字面意思即可了解<br>$\oplus$:最小公倍数表示为$[a,b]$</p><h2 id="性质-3"><a href="#性质-3" class="headerlink" title="性质"></a>性质</h2><ul><li>$[a,b]\times(a,b)=|a\times b|$</li></ul><h1 id="7-同余"><a href="#7-同余" class="headerlink" title="7.同余"></a>7.同余</h1><h2 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h2><p>$若若a和b被n除后余数相同，则称a与b同余，记作:a \equiv b \pmod n$</p><h2 id="性质-4"><a href="#性质-4" class="headerlink" title="性质"></a>性质</h2><ul><li>$a \equiv b \pmod n \Leftarrow\Rightarrow n|(a-b)$</li><li>$若a \equiv b \pmod n,c \equiv d \pmod n$<br>则:<br>$a+c \equiv b+d \pmod n$<br>$a\times c \equiv b\times d \pmod n$<br>$k\times a \equiv k\times b \pmod n$<br>$a^m \equiv b^m \pmod n$</li><li>若$k\times a \equiv k\times b \pmod n,且(a,n)=1$<br>则$b\equiv c \pmod n$(消去律,后面会用到)</li></ul><h1 id="8-剩余类"><a href="#8-剩余类" class="headerlink" title="8.剩余类"></a>8.剩余类</h1><h2 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h2><p>$把所有模n后与a同余的整数构成的集合叫做一个剩余类，记作[a]$</p><p>则:$a \equiv b \pmod n \Leftarrow\Rightarrow [a]=[b]$</p><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>$[a] + [b] = [a+b], [a] * [b] = [a*b]$</p><h2 id="零元-单位元-负元和逆元"><a href="#零元-单位元-负元和逆元" class="headerlink" title="零元,单位元,负元和逆元"></a>零元,单位元,负元和逆元</h2><p>$[0]是零元，[1]是单位元$<br>$[a]的负元与逆元(用[b]表示)：[a]+[b] = [b] + [a] = 0,  [a][b] = [b][a] = 1$</p><h2 id="性质-5"><a href="#性质-5" class="headerlink" title="性质"></a>性质</h2><ul><li>$[a]有逆元充要条件：(a,n)=1$       </li></ul><p>证明：（充要条件：即充分必要条件，若条件p可以推出条件q，则p是q的充分条件，若q又可以反推p，则q是p的必要条件）</p><p>1.充分性：<br>若[a]存在逆元[b],则有$a\times b \equiv 1\pmod n$,即$a\times b+k\times n=1(k&lt;0)$<br>$由于(a,n)|a,(a,n)|n$<br>$即(a,n)|a\times b,(a,n)|k\times n$<br>$因此(a,n)|(a\times b+k\times n)$<br>$则(a,n)|1$<br>$故(a,n)=1$<br>2.必要性：<br>若$(a,n)=1,根据裴蜀定理,存在一对b,y满足:$<br>$a\times b+n\times y=(a,n)=1$<br>$等价于a\times b\equiv1\pmod n$<br>$即b为a的逆元$<br>$证毕$</p><ul><li>$若[a]有逆元,则逆元唯一$</li></ul><p>证明:<br>假设逆元不唯一:<br>$设[a]有逆元[b_1],[b_2]$<br>$则有:a\times b_1\equiv a\times b_2 \mod n$<br>$由于(a,n)=1,根据消去律:b_1\equiv b_2 \mod n$<br>$即[b_1]=[b_2]$<br>$矛盾,则[a]的逆元唯一$<br>$证毕$</p><ul><li>$无零因子充要条件：n为素数(显然嘛)$</li></ul><h1 id="9-群论初步-不是很严谨-看看就好"><a href="#9-群论初步-不是很严谨-看看就好" class="headerlink" title="9.群论初步(不是很严谨,看看就好)"></a>9.群论初步(不是很严谨,看看就好)</h1><h2 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h2><blockquote><p>在数学中，群表示一个拥有满足封闭性、结合律、有单位元、有逆元的二元运算的代数结构，包括阿贝尔群、同态和共轭类。——–baidu</p></blockquote><p>说的直白点,就是集合+运算</p><h2 id="性质-6"><a href="#性质-6" class="headerlink" title="性质"></a>性质</h2><ul><li>运算封闭性(整数加/减整数依然是整数)</li><li>结合律</li><li>存在单位元(唯一)</li><li>每个数都存在逆元(唯一)</li></ul><h2 id="子群-循环群"><a href="#子群-循环群" class="headerlink" title="子群,循环群"></a>子群,循环群</h2><blockquote><p>子群:如果群G的非空子集合H对于G的运算也成一个群，那么H称为G的子群。</p></blockquote><p>用大白话来讲就是H是包含在G中,且有单位元,每个H中的元素都有逆元</p><blockquote><p>若—个群G的每—个元都是G的某—个固定元a的乘方，则称G为循环群，记作G=(a)={am |m∈Z}，a称为G的—个生成元。</p></blockquote><p>其实就是说若群里的某个元素可以以乘方的方式来形成其他的元素,那么这就是一个循环群</p><h2 id="陪集"><a href="#陪集" class="headerlink" title="陪集"></a>陪集</h2><blockquote><p>陪集是指H是群G的子群，对于某一g∈G，{gh|对于所有h∈H}表示H的一个左陪集，记作gH;{hg|对于所有h∈H}表示H的一个右陪集，记作Hg；也译作傍系，旁集等。</p></blockquote><p>注意,陪集不一定是群,它不一定满足群的性质</p><h2 id="拉格朗日定理"><a href="#拉格朗日定理" class="headerlink" title="拉格朗日定理"></a>拉格朗日定理</h2><p>对于群G的子群H,满足$|H|$ <strong>|</strong> $|G|$(G被H整分)<br><del>(不会证)</del></p><h2 id="有限循环群的性质"><a href="#有限循环群的性质" class="headerlink" title="有限循环群的性质"></a>有限循环群的性质</h2><p>$r^{|  &lt; r &gt; |}=1$</p><h1 id="10-初等数论相关定理"><a href="#10-初等数论相关定理" class="headerlink" title="10.初等数论相关定理"></a>10.初等数论相关定理</h1><h2 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h2><h2 id="内容-2"><a href="#内容-2" class="headerlink" title="内容"></a>内容</h2><p>$对于正整数a,b,若(a,b)=1,则有a^{\varphi(n)}\equiv 1\pmod n$</p><h2 id="证明-2"><a href="#证明-2" class="headerlink" title="证明"></a>证明</h2><p>$在模n下设群G$:{$x|(x,n)=1$}<br>$设群a为G的子群$<br>$则a中的元素也和n互质$<br>由于$|&lt;a&gt;|$ | $\varphi(n)$<br>$得\varphi(n)=k\times |&lt;a&gt;|$<br>$由于a^{|&lt;a&gt;|}=1$<br>$乘k次方得 a^{|&lt;a&gt;|\times k}=1$<br>$于是a^{\varphi(n)}=1$<br>$由于这是在模n下的推导,所以放到一般情况有:a^{\varphi(n)}\equiv 1\pmod n$<br>$得证$</p><h2 id="关于欧拉函数"><a href="#关于欧拉函数" class="headerlink" title="关于欧拉函数"></a>关于欧拉函数</h2><p>$欧拉函数的计算:$<br>$对于n,将其唯一分解为 \prod_{i=1}^{n}p_i^{k_i}$<br>$则\varphi(n)=n\times \prod_{i=1}^{n} (1- \frac{1}{p_i})$</p><h2 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h2><h3 id="内容-3"><a href="#内容-3" class="headerlink" title="内容"></a>内容</h3><p>$若p为素数,a不是p的倍数,则a^p\equiv a\pmod p$</p><h3 id="证明-3"><a href="#证明-3" class="headerlink" title="证明"></a>证明</h3><p>(其实可以用欧拉定理证明,但我偏不干~~)<br>$令x=1\times 2\times3\times…..\times(p-1)$<br>$令y=a\times1\times a\times 2\times a\times3\times…..\times a\times(p-1)$<br>$则x=(p-1)!且y=a^{p-1}(p-1)!$</p><p>若是在模p的剩余类下定义x和y,那么有$x= y$<br>即在一般情况下的<br>$x\equiv y\pmod p$<br>$代入x和y:(p-1)!\equiv a^{p-1}\times(p-1)!\pmod p$<br>$根据消去律,由于p是素数,故((p-1)!,p)=1$<br>$于是$<br>$1\equiv a^{p-1}\pmod p$<br>$即a^p\equiv a\pmod p$<br>$证毕$</p><h3 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h3><ul><li>$a^{p-1}\equiv 1\pmod p$</li><li>$a^{p-2}\times a\equiv 1\pmod p(即a^{p-2}是a的逆元)$</li></ul><h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><p><img src="https://img-blog.csdnimg.cn/20190728201144921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><del>(不会证明)</del></p><h1 id="11-相关算法"><a href="#11-相关算法" class="headerlink" title="11.相关算法"></a>11.相关算法</h1><h2 id="BSGS法"><a href="#BSGS法" class="headerlink" title="BSGS法"></a>BSGS法</h2><p><a href="https://www.cnblogs.com/zjp-shadow/p/9267675.html#%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0">另一篇很牛的数论blog</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF初探_密码学笔记</title>
      <link href="/2021/08/19/CTF%E5%88%9D%E6%8E%A2-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/19/CTF%E5%88%9D%E6%8E%A2-%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="C1-导论"><a href="#C1-导论" class="headerlink" title="C1:导论"></a>C1:导论</h1><p>密码学分为以下几个分支:</p><p>密码学(密码编码学)包含:</p><ul><li>密码分析学</li><li>密码使用学</li></ul><p>可以大概理解一下:<br>密码分析学是指破解密码的技巧<br>密码使用学是指制造密码并且用密码进行交流</p><p>两者是互逆的</p><p>其中密码使用学可以分为:</p><ul><li>对称算法:用同一个密匙加密解密</li><li>非对称算法:利用公匙进行加密</li><li>密码协议</li><li>哈希函数</li></ul><p>一般加密的时候都是混在一起加密,取长补短</p><p>对于一个加密体系来说,一般加密和解密算法都会公开,这样才能够说明这个体系经得起检验.如果仅仅是通过保密加密方式来加密的话,一旦加密方式被破解,就…就完辽</p><p>所以,一般来讲,安全传输信息的关键是安全的传递关键数据,比如现在就是安全的传递密匙</p><h2 id="简单对称加密-替换密码"><a href="#简单对称加密-替换密码" class="headerlink" title="简单对称加密:替换密码"></a>简单对称加密:替换密码</h2><h3 id="密码使用"><a href="#密码使用" class="headerlink" title="密码使用"></a>密码使用</h3><p>思路很简单,用一个字母替代另外一个字母,这样文本就乱掉了</p><h3 id="密码分析-破解"><a href="#密码分析-破解" class="headerlink" title="密码分析(破解)"></a>密码分析(破解)</h3><h4 id="方法一-蛮力破解"><a href="#方法一-蛮力破解" class="headerlink" title="方法一 蛮力破解"></a>方法一 蛮力破解</h4><p>很简单,这里的关键信息不就是替换的规则嘛,那就暴力枚举所有可能的替换的规则.如果说能够得到一些些原文和密文的片段,然后就可以这样暴力破解了.</p><p>假设是英文,那就是26个字母相互替换,就可能有$26!$种可能性,一个个尝试嘛,反正是尝试的出来的,只是时间……长了一丢丢(万一运气好勒,第一个就遇到了不是很舒服)</p><h4 id="方法二-频率统计"><a href="#方法二-频率统计" class="headerlink" title="方法二 频率统计"></a>方法二 频率统计</h4><p>但凡英语句子都有一些规律,比如哪些字母出现的频率多哪些频率少,比如哪些单词频繁出现,比如哪些字母后面很可能跟上哪些字母等等</p><p>替换密码并没有避开这些规律,所以可以利用这些规律来进行破解.这更加的高效.</p><h2 id="密码分析概述"><a href="#密码分析概述" class="headerlink" title="密码分析概述"></a>密码分析概述</h2><h3 id="密码分析的几种方式"><a href="#密码分析的几种方式" class="headerlink" title="密码分析的几种方式"></a>密码分析的几种方式</h3><p>密码分析有如下几种方式:</p><ul><li>古典密码分析</li><li>社会工程</li><li>实施攻击</li></ul><p>古典密码分析就是指从密文恢复为明文,包括<strong>数学分析法</strong>和<strong>蛮力法</strong></p><p>社会工程就是通过人际交往等方式来获得密码和关键数据,包括欺骗,绑架勒索,冒名,侦探等方式.</p><p>实施攻击,从书上的意思大概就是说对处理密码的设备进行探测从而分析出密码什么的</p><h3 id="可靠的加密方式是什么样子的"><a href="#可靠的加密方式是什么样子的" class="headerlink" title="可靠的加密方式是什么样子的"></a>可靠的加密方式是什么样子的</h3><p><strong>Kerckhoffs原则:密码系统应该就算被所有人知道系统的运作步骤，仍然是安全的。</strong></p><h3 id="多长的密匙才相对安全"><a href="#多长的密匙才相对安全" class="headerlink" title="多长的密匙才相对安全"></a>多长的密匙才相对安全</h3><p>一般来说,56-64位几个小时(几天),112-128一般计算机要几十年,256就比较困难,量子计算机也需要几十年吧</p><p>不过摩尔定律告诉我们,这个数据不会保持太久</p><h2 id="模运算以及多种古典密码"><a href="#模运算以及多种古典密码" class="headerlink" title="模运算以及多种古典密码"></a>模运算以及多种古典密码</h2><h3 id="模运算"><a href="#模运算" class="headerlink" title="模运算"></a>模运算</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>老相识了:</p><p><strong>其一:</strong></p><p>假设有$a=b\times c+r$,也就是$a\div b=c\dots r$,或者写成$a-r=b\times c$</p><p>那么就可以这样写:$a\equiv r\pmod{b}$,也就是说a和r在b下同余,也可以理解为r为a除以b的余数</p><p><strong>其二:</strong></p><p>求a除以b得到的余数为r,可以表示为$a\bmod b =r$,这里r肯定是在0到b之间的</p><p>这第二种方法也可以转化为第一种:</p><p>$a\bmod b=r$等价于$a\equiv r\pmod b$</p><p>但本质都一样,都是a除以b得到的余数为r</p><h4 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h4><p>发现一个问题:对于同余操作$a\bmod b=r$来说,如果不断增大a,那么r的值会有规律的从0增大到b-1然后再回到0,也就是说,某些不同的数字代入到a中获得的结果是一样的.</p><p>比如$a\bmod 4=b$,$a=1,5,9,13,17…$的时候b都等于1</p><p>同时我们还发现,这些数之间的差都是4,也就是除数.</p><p>因此我们把这些不同的a组成的集合叫做一个等价类,每个等价类里面相邻两个数的差值都是除数.</p><p>在计算固定模数的操作中,这个东西可以带给我们计算上的便利.(都1202年了,就离谱)</p><h4 id="整数环"><a href="#整数环" class="headerlink" title="整数环"></a>整数环</h4><p>这个东西是这么构成的:</p><ul><li>集合Z={0,1,2,3,4,….,m-1}</li><li>两种操作方式:</li></ul><p>$a+b\equiv c\pmod m,c\in Z$<br>$a\times b\equiv c\pmod m,c\in Z$</p><p>它有一些性质:</p><ul><li>加法</li></ul><p>加法逆元存在,也就是说存在$a+(-a)\equiv 0\pmod m$,只是-a不在环里面而已</p><ul><li>乘法</li></ul><p>乘法逆元不一定存在,也即不一定存在$a\times b\equiv 1\pmod m$,其中b为a的乘法逆元</p><p>寻找乘法逆元可以使用欧几里得算法(只是我已经不会了),但如果要判断,则可以使用比较简单的方法:如果$gcd(a,m)=1$,则此时存在$a\times b\equiv 1\pmod m$</p><p>如何证明呢?原来写过关于裴蜀定理的博客,有点搞忘了,贴过来一下:</p><h5 id="裴蜀定理"><a href="#裴蜀定理" class="headerlink" title="裴蜀定理"></a>裴蜀定理</h5><h6 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h6><p>若$d=(a,b)$(注意这里($a,b$)是指a和b的最小公因数的意思)<br>则$\exists m,n$使得 $a\times m+b\times n=d$</p><h6 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h6><p>考虑用数学归纳法证明：</p><p>当$b=0时:$<br>$显然a=d，a可以取任意值，存在m，n满足上式$<br>$当b&gt;0时：$<br>$假设对于x\in [0,b-1],都满足上式，其中a可以取任意值$<br>$首先,显然(a,b)=(b,a\pmod b)=d$<br>$则对于c=a\pmod b，由于c\in[0,b-1]$<br>$故:b\times m+c\times n=d ——(\theta)$<br>$由带余除法得:a=k\times b+c,即c=a-k\times b$<br>$将c代入(\theta)中得b\times m+(a-k\times b)\times n=d$<br>$整理得a\times n+b\times(m-k\times n)=d$<br>$则对于a,b,有m’=n,n’=m-k\times n使得a\times m’+b\times n’=d成立$<br><strong>(这里证得了若对于[0,n]满足上式，则[0,n+1]满足了上式)</strong><br>$故对于任意a，b，d=(a,b),\exists m,n 使得 a\times m+b\times n=d$</p><p>那么这个判断方式的原理就很清楚了:</p><p>首先是如果$a\times x\equiv 1\pmod m$(这里把逆元写作x),则也就意味着$\exists x,y\in Z$使得$ax-my=1$,而这个方程有整数解的条件就是$gcd(a,m)=1$,至于为什么…这不就是裴蜀定理吗</p><h3 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h3><h4 id="凯撒密码-经典的移位密码"><a href="#凯撒密码-经典的移位密码" class="headerlink" title="凯撒密码(经典的移位密码)"></a>凯撒密码(经典的移位密码)</h4><p>假设位移量为k(k就是最关键不能够泄露的参数),明文为x,密码为y,明文和密码都是数字[0,26),和26个字母一一对应.于是:</p><p>加密:$e_k(x)=y\equiv x+k\pmod {26}$<br>解密:$d_k(y)=x\equiv y-k\pmod {26}$</p><p>这个东西破译极为简单,直接枚举k就行,k再大也没啥用,毕竟取了模就循环了</p><h4 id="仿射密码-稍微高级一点点的移位密码"><a href="#仿射密码-稍微高级一点点的移位密码" class="headerlink" title="仿射密码(稍微高级一点点的移位密码)"></a>仿射密码(稍微高级一点点的移位密码)</h4><p>仿射密码的两个参数:a,b,也是不能够泄露的,明文为x,密码为y,明文和密码仍然是数字[0,26),和26个字母一一对应.于是:</p><p>加密:$e_k(x)=y\equiv ax+b\pmod{26}$</p><p>解密:$d_k(y)=x\equiv (y-b)\times a^{-1}\pmod{26}$(这里a的负一次方就是指a在26下的逆元)</p><p>这个时候需要注意,既然需要逆元,那就必须要找得出来,所以根据之前讲的,需要满足$gcd(26,a)=1$</p><p>按照书上的说法,这个时候问题就出来了,因为能够和26互质的26以下的数只有12个…然后b无论怎么取实际上都等价于在26以内取,所以说,所有的可能性只有$26\times 12$种…显然不怎么安全</p><p>但是为什么不能够把a搞得大一点呢?难不成a只能小于26?搞不球懂…反正是上古加密方式,管他的呢</p><h1 id="C2-序列密码"><a href="#C2-序列密码" class="headerlink" title="C2:序列密码"></a>C2:序列密码</h1><p>对称密码分为分组密码和序列密码(好像也有人叫它流密码…不对好像叫流密码的要多一些)</p><p>查了一些资料,大概可以这样区分这两种密码:分组密码是把密码分成块块加密,流密码是把密码一股脑加密</p><h2 id="随机数的生成"><a href="#随机数的生成" class="headerlink" title="随机数的生成"></a>随机数的生成</h2><h3 id="真随机数生成器TRNG"><a href="#真随机数生成器TRNG" class="headerlink" title="真随机数生成器TRNG"></a>真随机数生成器TRNG</h3><p>生成不可复制的真的随机的数,基于物理过程生成</p><h3 id="伪随机数生成器PRNG"><a href="#伪随机数生成器PRNG" class="headerlink" title="伪随机数生成器PRNG"></a>伪随机数生成器PRNG</h3><p>通过一个初始种子,然后递归(或者递推)的得到一串序列,即伪随机数序列,生成方式如下</p><p>$$s_0=seed$$</p><p>$$s_n=f(s_{n-1})$$</p><p>比如,PRNG的一个例子:线性同余生成器(LCG),就像这个样子:</p><p>$$s_0=seed$$</p><p>$$s_n=as_{n-1}+b\pmod m $$</p><p>当然还有一个例子是梅森旋转算法(Mersenne Twister),由日本科学家 Makoto Matsumoto（松本真）和 Takuji Nishimura（西村拓士）在 1997 年开发,似乎是目前最有效的PRNG算法.至于怎么搞的我也不懂,毕竟没学过线代</p><p>从安全角度考虑,这显然是不足够的,虽然说这种随机数一般在统计属性上和真的随机数基本一样,但是似乎只需要知道一部分的$s_i$就可以反推出函数,然后反推出种子,然后就可以通过计算预测接下来的数是什么…而且这种东西可能还有周期,就连梅森旋转算法都有…所以这种随机数用于一般的用途就还行,用于对安全性要求高的,就显然不行</p><h3 id="加密安全的伪随机数生成器CSPRNG"><a href="#加密安全的伪随机数生成器CSPRNG" class="headerlink" title="加密安全的伪随机数生成器CSPRNG"></a>加密安全的伪随机数生成器CSPRNG</h3><p>这算得上是加强版的PRNG,有这样一个性质:<strong>就算知道一部分密匙序列,也没办法得到后续位</strong></p><h4 id="关于CSPRNG实现的一些思考"><a href="#关于CSPRNG实现的一些思考" class="headerlink" title="关于CSPRNG实现的一些思考"></a>关于CSPRNG实现的一些思考</h4><p>百度了一下,是这样的:CSPRNG考虑使用了单向散列函数,再加上从真随机源获取了不断变化的种子,从而做到了这一点.</p><p><strong>其一是单项散列函数</strong></p><p>单项散列函数其实就是哈希(hash)函数,baidu上是这样讲的:</p><blockquote><p>Hash是作用于一任意长度的消息M，返回一固定长度的散列值h:h=H(m)。其中h的长度为m。Hash函数主要用于封装或者数字签名的过程当中，它必须具有如下几个性质:</p><p>1.给定h，根据H(M)=h计算M在计算上是不可行的;</p><p>2.给定M，要找到另一消息M’。并满足H(m)=H(m’)在计算上是不可行的。</p></blockquote><p>hash的时候其实可以理解为为消息m创建了一个指纹,如果需要验证m是否被修改了,就可以再次H(m),对比一下两次的hash值</p><p>而拿上面的线性同余生成器来讲,那就是在生成了密匙之后再加一个hash函数.但是…有什么用啊?还是有点迷…难道是同余得到seed之后只发送hash种子过后的散列值,然后让对方也生成种子的散列值,然后对比?这样倒是可以避免被倒推.</p><p><strong>其二是随机源</strong></p><p>据说CPU里面专门搞了一块来生成随机数.通过侦测电脑的各种突发事件的各种参数来获得随机数,比如电压的变化,IO操作的时间变化等等.感觉挺随机的哈.</p><p>应该是说,CSPRNG不会太高频率的读取seed,不然效率太低了吧哈哈</p><h2 id="序列密码的加密和解密"><a href="#序列密码的加密和解密" class="headerlink" title="序列密码的加密和解密"></a>序列密码的加密和解密</h2><p>这里使用模2运算:$x_i$为明文第i位,$y_i$为密文第i位,$s_i$为密匙第i位,明文,密文,密匙,都转化为01字符串,则加密解密方式如下,正确性可自行推导:</p><p>$$e_{s_i}(x_i)\equiv x_i+s_i \pmod 2$$</p><p>$$d_{s_i}(x_i)\equiv y_i+s_i\pmod 2$$</p><p>其实这个东西,和异或XOR是一个样的:相异为1,相同为0.而异或显然是一个非常舒服的加密函数,因为假设密匙的值是随机的话(0,1等概率出现),那么密文中0,1也是等概率的,真好</p><p>但是密匙怎么搞呢?一般使用随机数来搞.</p><h3 id="无条件安全与一次一密-OTP"><a href="#无条件安全与一次一密-OTP" class="headerlink" title="无条件安全与一次一密(OTP)"></a>无条件安全与一次一密(OTP)</h3><p>如何定义一个完美的密匙呢?看看无条件安全的定义:</p><blockquote><p>如果一个密码体制在无限计算资源的情况下也不能被破译,则说明它是无条件安全的,也可以叫做信息理论上安全的</p></blockquote><p>那么按照这个过于理想化的定义,如何构建一个无条件安全的密码呢?那就是一次一密(OTP)</p><blockquote><p>一个OTP的密码需要满足如下条件:</p><p>1.通过TRNG生成密匙序列s</p><p>2.只有合法的通信方才知道密匙序列</p><p>3.每个密匙序列位$s_i$只用一次</p></blockquote><p>这个东西为什么是安全的呢?就算被拿到了密文y,但是对于明文x和密匙s来说,这三者之间每一位都有如下的关系:</p><p>$$y_i\equiv x_i+s_i\pmod2$$</p><p>知道了y,还有s和x两个未知数,根本没法求好吧(s只有合法的双方才知道),因为就算算力是无穷大的,但这个求解空间也是无穷大的</p><p>但这种方法显然非常难以实现…第一个还好说,第二个…如果A给B传信息,A有密匙B没有,然后A找一个可靠的方式传给B密匙…为啥不直接传内容算了…第三个也是,难不成传一个G的文件也要一个G的密匙?算了吧…</p><h3 id="实际的序列密码的操作方式"><a href="#实际的序列密码的操作方式" class="headerlink" title="实际的序列密码的操作方式"></a>实际的序列密码的操作方式</h3><p>实际一点的序列密码,就是用一个短一点密匙发给双方当做种子,然后在密匙产生器里面搞一波产生非常长的密匙,然后在进行传输什么的</p><h4 id="利用PRNG构建密码流"><a href="#利用PRNG构建密码流" class="headerlink" title="利用PRNG构建密码流"></a>利用PRNG构建密码流</h4><p>比如吧,可以这样弄:</p><p>先生成密匙</p><p>$$S_0=seed$$</p><p>$$S_{i+1}\equiv AS_i+B\pmod m$$</p><p>这里的m假设为100位长,$S_i,A,B\in${$0,1,2…m-1$}公开的参数有m,私密的参数有A,B,种子</p><p>然后加密是:</p><p>$$y_i\equiv x_i+s_i\pmod 2$$</p><p>然后…在知道部分明文的前提下这个加密就可以轻易被搞掉…</p><p>假设有人知道了明文的前300位,则可以$s_i\equiv y_i+x_i\pmod 2$来得到密匙序列的前300位</p><p>然后,复原了部分密匙,再加上密文本来就是已知的,那么显然就可以列出方程组来解出参数A,B的值,从而破解出密匙了</p><h4 id="利用CSPRNG构建密码流"><a href="#利用CSPRNG构建密码流" class="headerlink" title="利用CSPRNG构建密码流"></a>利用CSPRNG构建密码流</h4><p>之前的方法被破解掉就是因为PRNG可以推导,而PRNG的生成又是公开的.因此使用CSPRNG就可以解决这个问题了,因为CSPRNG生成的密匙是不可以倒推的</p><p>当然,为了双方拿到了简短密匙后通过密匙生成器生成的密匙是一样的,这里的CSPRNG必须是伪随机数生成器,否则双方不可能生成一样的密匙</p><p>(其实我一直疑惑…既然简短密匙都可以安全的到达双方手中了,为什么不把要传输的东西也传过去算了,何必加密呢…难道是因为要传输的东西太大?)</p><p>(哦哦好吧反应过来了…应该是只需要安全的交换一次密匙,之后就一直用这个密匙加密就ok)</p><h4 id="基于移位寄存器-LFSR-生成密码流"><a href="#基于移位寄存器-LFSR-生成密码流" class="headerlink" title="基于移位寄存器(LFSR)生成密码流"></a>基于移位寄存器(LFSR)生成密码流</h4><p>移位寄存器可以得到长的伪随机序列,书中讲了线性反馈移位寄存器</p><p>然鹅我感觉有点看不球懂..应该是缺了点什么知识.先跳过吧</p><h1 id="数据加密标准-DES-和替换算法"><a href="#数据加密标准-DES-和替换算法" class="headerlink" title="数据加密标准(DES)和替换算法"></a>数据加密标准(DES)和替换算法</h1><h1 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h1><h2 id="CrypTool"><a href="#CrypTool" class="headerlink" title="CrypTool"></a>CrypTool</h2><h3 id="词频分析"><a href="#词频分析" class="headerlink" title="词频分析"></a>词频分析</h3><p>第一道练习题:移位密码的词频分析和解密中</p><p><img src="https://img-blog.csdnimg.cn/188e4b25003d4448b817337022d1563e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>文本:</p><blockquote><p>Irvmnir bpr sumvbwvr jx bpr lmiwv yjeryrkbi jx qmbm wibpr xjvni mkd ymibrut jx irhx wi bpr riirkvr jx ymbinlmtmipw utn qmumbr dj w ipmhh but bj rhnvwdmbr bpr yjeryrkbi jx bpr qmbm mvvjudwko bj yt wkbrusurbmbwjk 1mird jk xjubt trmui<br>jx ibndt Wb wi kjb mk rmit bmiq bj rashmwk rmvp yjeryrkb mkd wbi iwokwxwvmkvr mkd ijyr ynib urymwk nkrashmwkrd bj ower m vjyshrbr rashmkmbwjk jkr cjnhd pmer bj lr fnmhwxwrd mkd wkiswurd bj invp mk rabrkb bpmb pr vjnhd urmvp bpr ibmbr jx<br>rkhwopbrkrd ywkd vmsmlhr jx urvjokwgwko ijnkdhrii ijnkd mkd ipmsrhrii ipmsr w dj kjb drry ytirhx bpr xwkmh mnbpjuwbt 1nb yt rasruwrkvr cwbp qmbm pmi hrxb kj djnlb bpmb bpr xjhhjcwko wi bpr sujsru msshwvmbwjk mkd wkbrusurbmbwjk w jxxru yt bprjuwri wk bpr pjsr bpmb bpr riirkvr jx jqwkmcmk qmumbr cwhh urymwk wkbmvb</p></blockquote><p>分析结果:</p><p><img src="https://img-blog.csdnimg.cn/7da6a6190bf245e5827f152aee3d2f0d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="基于词频分析的破解"><a href="#基于词频分析的破解" class="headerlink" title="基于词频分析的破解"></a>基于词频分析的破解</h4><p><img src="https://img-blog.csdnimg.cn/71285677ad684950a4d8401baa569f03.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>选择第一种模式,根据词频分析</p><p><img src="https://img-blog.csdnimg.cn/7848336176bc41c8b19dc3486d7bc9d1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>得到结果如下</p><p><img src="https://img-blog.csdnimg.cn/08d3e456c0e44f8283d5dc2787fb6cc9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>也可以手动调节,方法就是点下面的Manual analysis</p><p>然后…发现原文出锅了…我TM…好家伙…怪说不得怎么都读不懂</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重拾python(进阶篇)</title>
      <link href="/2021/08/08/%E9%87%8D%E6%8B%BEpython-%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
      <url>/2021/08/08/%E9%87%8D%E6%8B%BEpython-%E8%BF%9B%E9%98%B6%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="GUI设计"><a href="#GUI设计" class="headerlink" title="GUI设计"></a>GUI设计</h1><p>原来一直都只会打黑框框,感觉自己太菜了,因此要学点这个才行</p><h2 id="tkinter"><a href="#tkinter" class="headerlink" title="tkinter"></a>tkinter</h2><p><a href="https://blog.csdn.net/qq_38970783/category_9287654.html">找到一个dalao写的非常详细的教程,先贴在这里</a></p><p>这个库是python自带的图形界面库,不用额外下载</p><p><code>import tkinter</code>即可引入</p><p>其中的一些元件用法如下</p><h3 id="根窗口"><a href="#根窗口" class="headerlink" title="根窗口"></a>根窗口</h3><p>就是整个程序显示的窗口</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">root<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#这里就把根窗口创建并且赋值给了root变量</span>root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'XXX'</span><span class="token punctuation">)</span><span class="token comment">#定义窗口的名字,在窗口左上角显示</span>root<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"500x400"</span><span class="token punctuation">)</span><span class="token comment">#定义窗口大小,注意其中的''x''是小写的字母不是''*''</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#这个函数就可以让根窗口显示了,具体是个什么意思我不是特别清楚</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>可以显示字符,但是不能够修改</p><p>标签的定义:<code>l=tkinter.Label(root,text=,font=,width=,height=,bg=,fg=)</code></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">Label<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'XX'</span><span class="token punctuation">,</span>bg<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Arial'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">#定义一个标签,显示在root上,内容为XX,背景色为Blue,前景色Wiewhite,字体为Arial,字体大小为12,标签宽度为30,高度为5</span>Label<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#在root上显示标签(这一句不打不行)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一般来讲,一个元件的参数构成可以这样简化:<code>Yuanjian(position,options)</code>,其中position就是元件的母容器,说白了就是元件放在哪里,options就是剩下的参数,规定元件的各个细节</p><p>tkinter里面这些元件用来规定细节的参数很多,了解详细用法可以参见互联网上一些比较好的说明</p><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>按下按钮可以触发相应的函数事件(当然也可以不触发,但…有意思吗哈哈)</p><p>按钮的定义:<code>B=tkinter.Button(Root,text=,font=(,),width=,height=,command=)</code></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment">#这里尝试写一个按下按钮就生成随机数的小程序</span>var<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#先定义一个tkinter里面的字符变量用来放要显示的结果</span><span class="token keyword">def</span> <span class="token function">ReturnRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#这里设计一个函数,用来生成随机数</span>      res<span class="token operator">=</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token comment">#生成随机数</span>      var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">"&#123;0&#125;"</span><span class="token punctuation">.</span>fotmat<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#把随机数放到var变量里面的语句就这样写了,也就是调用var的set函数</span>Button<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'XX'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Arial'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>command<span class="token operator">=</span>ReturnRandom<span class="token punctuation">)</span><span class="token comment">#定义一个Button,参数意思和标签一致,只是command参数不一样.command参数用来指定按下按钮触发的函数,这里是ReturnRandom,注意这里不要在后面加括号</span><span class="token comment">#注意按钮需要的函数一定要写在按钮前面,不然药丸</span>Button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#把Button放到root上面去</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><p>可以输入一些东西并且让程序拿到,输入的时候可以把输入的内容按照明文或者暗文显示</p><p>输入框的定义:<code>e=tkinter.Entry(root,show=)</code></p><p>其中<code>show</code>参数如果跟<code>None</code>就显示为明文,如果跟<code>*</code>就为暗文</p><p>输入框内容的获取:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">var<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#定义一个变量来存</span>e<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>root<span class="token punctuation">,</span>show<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token comment">#定义输入框</span>var<span class="token operator">=</span>e<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#获取e中的文本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h3><p>可以显示多行文本,其实感觉除这个以外和标签没啥区别</p><p><a href="https://www.runoob.com/python/python-tkinter-entry.html">详细的具体操作可以看这里</a></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>就是一列选项可以用来选择</p><p>列表定义:<code>lb=tkinter.Listbox(window,listvariable=)</code>,用listvariable给列表赋值</p><p>也可以这样赋值:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">lb<span class="token operator">=</span>tk<span class="token punctuation">.</span>Listbox<span class="token punctuation">(</span>window<span class="token punctuation">)</span>listItems<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> listItems<span class="token punctuation">:</span>      lb<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token comment">#用循环把值赋给lb这个列表</span>lb<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#删除第零个位置的字符</span>lb<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#放上列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单选按钮-radiobutton"><a href="#单选按钮-radiobutton" class="headerlink" title="单选按钮(radiobutton)"></a>单选按钮(radiobutton)</h3><p>可以显示一堆选项然后选一个</p><p>定义:<code>r1 = tk.Radiobutton(window, text=&#39;&#39;, variable=, value=&#39;&#39;, command=)</code></p><p>其中,<code>value</code>选项是显示在按钮上的字符</p><h3 id="多选按钮-checkbutton"><a href="#多选按钮-checkbutton" class="headerlink" title="多选按钮(checkbutton)"></a>多选按钮(checkbutton)</h3><p>每一个checkbutton都可以选或不选,这样下来用一组checkbutton就可以达到多选的目的了</p><p>定义:<code>c = Checkbutton(root, text=&quot;我爱GXY&quot;, variable=)</code></p><h3 id="尺度滑条-scale"><a href="#尺度滑条-scale" class="headerlink" title="尺度滑条(scale)"></a>尺度滑条(scale)</h3><p>感觉没谁用到这个…但还是提一下</p><p>可以通过滑动滑块来选择值</p><p>定义:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># 创建一个尺度滑条，长度200字符，从0开始10结束，以2为刻度，精度为0.01，触发调用print_selection函数</span>s <span class="token operator">=</span> tk<span class="token punctuation">.</span>Scale<span class="token punctuation">(</span>window<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'try me'</span><span class="token punctuation">,</span> from_<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> to<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> orient<span class="token operator">=</span>tk<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> showvalue<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> tickinterval<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>             resolution<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> command<span class="token operator">=</span>print_selection<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="画板"><a href="#画板" class="headerlink" title="画板"></a>画板</h3><p>顾名思义,画画的板子</p><p><strong>定义</strong>:<code>canvas=tk.Canvas(root,bg=,height=,width=)</code></p><p><strong>加入图片</strong>:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">image_<span class="token operator">=</span>tkinter<span class="token punctuation">.</span>PhotoImage<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment">#path那里输入文件的位置,可以输入相对路径,前提是图片和.py文件在同一文件夹下,否则就输入绝对路径,这里用image_把图片搞进来</span>Image_<span class="token operator">=</span>canvas<span class="token punctuation">.</span>create_image<span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>anchor<span class="token operator">=</span><span class="token string">'n'</span><span class="token punctuation">,</span>image<span class="token operator">=</span>image_<span class="token punctuation">)</span><span class="token comment">#将图片放到画布上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里第二句中的<a href="https://devinnest.blog.csdn.net/article/details/88892657anchor">参数用于图片锚定点,前面两个数字用于定位坐标,image参数用于引入图片</a></p><p><strong>画各种奇怪的东西</strong>:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span>line <span class="token operator">=</span> canvas<span class="token punctuation">.</span>create_line<span class="token punctuation">(</span>x0 <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">,</span> y0 <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">,</span> x1 <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">,</span> y1 <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment"># 画直线</span>oval <span class="token operator">=</span> canvas<span class="token punctuation">.</span>create_oval<span class="token punctuation">(</span>x0 <span class="token operator">+</span> <span class="token number">120</span><span class="token punctuation">,</span> y0 <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">,</span> x1 <span class="token operator">+</span> <span class="token number">120</span><span class="token punctuation">,</span> y1 <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token string">'yellow'</span><span class="token punctuation">)</span>  <span class="token comment"># 画圆 用黄色填充</span>arc <span class="token operator">=</span> canvas<span class="token punctuation">.</span>create_arc<span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0 <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1 <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> extent<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">)</span>  <span class="token comment"># 画扇形 从0度打开收到180度结束</span>rect <span class="token operator">=</span> canvas<span class="token punctuation">.</span>create_rectangle<span class="token punctuation">(</span><span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">330</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 画矩形正方形</span>canvas<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>移动画布中的元素</strong>:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># 写个函数，用来一定指定图形</span><span class="token keyword">def</span> <span class="token function">moveit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    canvas<span class="token punctuation">.</span>move<span class="token punctuation">(</span>rect<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 移动正方形rect（也可以改成其他图形名字用以移动图形、元素），按每次（x=2, y=2）步长进行移动</span><span class="token comment"># 定义一个按钮用来移动指定图形的在画布上的位置</span>b <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'move item'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>moveit<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><p>顾名思义,不说了</p><p><strong>定义:</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment">#创建一个总的菜单栏，这里可以把他理解成一个容器，用来装其他东西的,在窗口的上方</span><span class="token comment">#这个菜单的母容器是window,也就是根窗口</span>menubar <span class="token operator">=</span> tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>window<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>菜单里面嵌菜单和命令:</strong></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">filemenu <span class="token operator">=</span> tk<span class="token punctuation">.</span>Menu<span class="token punctuation">(</span>menubar<span class="token punctuation">,</span> tearoff<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 将上面定义的空菜单命名为File，放在菜单栏中，就是装入上面那个menubar容器中</span>menubar<span class="token punctuation">.</span>add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'File'</span><span class="token punctuation">,</span> menu<span class="token operator">=</span>filemenu<span class="token punctuation">)</span><span class="token comment"># 在File中加入New、Open、Save等小菜单，即我们平时看到的下拉菜单，每一个小菜单可以对应命令操作。</span>filemenu<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'New'</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token punctuation">)</span>filemenu<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Open'</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token punctuation">)</span>filemenu<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Save'</span><span class="token punctuation">,</span> command<span class="token operator">=</span><span class="token punctuation">)</span>filemenu<span class="token punctuation">.</span>add_separator<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 添加一条分隔线</span>filemenu<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Exit'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>window<span class="token punctuation">.</span>quit<span class="token punctuation">)</span>  <span class="token comment"># 用tkinter里面自带的quit()函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="框架-frame"><a href="#框架-frame" class="headerlink" title="框架(frame)"></a>框架(frame)</h3><p>我理解的就是划出来的一块区域</p><p>可以这样创建的:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment">#创建一个主frame，长在主window窗口上</span>frame <span class="token operator">=</span> tk<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>window<span class="token punctuation">)</span>frame<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建第二层框架frame，长在主框架frame上面</span>frame_l <span class="token operator">=</span> tk<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>  <span class="token comment"># 第二层frame，左frame，长在主frame上</span>frame_r <span class="token operator">=</span> tk<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>  <span class="token comment"># 第二层frame，右frame，长在主frame上</span>frame_l<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>frame_r<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span><span class="token comment"># 创建三组标签，为第二层frame上面的内容，分为左区域和右区域，用不同颜色标识</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frame_l<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'on the frame_l1'</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frame_l<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'on the frame_l2'</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frame_l<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'on the frame_l3'</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frame_r<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'on the frame_r1'</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frame_r<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'on the frame_r2'</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frame_r<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'on the frame_r3'</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一层套一层的,可以可以</p><h3 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h3><p>用来提示的,最好还是不要乱搞</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Hi'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'你好！'</span><span class="token punctuation">)</span>  <span class="token comment"># 提示信息对话窗</span>tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showwarning<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Hi'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'有警告！'</span><span class="token punctuation">)</span>       <span class="token comment"># 提出警告对话窗</span>tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>showerror<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Hi'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'出错了！'</span><span class="token punctuation">)</span>         <span class="token comment"># 提出错误对话窗</span><span class="token keyword">print</span><span class="token punctuation">(</span>tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askquestion<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Hi'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'你好！'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 询问选择对话窗return 'yes', 'no'</span><span class="token keyword">print</span><span class="token punctuation">(</span>tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askyesno<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Hi'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'你好！'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># return 'True', 'False'</span><span class="token keyword">print</span><span class="token punctuation">(</span>tkinter<span class="token punctuation">.</span>messagebox<span class="token punctuation">.</span>askokcancel<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'Hi'</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'你好！'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># return 'True', 'False'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于tinker如何合理布局等,无力再写下去了2333</p><p>互联网是个好东西啊</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重拾python(基础篇)</title>
      <link href="/2021/07/14/%E9%87%8D%E6%8B%BEpython-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2021/07/14/%E9%87%8D%E6%8B%BEpython-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Python特性"><a href="#Python特性" class="headerlink" title="Python特性"></a>Python特性</h1><ul><li>跨平台的程序设计语言</li><li>解释性语言，不编译</li><li>交互式语言，可直接执行代码</li><li>面向对象语言</li></ul><blockquote><p>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了；</p></blockquote><blockquote><p>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。</p></blockquote><blockquote><p>面向过程：<br>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、 Linux/Unix等一般采用面向过程开发，性能是最重要的因素。<br>缺点：没有面向对象易维护、易复用、易扩展</p></blockquote><blockquote><p>面向对象：<br>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护<br>缺点：性能比面向过程低</p></blockquote><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>淦哦，py3.9居然在Windows7上面跑不了</p><h2 id="python自带文件说明"><a href="#python自带文件说明" class="headerlink" title="python自带文件说明"></a>python自带文件说明</h2><ul><li>IDLE：自带的简单开发环境</li><li>Python：交互式命令行程序</li><li>manuals：官方技术文档</li><li>module docs：已安装的模块文档</li></ul><p>要写代码在IDLE里面写就行了</p><h2 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h2><p>一个更好的IDE，去官网下来用就行，感觉社区版的应该够用</p><p>具体操作细节属于肌肉记忆，所以不细讲</p><h1 id="函数，转义字符等基础"><a href="#函数，转义字符等基础" class="headerlink" title="函数，转义字符等基础"></a>函数，转义字符等基础</h1><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><p>在黑框框里面输出一些东西</p><ul><li>加上<code>type(X)</code>可输出变量X的类型</li><li>加上<code>id(X)</code>可输出变量X的地址</li></ul><h2 id="open"><a href="#open" class="headerlink" title="open"></a>open</h2><p>向文件里面输出一些东西，可和print一起乱用，返回一个指针</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fp<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'location'</span><span class="token punctuation">,</span><span class="token string">'mode'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>XX<span class="token punctuation">,</span><span class="token builtin">file</span><span class="token operator">=</span>fp<span class="token punctuation">)</span>fp<span class="token punctuation">.</span>close<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中的mode有：<a href="https://www.runoob.com/python/python-func-open.html">见链接</a></p><h2 id="input函数"><a href="#input函数" class="headerlink" title="input函数"></a>input函数</h2><p>输入函数，可以给提示语，比c方便多了</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>顾名思义，详细<a href="https://www.runoob.com/python/python-operators.html">见链接</a></p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p><a href="https://www.cnblogs.com/luckyplj/p/9792658.html">见链接</a></p><h2 id="ASCII，Unicode"><a href="#ASCII，Unicode" class="headerlink" title="ASCII，Unicode"></a>ASCII，Unicode</h2><p>就是一张表，把01和字母联系起来</p><p>Unicode是在ASCII之后的东西了，可以表示几乎全世界的字符，记得我写博客的时候都需要把那个TXT文件按照UTF-8来表示想必就是这个原因了</p><h2 id="标识符和保留字"><a href="#标识符和保留字" class="headerlink" title="标识符和保留字"></a>标识符和保留字</h2><p>保留字其实就是一些在py中有特殊含义的字符，不能够乱用，比如显然不能够用def来命名一个变量啥的</p><p>标识符就是你自己给变量的名字，严格区分大小写（都是这样的）</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量是啥"><a href="#变量是啥" class="headerlink" title="变量是啥"></a>变量是啥</h3><p>放东西的东西…</p><p>（<del>我也不知道怎么解释，这太基础了</del>）</p><p>不过python里面有个东西很舒服，就是变量不需要定义类型，它接到啥东西就是什么类型，比c爽多了</p><h3 id="变量的组成"><a href="#变量的组成" class="headerlink" title="变量的组成"></a>变量的组成</h3><p>变量由三个东西组成：</p><ul><li>id：变量的内存地址</li><li>type：变量的类型</li><li>value：变量里面存的东西</li></ul><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>用等号就是赋值</p><p>可以多次重复赋值（好像是很显然的）</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="int：整数"><a href="#int：整数" class="headerlink" title="int：整数"></a>int：整数</h3><ul><li>十进制：默认的那种</li><li>二进制：在十进制前面加上0b来转义</li><li>八进制：在十进制前面加上0o来转义</li><li>十六进制：在十进制前面加上0x来转义</li></ul><h3 id="float：浮点数"><a href="#float：浮点数" class="headerlink" title="float：浮点数"></a>float：浮点数</h3><p>解决浮点数不精确的方法：</p><p>引入一个模块如下：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用的时候：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'1.1'</span><span class="token punctuation">)</span><span class="token operator">+</span>Decimal<span class="token punctuation">(</span><span class="token string">'2.2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="bool：布尔类型"><a href="#bool：布尔类型" class="headerlink" title="bool：布尔类型"></a>bool：布尔类型</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py">false<span class="token operator">=</span><span class="token number">0</span>true<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>bool可转为int，所以不要管那么多</p><h3 id="str：字符串类型"><a href="#str：字符串类型" class="headerlink" title="str：字符串类型"></a>str：字符串类型</h3><p>用单双引号的字符串必须在一行</p><p>三引号的可以分布在连续的多行</p><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p><code>str(X)</code>:把X转成字符串类型<br><code>int(X)</code>:把X转成整数类型<br><code>float(X)</code>:把X转成浮点数类型</p><p>但不要乱转，有些是转不了的</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>用<code>#</code>单行注释，<code>&quot;&quot;&quot;</code>来搞多行注释</p><p>在开头可规定编码声明：</p><p><code># coding:gbk</code>(ascii)<br><code># coding:utf-8</code>(Unicode)</p><h1 id="程序的组织结构控制"><a href="#程序的组织结构控制" class="headerlink" title="程序的组织结构控制"></a>程序的组织结构控制</h1><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><h3 id="if，elif，else"><a href="#if，elif，else" class="headerlink" title="if，elif，else"></a>if，elif，else</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">if</span> XXX<span class="token punctuation">:</span>Do something<span class="token keyword">elif</span> XXXXDo something<span class="token keyword">elif</span> XXXXDo something<span class="token keyword">else</span>DO something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">if</span> XXX<span class="token punctuation">:</span>Return something A<span class="token keyword">else</span>Return something B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">Return something A <span class="token keyword">if</span> XXX <span class="token keyword">else</span> Return something B<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其实就和cpp里面问号表达式一样：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>XXX<span class="token operator">?</span><span class="token punctuation">(</span>Return something A<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>Return something B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><del>感觉cpp里面的装逼要厉害些哈哈哈</del></p><h2 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h2><p>占位置，用在需要写但还不知道写啥的时候</p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>生成一个整数序列[start,stop)，且每两个数之间差为step</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>stop<span class="token punctuation">,</span>step<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以用如下方式来看序列里面有没有某一个数：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">r<span class="token operator">=</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">in</span> r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">>></span><span class="token boolean">True</span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">>></span>false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>当型语句，当满足while后面的条件后继续循环内的语句</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">while</span> XXX<span class="token punctuation">:</span>do XXXXX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="for-in循环（遍历）"><a href="#for-in循环（遍历）" class="headerlink" title="for in循环（遍历）"></a>for in循环（遍历）</h3><p>字符串和序列（range）是可迭代变量</p><p>for循环的语法如下：</p><h4 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h4><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">for</span> s <span class="token keyword">in</span> <span class="token string">"international"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>international<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是一个一个字母的拿出来然后赋值给s变量</p><h4 id="遍历序列"><a href="#遍历序列" class="headerlink" title="遍历序列"></a>遍历序列</h4><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">for</span> s <span class="token keyword">in</span> <span class="token builtin">range</span>（<span class="token number">10</span>）<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是一个一个值拿出来然后赋值给s变量</p><h4 id="没有变量的无灵魂遍历"><a href="#没有变量的无灵魂遍历" class="headerlink" title="没有变量的无灵魂遍历"></a>没有变量的无灵魂遍历</h4><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span>（<span class="token number">10</span>）<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hiahiahiahiahiahiahia\n"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span>hiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahiahia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>就是从循环中强制退出的语句</p><p>只要运行到这一句那就退出当前的循环喽</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>只要运行到这一句就不管后面的代码直接从循环头头开始重新走一遍</p><h3 id="else"><a href="#else" class="headerlink" title="else"></a>else</h3><p>else不仅仅可以和if一起用，还可以和while，for一起用</p><p>只是我感觉好像else和while，for一起用很奇怪，可能是我cpp打多了吧</p><h1 id="简单数据结构"><a href="#简单数据结构" class="headerlink" title="简单数据结构"></a>简单数据结构</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>其实就是c++里面的数组，里面可以一个个的存东西</p><p><del>（感觉说了一堆废话）</del></p><p>不过python里面的列表可以存不同类型的数据，和c++里面的数组只能够存数字或字符串有很大的区别，py果然优秀一些</p><p>并且这个列表不用管空间，有数据就放就行，不会想C++一样因为手残空间开小了导致数据溢出然后暴掉，就很舒服</p><h3 id="列表基本定义和操作"><a href="#列表基本定义和操作" class="headerlink" title="列表基本定义和操作"></a>列表基本定义和操作</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py">liebiao<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">]</span>liebiao2<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>liebiao<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>liebiao2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>liebiao<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>liebiao<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">]</span>world<span class="token number">98</span><span class="token number">1</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表查询元素索引操作"><a href="#列表查询元素索引操作" class="headerlink" title="列表查询元素索引操作"></a>列表查询元素索引操作</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py">liebiao2<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>liebiao2<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>liebiao2<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表切片操作"><a href="#列表切片操作" class="headerlink" title="列表切片操作"></a>列表切片操作</h3><p><code>liebiao_name[start:stop:step]</code>,区间[start,stop),步长为step</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">liebiao<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token string">'ee'</span><span class="token punctuation">,</span><span class="token string">'iede'</span><span class="token punctuation">,</span><span class="token string">'hiahia'</span><span class="token punctuation">,</span><span class="token number">520</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>liebiao<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>liebiao<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'ee'</span><span class="token punctuation">,</span> <span class="token string">'hiahia'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">520</span><span class="token punctuation">,</span> <span class="token string">'iede'</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表元素存在与否判断"><a href="#列表元素存在与否判断" class="headerlink" title="列表元素存在与否判断"></a>列表元素存在与否判断</h3><p>用<code>in</code>，<code>not in</code>来判断</p><h3 id="列表元素迭代"><a href="#列表元素迭代" class="headerlink" title="列表元素迭代"></a>列表元素迭代</h3><p><code>for var_name in list_name:</code>即可</p><h3 id="列表元素的增加操作"><a href="#列表元素的增加操作" class="headerlink" title="列表元素的增加操作"></a>列表元素的增加操作</h3><p><code>list_name.append(A)</code>：在列表list_name末尾加一个元素A，很鸡肋的事情就是，如果A是一个列表，那么就会出现列表里面嵌套列表的情况，很活络但是不知道好不好</p><p><code>list_name.extend(A)</code>：在列表list_name末尾至少添加一个元素A，这个时候如果A是一个列表，就会把两个列表合并，把A怼在list_name后面</p><p><code>list_name.insert(pos,A)</code>：在列表的位置pos添加一个元素A</p><p>好像切片可以随便插入很多元素:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">liebiao<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token string">'ee'</span><span class="token punctuation">,</span><span class="token string">'iede'</span><span class="token punctuation">,</span><span class="token string">'hiahia'</span><span class="token punctuation">,</span><span class="token number">520</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>liebiao<span class="token punctuation">)</span>liebiao<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'lueluelue'</span><span class="token punctuation">,</span><span class="token string">'abababa'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>liebiao<span class="token punctuation">)</span>liebiao<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'250'</span><span class="token punctuation">,</span><span class="token string">'520'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>liebiao<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">'ee'</span><span class="token punctuation">,</span> <span class="token string">'iede'</span><span class="token punctuation">,</span> <span class="token string">'hiahia'</span><span class="token punctuation">,</span> <span class="token number">520</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'lueluelue'</span><span class="token punctuation">,</span> <span class="token string">'abababa'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">'ee'</span><span class="token punctuation">,</span> <span class="token string">'iede'</span><span class="token punctuation">,</span> <span class="token string">'hiahia'</span><span class="token punctuation">,</span> <span class="token number">520</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'lueluelue'</span><span class="token punctuation">,</span> <span class="token string">'250'</span><span class="token punctuation">,</span> <span class="token string">'520'</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token string">'ee'</span><span class="token punctuation">,</span> <span class="token string">'iede'</span><span class="token punctuation">,</span> <span class="token string">'hiahia'</span><span class="token punctuation">,</span> <span class="token number">520</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表元素的删除操作"><a href="#列表元素的删除操作" class="headerlink" title="列表元素的删除操作"></a>列表元素的删除操作</h3><p><code>list_name.remove(A)</code>把第一个A从列表中删掉</p><p><code>list_name.pop(pos)</code>把位置为pos的元素从列表中删掉，如果pos没有定义，就删除最后一个元素</p><p>当然切片也可以大量的删除元素，如果想要把切后的元素直接赋给原列表，可以：</p><p><code>list_name[start,stop,step]=[]</code></p><p><code>list_name.clear()</code>清空列表中的所有元素</p><p><code>del list_name</code>把列表整个删了</p><h3 id="列表元素的修改操作"><a href="#列表元素的修改操作" class="headerlink" title="列表元素的修改操作"></a>列表元素的修改操作</h3><p>直接赋值可以<code>list_name[X]=A</code></p><p>也可以切片，见上<strong>列表元素增加操作</strong></p><h3 id="列表的排序操作"><a href="#列表的排序操作" class="headerlink" title="列表的排序操作"></a>列表的排序操作</h3><p>太舒服了，直接快排，想起了当年用cpp手写快排的时光…</p><p><code>list_name.sort(reverse=False)</code>升序排序，默认</p><p><code>list_name.sort(reverse=True)</code>降序排序</p><p>或者可以用内置函数来产生一个列表对象</p><p><code>list_name2=sorted(list_name,reverse=True)</code>,降序排列，放到list_name2里面</p><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><p>用for循环一句话就可以搞一个列表出来，有点意思</p><p><code>list_name=[i*X for i in range(start,stop,step)]</code></p><p>比如：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">list_name<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_name<span class="token punctuation">)</span>list_name<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_name<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="字典是啥"><a href="#字典是啥" class="headerlink" title="字典是啥"></a>字典是啥</h3><p>一个无序的序列，可变，每个元素由<strong>键</strong>和<strong>值</strong>构成，叫<strong>键值对</strong>，感觉这个数据结构过于方便和高级了，咋实现的啊…</p><p><del>哦原来用的是hash函数啊，好高级，字典树？不知道</del></p><p>感觉字典树应该可以实现这个功能，可以试一下诶</p><p>那这东西占的空间不是大的飞起来，天哪</p><h3 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a>字典的创建</h3><p><code>dic_name=&#123;&#39;haha&#39;:22,&#39;heaha&#39;:2322,&#39;hahar&#39;:222,&#39;harha&#39;:232&#125;</code></p><p><code>dic_name=dict(name=&#39;jack&#39;,age=20)</code></p><h3 id="字典元素的获取"><a href="#字典元素的获取" class="headerlink" title="字典元素的获取"></a>字典元素的获取</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py">dic_name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'haha'</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'heaha'</span><span class="token punctuation">:</span><span class="token number">2322</span><span class="token punctuation">,</span><span class="token string">'hahar'</span><span class="token punctuation">:</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token string">'harha'</span><span class="token punctuation">:</span><span class="token number">232</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic_name<span class="token punctuation">[</span><span class="token string">'haha'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic_name<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic_name<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'hahaiii'</span>，<span class="token number">7373</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">22</span><span class="token number">22</span><span class="token number">7373</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用字典内置的get函数可以避免找不到对应的键从而导致程序炸掉，这种情况下get函数返回一个None值</p><p>如果在get后面放一个数字，那么如果没有插到对应的键，就会把这个数字返回来</p><h3 id="字典元素存在与否的判断"><a href="#字典元素存在与否的判断" class="headerlink" title="字典元素存在与否的判断"></a>字典元素存在与否的判断</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py">dic_name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'haha'</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'heaha'</span><span class="token punctuation">:</span><span class="token number">2322</span><span class="token punctuation">,</span><span class="token string">'hahar'</span><span class="token punctuation">:</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token string">'harha'</span><span class="token punctuation">:</span><span class="token number">232</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'haha'</span> <span class="token keyword">in</span> dic_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'haha'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> dic_name<span class="token punctuation">)</span><span class="token operator">></span><span class="token boolean">True</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就用in，not in判断就行</p><h3 id="字典元素的删除"><a href="#字典元素的删除" class="headerlink" title="字典元素的删除"></a>字典元素的删除</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py">dic_name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'haha'</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'heaha'</span><span class="token punctuation">:</span><span class="token number">2322</span><span class="token punctuation">,</span><span class="token string">'hahar'</span><span class="token punctuation">:</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token string">'harha'</span><span class="token punctuation">:</span><span class="token number">232</span><span class="token punctuation">&#125;</span><span class="token keyword">del</span> dic_name<span class="token punctuation">[</span><span class="token string">'haha'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic_name<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token string">'heaha'</span><span class="token punctuation">:</span> <span class="token number">2322</span><span class="token punctuation">,</span> <span class="token string">'hahar'</span><span class="token punctuation">:</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token string">'harha'</span><span class="token punctuation">:</span> <span class="token number">232</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用del命令即可</p><h3 id="字典元素的新增和修改"><a href="#字典元素的新增和修改" class="headerlink" title="字典元素的新增和修改"></a>字典元素的新增和修改</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py">dic_name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'haha'</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'heaha'</span><span class="token punctuation">:</span><span class="token number">2322</span><span class="token punctuation">,</span><span class="token string">'hahar'</span><span class="token punctuation">:</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token string">'harha'</span><span class="token punctuation">:</span><span class="token number">232</span><span class="token punctuation">&#125;</span>dic_name<span class="token punctuation">[</span><span class="token string">'lueluelue'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">520250</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic_name<span class="token punctuation">)</span>dic_name<span class="token punctuation">[</span><span class="token string">'lueluelue'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">520</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic_name<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token string">'haha'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'heaha'</span><span class="token punctuation">:</span> <span class="token number">2322</span><span class="token punctuation">,</span> <span class="token string">'hahar'</span><span class="token punctuation">:</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token string">'harha'</span><span class="token punctuation">:</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token string">'lueluelue'</span><span class="token punctuation">:</span> <span class="token number">520250</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'haha'</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'heaha'</span><span class="token punctuation">:</span> <span class="token number">2322</span><span class="token punctuation">,</span> <span class="token string">'hahar'</span><span class="token punctuation">:</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token string">'harha'</span><span class="token punctuation">:</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token string">'lueluelue'</span><span class="token punctuation">:</span> <span class="token number">520</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取字典的视图"><a href="#获取字典的视图" class="headerlink" title="获取字典的视图"></a>获取字典的视图</h3><p>获取所有的键：用内置函数<code>Keys=dic_name.keys()</code></p><p>获取所有的值：用内置函数<code>Value=dic_name.values()</code></p><p>获取所有的键值对：用内置函数<code>Items=dic_name.items()</code>，返回的是元组</p><h3 id="字典元素的遍历"><a href="#字典元素的遍历" class="headerlink" title="字典元素的遍历"></a>字典元素的遍历</h3><p>用for：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">dic_name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'haha'</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'heaha'</span><span class="token punctuation">:</span><span class="token number">2322</span><span class="token punctuation">,</span><span class="token string">'hahar'</span><span class="token punctuation">:</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token string">'harha'</span><span class="token punctuation">:</span><span class="token number">232</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> A <span class="token keyword">in</span> dic_name<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dic_name<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字典生成式"><a href="#字典生成式" class="headerlink" title="字典生成式"></a>字典生成式</h3><p>内置函数zip：</p><p><code>dic_name=&#123;Key_list:Value_list for Key_list,Value_list in zip(Key_list,Value_list)&#125;</code></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">Name<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">]</span>scores<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>dic_name<span class="token operator">=</span><span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span>scores <span class="token keyword">for</span>  Name<span class="token punctuation">,</span>scores <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>Name<span class="token punctuation">,</span>scores<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic_name<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果两个列表内容数量不同，以少的那个为准</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><h3 id="元祖是啥"><a href="#元祖是啥" class="headerlink" title="元祖是啥"></a>元祖是啥</h3><p>是一个不可变序列，没办法增删改</p><p>据说用不可变序列有利于防止把操作对象搞混</p><p>当然如果元组里面存一个列表这种可变序列的话，这些可变序列是可以修改的，很有意思</p><h3 id="元组的创建方式"><a href="#元组的创建方式" class="headerlink" title="元组的创建方式"></a>元组的创建方式</h3><p>三种等价方式</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">t<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span>t<span class="token operator">=</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token number">99</span>t<span class="token operator">=</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果元祖里面只有一个元素，要这样写：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">t<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="元组的遍历"><a href="#元组的遍历" class="headerlink" title="元组的遍历"></a>元组的遍历</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py">t<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>就可以实现遍历（好像一般遍历都是用for循环就行吧）</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合是啥"><a href="#集合是啥" class="headerlink" title="集合是啥"></a>集合是啥</h3><p>是没value的字典，也是用hash来搞的，这个集合里面没有重复的元素，这可是数学里面的集合的基本性质</p><h3 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h3><p>两种等价方式</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">s<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span>s<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="集合元素判断"><a href="#集合元素判断" class="headerlink" title="集合元素判断"></a>集合元素判断</h3><p>in或not in就可以了</p><h3 id="集合元素的增加操作"><a href="#集合元素的增加操作" class="headerlink" title="集合元素的增加操作"></a>集合元素的增加操作</h3><p><code>s.add(x)</code>,x加入集合s</p><p><code>s.update(A)</code>,s中加入集合或列表或元组A</p><h3 id="集合元素的删除操作"><a href="#集合元素的删除操作" class="headerlink" title="集合元素的删除操作"></a>集合元素的删除操作</h3><p><code>s.remove(x)</code>：删除一个指定元素x，如果没有就报错</p><p><code>s.discard(x)</code>：删除一个指定元素，如果指定元素不存在不报错</p><p><code>s.pop()</code>：一次删除任意一个元素（好奇怪的东西）</p><p><code>s.clear()</code>：清空集合</p><h3 id="集合之间的关系"><a href="#集合之间的关系" class="headerlink" title="集合之间的关系"></a>集合之间的关系</h3><p>判断两个集合一样或不一样：<code>A==B</code>,<code>A!=B</code></p><p>判断A是否是B的子集：<code>A.issubset(B)</code></p><p>判断A是否是B的超集：<code>A.issuperset(B)</code></p><p>判断AB是否有交集：<code>A.isdisjoint(B)</code>,有交集返回<code>false</code>，否则返回<code>true</code></p><h3 id="集合的数学操作"><a href="#集合的数学操作" class="headerlink" title="集合的数学操作"></a>集合的数学操作</h3><p><code>s1.intersection(s2)</code>，<code>s1 &amp; s2</code>都是求交集</p><p><code>s1.union(s2)</code>，<code>s1 | s2</code>都是求并集</p><p><code>s1.difference(s2)</code>，<code>s1 - s2</code>都是求差集</p><p><code>s1.symmetric_difference(s2)</code>，<code>s1 ^ s2</code>都是求对称差集</p><h3 id="集合生成式"><a href="#集合生成式" class="headerlink" title="集合生成式"></a>集合生成式</h3><p>把列表生成式中的方括号变成花括号就行</p><p><code>s=&#123;i for i in range(1,10,2)&#125;</code></p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>不可变的字符序列</p><h2 id="字符串的声明"><a href="#字符串的声明" class="headerlink" title="字符串的声明"></a>字符串的声明</h2><p>单双三引号都可以的</p><h2 id="字符串的驻留机制"><a href="#字符串的驻留机制" class="headerlink" title="字符串的驻留机制"></a>字符串的驻留机制</h2><p>对于多个实际内容相同的一个字符串，python不会多次占空间，只在内存里面搞一份，这就叫驻留，很省空间</p><p>但是驻留也有条件</p><ul><li>字符串长度为0,1时</li><li>只有字母数字下划线的字符串</li><li>一开始就一样的字符串（后面加成一样的不算）</li><li>[-5,256]之间的数字</li></ul><p>可以强制驻留，引入:<code>import sys</code>即可</p><p>pycharm优化了这种情况，可以不用引入sys就可以驻留</p><h2 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h2><h3 id="字符串的查询"><a href="#字符串的查询" class="headerlink" title="字符串的查询"></a>字符串的查询</h3><p><code>s.index(&#39;substr&#39;)</code>：查找子串substr第一次出现的位置，如果子串不存在，就报错</p><p><code>s.rindex(&#39;substr&#39;)</code>：查找子串substr最后一次出现的位置，如果子串不存在，就报错</p><p><code>s.find(&#39;substr&#39;)</code>：查找子串substr第一次出现的位置，如果子串不存在，就返回-1</p><p><code>s.rfind(&#39;substr&#39;)</code>：查找子串substr最后一次出现的位置，如果子串不存在，就返回-1</p><h3 id="字符串的大小写转换操作"><a href="#字符串的大小写转换操作" class="headerlink" title="字符串的大小写转换操作"></a>字符串的大小写转换操作</h3><p><code>s.upper()</code>：把字符串中所有字母转化成大写字母</p><p><code>s.lower()</code>：把字符串中所有字母转化成小写字母</p><p><code>s.swapcase()</code>：把字符串中所有小写字母转化成大写字母，所有大写字母转化成小写字母</p><p><code>s.capitalize()</code>：把第一个字母转换为大写，其余的字符转化为小写</p><p><code>s.title()</code>：把字符串中每个单词的第一个字母转换为大写，其余的字符转化为小写</p><h3 id="字符串的内容对齐方法"><a href="#字符串的内容对齐方法" class="headerlink" title="字符串的内容对齐方法"></a>字符串的内容对齐方法</h3><p><code>s.center()</code>：居中对齐，第一个参数指定宽度，第二个参数指定填充符，可选，默认空格。如果设置宽度小于实际宽度就返回原字符串</p><p><code>s.ljist()</code>：左对齐，第一个参数指定宽度，第二个参数指定填充符，可选，默认空格。如果设置宽度小于实际宽度就返回原字符串</p><p><code>s.rjist()</code>：右对齐，第一个参数指定宽度，第二个参数指定填充符，可选，默认空格。如果设置宽度小于实际宽度就返回原字符串</p><p><code>s.zfill()</code>：右对齐，左边用0填充，只收一个参数指定字符串的宽度。默认空格。如果设置宽度小于实际宽度就返回原字符串</p><h3 id="字符串的劈分操作"><a href="#字符串的劈分操作" class="headerlink" title="字符串的劈分操作"></a>字符串的劈分操作</h3><p><code>s.spilt(sep=&#39;X&#39;,maxspilt=A)</code>:从左开始劈，默认以空格为标志劈，返回一个列表。可用参数sep来定劈分符，用maxspilt来定最大劈分次数</p><p><code>s.rspilt(sep=&#39;X&#39;,maxspilt=A)</code>:从右开始劈，默认以空格为标志劈，返回一个列表。可用参数sep来定劈分符，用maxspilt来定最大劈分次数</p><h3 id="字符串的判断操作"><a href="#字符串的判断操作" class="headerlink" title="字符串的判断操作"></a>字符串的判断操作</h3><p><code>s.isidentifier()</code>：判断s是不是合法的字符串</p><p><code>s.isspace()</code>：判断s是否全部是空白字符组成</p><p><code>s.isalpha()</code>：判断s是否全部由字母组成</p><p><code>s.isdecimal()</code>：判断字符串是否全部由十进制数字组成</p><p><code>s.isnumberic()</code>：判断s是否全部由数字组成</p><p><code>s.isalnum()</code>：判断s是否全部由字母和数字组成</p><h3 id="字符串的替换和合并"><a href="#字符串的替换和合并" class="headerlink" title="字符串的替换和合并"></a>字符串的替换和合并</h3><p><code>s.replace(&#39;A&#39;,&#39;B&#39;，X)</code>：字符串的替换，用B换A，换X次</p><p><code>s.join()</code>：将列表或元组中的字符串合并为新的一个字符串，感觉这个函数很奇怪…</p><h3 id="字符串的比较操作"><a href="#字符串的比较操作" class="headerlink" title="字符串的比较操作"></a>字符串的比较操作</h3><p><code>&gt;,&gt;=,&lt;,&lt;=,==,!=</code>都可以用来相应的比，比的时候从前往后一个一个的比，比的实际上就是ascll码或者什么码，就酱</p><h3 id="字符串的切片操作"><a href="#字符串的切片操作" class="headerlink" title="字符串的切片操作"></a>字符串的切片操作</h3><p>切片涂奶酪，真香</p><p>就和列表切片一个格式：</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">s<span class="token operator">=</span><span class="token string">'hello Java'</span>s1<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>s2<span class="token operator">=</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>s3<span class="token operator">=</span><span class="token string">'!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token operator">+</span>s3<span class="token operator">+</span>s2<span class="token punctuation">)</span><span class="token operator">></span>hello!Java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p>用<code>%,&#123;&#125;,&#123;var&#125;</code>来做占位符都ok</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">name<span class="token operator">=</span><span class="token string">'popoi'</span>age<span class="token operator">=</span><span class="token number">1231</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'my name is %s,%d years old'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'my name is &#123;0&#125;,&#123;1&#125; years old'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'my name is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token string"> years old'</span></span><span class="token punctuation">)</span><span class="token operator">></span>my name <span class="token keyword">is</span> popoi<span class="token punctuation">,</span><span class="token number">1231</span> years oldmy name <span class="token keyword">is</span> popoi<span class="token punctuation">,</span><span class="token number">1231</span> years oldmy name <span class="token keyword">is</span> popoi<span class="token punctuation">,</span><span class="token number">1231</span> years old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>%Xd</code>:X是数字前面的宽度<br><code>%.Xlf</code>:X是保留小数的位数</p><p>这些细节比较杂，可以去网上找一些详细的资料，看着用就应该没问题了</p><h3 id="字符串的编码转换"><a href="#字符串的编码转换" class="headerlink" title="字符串的编码转换"></a>字符串的编码转换</h3><p>可以用<code>encode</code>和<code>decode</code>来编码和解码，也就是把字符串搞成GBK或者UTF-8用<code>s.encode(encoding=&#39;GBK&#39;)</code>或者<code>s.encode(encoding=&#39;UTF-8&#39;)</code>，把GBK或者UTF-8搞成字符串用<code>s.decode(encoding=&#39;GBK&#39;)</code>或者<code>s.decode(encoding=&#39;UTF-8&#39;)</code></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数是啥"><a href="#函数是啥" class="headerlink" title="函数是啥"></a>函数是啥</h2><p>太基础,没法解释</p><h2 id="函数的创建"><a href="#函数的创建" class="headerlink" title="函数的创建"></a>函数的创建</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">Name</span><span class="token punctuation">(</span>canshuA<span class="token punctuation">,</span>canshuB<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>do something<span class="token keyword">return</span> X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中参数<code>canshuA,canshuB</code>(这个是形参)等等都是可以在def语句那里赋一个初值的,避免没有值的时候出现bug</p><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><p>如果返回多个值,结果就是元组类型</p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><h3 id="可变数目的参数"><a href="#可变数目的参数" class="headerlink" title="可变数目的参数"></a>可变数目的参数</h3><p>这个挺好用的诶</p><p>如果只是单个元素(个数可变的位置参数)的话可以这样:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> args<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个时候如果往fun函数里面输入多个值,args就会以一个元组的形式返回</p><p>如果有多个元素可以搞成字典的形式(个数可变的关键字参数):</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">**</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> args<span class="token keyword">print</span><span class="token punctuation">(</span>fun<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">429</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">429</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可变的未知参数只能够有一个哦,写多个要遭起</p><h1 id="python的异常处理机制"><a href="#python的异常处理机制" class="headerlink" title="python的异常处理机制"></a>python的异常处理机制</h1><p><del>debug这个东西…噩梦啊</del></p><p>除了一般的贱贱的手法比如加调试信息,加断点之外,还有这些新东西可以试试</p><h2 id="try-except-else结构"><a href="#try-except-else结构" class="headerlink" title="try..except..else结构"></a>try..except..else结构</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">try</span><span class="token punctuation">:</span>do A<span class="token keyword">except</span> BaseException <span class="token keyword">as</span> e<span class="token punctuation">:</span>do B<span class="token keyword">else</span><span class="token punctuation">:</span>do C<span class="token keyword">finally</span><span class="token punctuation">:</span>do D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中A部分就是可能出现bug的代码,B部分就是出现bug后要干的事情,BaseException那里可以写可能出现的错误,如果不知道会出现什么错误就写BaseException来网罗所有错误,e就是给这个错误取的名字,起到简略代码量的作用,C部分就是没出锅要干的事情,D就是无论如何都要在最后干的事情(这个好像没什么必要吧突然感觉)</p><p>有意思</p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">Class_name</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>Place<span class="token operator">=</span><span class="token string">'China'</span><span class="token comment">#写在类里面的变量,即类属性</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#初始化方法,这里的self就指这个类</span>self<span class="token punctuation">.</span>name<span class="token operator">=</span>nameself<span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token comment"># 似乎这个init方法就可以规定student类里面有哪些属性了,所以类属性有什么用呢</span><span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#实例方法(函数在类里面叫做方法)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'eating\n'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@staticmethod</span> <span class="token comment">#修饰语句</span><span class="token keyword">def</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#静态方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@classmethod</span> <span class="token comment">#修饰语句</span><span class="token keyword">def</span> <span class="token function">N</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#类方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'N'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只是我不是很懂,上面的三种方法有什么区别?</p><h2 id="类的对象的创建和方法的使用"><a href="#类的对象的创建和方法的使用" class="headerlink" title="类的对象的创建和方法的使用"></a>类的对象的创建和方法的使用</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>Place <span class="token operator">=</span> <span class="token string">'China'</span>  <span class="token comment"># 写在类里面的变量,即类属性</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 初始化方法,这里的self就指这个类</span>self<span class="token punctuation">.</span>name <span class="token operator">=</span> nameself<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 实例方法(函数在类里面叫做方法)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'eating\n'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@staticmethod</span>  <span class="token comment"># 修饰语句</span><span class="token keyword">def</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 静态方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@classmethod</span>  <span class="token comment"># 修饰语句</span><span class="token keyword">def</span> <span class="token function">N</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 类方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'N'</span><span class="token punctuation">)</span><span class="token comment"># 上面是定义类</span>studentA <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span>  <span class="token comment"># 这里是创建对象</span><span class="token comment">#下面是调用方法</span>studentA<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>studentA<span class="token punctuation">.</span>M<span class="token punctuation">(</span><span class="token punctuation">)</span>studentA<span class="token punctuation">.</span>N<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>eatingMN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类方法和属性的动态修改"><a href="#类方法和属性的动态修改" class="headerlink" title="类方法和属性的动态修改"></a>类方法和属性的动态修改</h2><p>类属性可以在运行的时候改,改了后所有的对象跟着改</p><p>而如果想给某一个对象搞一些特殊的,类里面没有定义的方法和属性的话,也是可以的,但这个就只对这个对象起作用了:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>AGE<span class="token operator">=</span>ageself<span class="token punctuation">.</span>NAME<span class="token operator">=</span>name<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'RunRunRun'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'yummy'</span><span class="token punctuation">)</span>A<span class="token operator">=</span>student<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span>B<span class="token operator">=</span>student<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span>A<span class="token punctuation">.</span>AGE<span class="token punctuation">,</span>B<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span>B<span class="token punctuation">.</span>AGE<span class="token punctuation">)</span>A<span class="token punctuation">.</span>gender<span class="token operator">=</span><span class="token string">'Male'</span>B<span class="token punctuation">.</span>EAT<span class="token operator">=</span>eat<span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>gender<span class="token punctuation">)</span>B<span class="token punctuation">.</span>EAT<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>A <span class="token number">1</span> B <span class="token number">2</span>Maleyummy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类的浅拷贝和深拷贝"><a href="#类的浅拷贝和深拷贝" class="headerlink" title="类的浅拷贝和深拷贝"></a>类的浅拷贝和深拷贝</h2><p>浅拷贝类,就只拷贝类本身的指针,至于类里面的父类,属性等等都不拷贝</p><p>深拷贝就要把所有的东西都拷贝一遍</p><h1 id="面向对象的三大特征和一些其他相关"><a href="#面向对象的三大特征和一些其他相关" class="headerlink" title="面向对象的三大特征和一些其他相关"></a>面向对象的三大特征和一些其他相关</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装就是,把代码包装到类对象中,在方法内部对属性进行操作,在类的外面调用方法,不用考虑类里面是怎么实现的,这就可以很舒服的隔离复杂度</p><p>在属性前面加上两个<code>_</code>就可以避免属性在类外部被直接访问,可以通过<code>dir</code>命令获得所有的属性名从而用可共用的属性名来间接访问</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>AGE<span class="token operator">=</span>ageself<span class="token punctuation">.</span>__NAME<span class="token operator">=</span>name<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'RunRunRun'</span><span class="token punctuation">)</span>stu<span class="token operator">=</span>student<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>_student__NAME<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token string">'AGE'</span><span class="token punctuation">,</span> <span class="token string">'__class__'</span><span class="token punctuation">,</span> <span class="token string">'__delattr__'</span><span class="token punctuation">,</span> <span class="token string">'__dict__'</span><span class="token punctuation">,</span> <span class="token string">'__dir__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__eq__'</span><span class="token punctuation">,</span> <span class="token string">'__format__'</span><span class="token punctuation">,</span> <span class="token string">'__ge__'</span><span class="token punctuation">,</span> <span class="token string">'__getattribute__'</span><span class="token punctuation">,</span> <span class="token string">'__gt__'</span><span class="token punctuation">,</span> <span class="token string">'__hash__'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">,</span> <span class="token string">'__init_subclass__'</span><span class="token punctuation">,</span> <span class="token string">'__le__'</span><span class="token punctuation">,</span> <span class="token string">'__lt__'</span><span class="token punctuation">,</span> <span class="token string">'__module__'</span><span class="token punctuation">,</span> <span class="token string">'__ne__'</span><span class="token punctuation">,</span> <span class="token string">'__new__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce_ex__'</span><span class="token punctuation">,</span> <span class="token string">'__repr__'</span><span class="token punctuation">,</span> <span class="token string">'__setattr__'</span><span class="token punctuation">,</span> <span class="token string">'__sizeof__'</span><span class="token punctuation">,</span> <span class="token string">'__str__'</span><span class="token punctuation">,</span> <span class="token string">'__subclasshook__'</span><span class="token punctuation">,</span> <span class="token string">'__weakref__'</span><span class="token punctuation">,</span> <span class="token string">'_student__NAME'</span><span class="token punctuation">,</span> <span class="token string">'run'</span><span class="token punctuation">]</span>E<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>用<code>Son_Class</code>类继承<code>Father_ClassA,Father_ClassB...</code>这些类:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">Son_Class</span><span class="token punctuation">(</span>Father_ClassA<span class="token punctuation">,</span>Father_ClassB<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果没有指定,就继承<code>object</code>,这个是所有的类的父类</p><p>定义子类的时候,必须在其构造函数中调用父类的构造函数.这一点其实很好理解,毕竟如果父类都还没有构造,子类构造个鬼鬼啊</p><p>比如下面,我们写两个类,<code>HumanBeings</code>和<code>Student</code>,<code>Student</code>是<code>HumanBeings</code>的子类</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">HumanBeings</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">)</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>age<span class="token operator">=</span>ageself<span class="token punctuation">.</span>name<span class="token operator">=</span>nameself<span class="token punctuation">.</span>gender<span class="token operator">=</span>gender<span class="token keyword">def</span> <span class="token function">outputinformation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>HumanBeings<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#单继承</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>classnumber<span class="token punctuation">,</span>grade<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>age<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">)</span>self<span class="token punctuation">.</span>classnumber<span class="token operator">=</span>classnumberself<span class="token punctuation">.</span>grade<span class="token operator">=</span>grade<span class="token keyword">def</span> <span class="token function">outputinformation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>gender<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">,</span>self<span class="token punctuation">.</span>classnumber<span class="token punctuation">,</span>self<span class="token punctuation">.</span>grade<span class="token punctuation">)</span>StudentA<span class="token operator">=</span>Student<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'Female'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3123</span><span class="token punctuation">)</span>StudentA<span class="token punctuation">.</span>outputinformation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>A Female <span class="token number">12</span> <span class="token number">1</span> <span class="token number">3123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>如果父类里面有一个函数,那么子类里面也是可以调用的,但是执行的代码显然是父类里面的代码</p><p>因此如果子类的同一个函数要执行不同的操作,那就需要在子类里面重新写一遍,就像上面的<code>outputinformation</code>函数一样</p><p><del>(误打误撞就写了个方法重写)</del></p><h2 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h2><p>这个是所有类的爸爸</p><p>因此它里面的函数大家都可以用,当然也可以重写啦</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>python里面多态这个东西就很灵活</p><p>也就是说对于一个函数,无论它传进来的参数是什么类型,只要这个函数调用的是该类型里面有的属性和方法,那这个函数就可以跑得动</p><p>很骚的一个操作,毕竟是一个动态语言</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">DD</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hiahia'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">DD</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hiahia'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">HiaHia</span><span class="token punctuation">(</span>obbdd<span class="token punctuation">)</span><span class="token punctuation">:</span>obbdd<span class="token punctuation">.</span>DD<span class="token punctuation">(</span><span class="token punctuation">)</span>AA<span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span>BB<span class="token operator">=</span>B<span class="token punctuation">(</span><span class="token punctuation">)</span>HiaHia<span class="token punctuation">(</span>AA<span class="token punctuation">)</span>HiaHia<span class="token punctuation">(</span>BB<span class="token punctuation">)</span><span class="token operator">></span>hiahiahiahia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一些特殊方法和属性"><a href="#一些特殊方法和属性" class="headerlink" title="一些特殊方法和属性"></a>一些特殊方法和属性</h2><ul><li>属性:</li></ul><p><code>__dic</code>:获得类对象或者实例对象相关的所有方法和属性</p><ul><li>方法:</li></ul><p><code>__len()__</code>:获得列表的长度的方法</p><p><code>__add()__</code>:加法的内置方法</p><p><code>__new()__</code>:创建对象的内置方法</p><p><code>__init()__</code>:对创建的对象进行初始化的方法</p><p>上面这些方法其实也是可以重写的,也就是按照这个方法本来的参数格式来将它重写一遍,可以达到像用加号直接连接两个字符串的这种新的好玩的操作</p><p>关于new和init方法有一些需要注意的东西,只要用一个类新建了一个对象,那么就会调用object类 <del>(祖宗类)</del> 里面的new和init方法,先用new搞一个对象出来,然后返回给init函数,在init函数里面赋值最后返回给新建的那个对象.因此如果重写这两个方法的话应该就会改变这个过程(只要敢乱写)</p><p>更细节的东西可以咨询因特网先生</p><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="模块是啥"><a href="#模块是啥" class="headerlink" title="模块是啥"></a>模块是啥</h2><p>模块就是一个<code>.py</code>文件,里面有函数,类,类方法属性,语句啥的</p><p>这就很舒服,因为似乎可以引用的样子,从而便于拆分任务</p><p>一个py程序就由多个模块和包(包马上就讲到了)构成喽</p><h2 id="模块操作"><a href="#模块操作" class="headerlink" title="模块操作"></a>模块操作</h2><ul><li>新建模块:直接新建<code>.py</code>文件就行</li><li>导入模块:<code>import Module</code>或者<code>from Module import f</code>(第二个是指从Module中导入f函数)</li><li>使用模块中的函数方法相关:</li></ul><p><code>Module.f()</code>:可以调用Module里面的f函数<br><code>dir(Module)</code>:返回Module里面的东西</p><p>如果要导入自定义模块(就是自己写的模块)的话,有几种比较好的方法,我最喜欢的一种就是用sys引入地址:</p><p>假如有一个<code>ccaa.py</code>在<code>G:\Learning Python\code</code>里面,然后我要在某一个py模块里引入ccaa这个模块,就可以这样写:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># ccaa.py</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>gender<span class="token operator">=</span>gender        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name    <span class="token keyword">def</span> <span class="token function">outputinformation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Name:'</span><span class="token operator">+</span>self<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">' age:'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' gender:'</span><span class="token operator">+</span>self<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># 任意一个文件</span><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">r"G:\Learning Python\code"</span><span class="token punctuation">)</span><span class="token keyword">import</span> ccaa<span class="token keyword">print</span><span class="token punctuation">(</span>ccaa<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ccaa<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">)</span>B<span class="token operator">=</span>ccaa<span class="token punctuation">.</span>Human<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'Female'</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span>B<span class="token punctuation">.</span>outputinformation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">333</span><span class="token operator">-</span><span class="token number">111</span>Name<span class="token punctuation">:</span>B age<span class="token punctuation">:</span><span class="token number">19</span> gender<span class="token punctuation">:</span>Female<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模块主程序的指定"><a href="#模块主程序的指定" class="headerlink" title="模块主程序的指定"></a>模块主程序的指定</h2><p>在代码前这样写:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    do something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>则可以让这个do something只在本模块被当做主程序运行的时候才执行,而被当做模块导入的时候就不行</p><h2 id="python中常见的内置模块"><a href="#python中常见的内置模块" class="headerlink" title="python中常见的内置模块"></a>python中常见的内置模块</h2><p><code>sys,time,os,calendar,urllib,json,re,math,decimal,logging...</code>详情请上网详细搜索</p><h2 id="第三方模块的安装和使用"><a href="#第三方模块的安装和使用" class="headerlink" title="第三方模块的安装和使用"></a>第三方模块的安装和使用</h2><p><code>pip install Module_Name</code>:安装(在dos里面输入)</p><p><code>import Module_Name</code>:使用</p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="包是啥"><a href="#包是啥" class="headerlink" title="包是啥"></a>包是啥</h2><p>是一个分层次的目录结构,把一堆模块组织在一起</p><p>包和目录的差别就是,包里面会有一个<code>__init__.py</code>文件,目录里面没有</p><h2 id="如何导入包"><a href="#如何导入包" class="headerlink" title="如何导入包"></a>如何导入包</h2><h3 id="import方法"><a href="#import方法" class="headerlink" title="import方法"></a>import方法</h3><p>如果用这个方法,就只能够直接导入包名不能够单独导入包里面的模块:<code>import p</code></p><h3 id="from-import方法"><a href="#from-import方法" class="headerlink" title="from import方法"></a>from import方法</h3><p>如果这样就可以导入方法里面的模块了,还可以用一个名称代指:</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">from</span> pageage1 <span class="token keyword">import</span> module_A <span class="token keyword">as</span> A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><p>打开/创建文件:<code>file=open(Filename [,mode,encoding])</code></p><p>其中,Filename指要打开或创建的文件名称,mode是打开模式,模式有<code>r,w,a,b,+</code>等等,具体上网一查就知道了.encoding是指编码方式,默认gbk.</p><p>文件指针就放在file变量里面了,这个指针有一些可用的函数,可利用其进行文件读写操作:</p><ul><li><code>file.read(size)</code>:读取file中size个字节或字符的文件,若没有写size就直接读取到文件末尾</li><li><code>file.readline()</code>:从文本中读取一行内容</li><li><code>file.readlines()</code>:从文本中一行一行读取,形成一个列表然后返回</li><li><code>file.write(X)</code>:把X字符串写入文件</li><li><code>file.writelines(X)</code>:把X字符串列表写入文件,不加换行符</li><li><code>file.close()</code>:关闭文件,释放资源</li><li><code>file.seek(offeset[,whence])</code>,<code>file.tell()</code>,<code>file.flush()</code>等,咨询Internet即可</li></ul><h2 id="with语句-上下文管理器"><a href="#with语句-上下文管理器" class="headerlink" title="with语句(上下文管理器)"></a>with语句(上下文管理器)</h2><p>可以用with语句来避免忘记关掉文件而导致的资源浪费</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span><span class="token string">'mode'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Name<span class="token punctuation">:</span>do something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>离开with语句后就可以直接关掉filename文件了</p><p>其原理是无论是否报错,只要退出了with语句,就会执行特殊方法<code>__exit()__</code>来释放资源</p><h1 id="最后的测验"><a href="#最后的测验" class="headerlink" title="最后的测验"></a>最后的测验</h1><p>一个练习题:<strong>学生管理系统</strong></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li><p>添加学生即成绩信息</p></li><li><p>将学生信息保存到文件中</p></li><li><p>修改和删除学生信息</p></li><li><p>查询学生信息</p></li><li><p>根据学生成绩进行排序</p></li><li><p>统计学生总分</p><h2 id="模块-1"><a href="#模块-1" class="headerlink" title="模块"></a>模块</h2></li><li><p>修改模块:新建修改删除</p></li><li><p>查询模块</p></li><li><p>总览模块:总览所有学生情况</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>本来想写三个模块的(查询修改总览),但是由于能力有限,不知道怎么样合理调用变量,所以就把修改和总览模块放在一起了</p><p>手模了几组数据程序跑得过,因此至于bug嘛..不要管啦,懒得debug了</p><p><code>informationBase.py</code></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># Andrew82106</span><span class="token comment"># time: 2021/7/16 11:33</span><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>age<span class="token operator">=</span>age        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        self<span class="token punctuation">.</span>gender<span class="token operator">=</span>gender        self<span class="token punctuation">.</span>height<span class="token operator">=</span>height<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Human<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>height<span class="token punctuation">,</span>numofsubject<span class="token punctuation">,</span>subject<span class="token punctuation">,</span>grade<span class="token punctuation">,</span>Class<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>height<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>subject<span class="token operator">=</span>subject<span class="token comment">#dirctory</span>        self<span class="token punctuation">.</span>grade<span class="token operator">=</span>grade        self<span class="token punctuation">.</span>Class<span class="token operator">=</span>Class        <span class="token class-name">self</span><span class="token punctuation">.</span>numofsubject<span class="token operator">=</span>numofsubject<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>StudentQuery.py</code></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># Andrew82106</span><span class="token comment"># time: 2021/7/17 16:58</span><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">r"G:\Learning Python\StudentGradeSystem"</span><span class="token punctuation">)</span><span class="token comment">#import informationBase as Info</span><span class="token comment">#import StudentModify as Modi</span><span class="token keyword">class</span> <span class="token class-name">Sort_</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">Mysort</span><span class="token punctuation">(</span>Dic<span class="token punctuation">,</span>Reverse<span class="token punctuation">)</span><span class="token punctuation">:</span>        Result<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> Dic<span class="token punctuation">:</span>            a<span class="token operator">=</span>Dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> a <span class="token keyword">in</span> Result<span class="token punctuation">:</span>                Result<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token string">','</span>                Result<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">+=</span>i            <span class="token keyword">else</span><span class="token punctuation">:</span>                Result<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>i        X<span class="token operator">=</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>Result<span class="token punctuation">,</span>reverse<span class="token operator">=</span>Reverse<span class="token punctuation">)</span>        Result2<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        length<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Result2<span class="token punctuation">[</span>Result<span class="token punctuation">[</span>X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>X<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> Result2    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">SubjectRank</span><span class="token punctuation">(</span>Information_<span class="token punctuation">,</span>subjects<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dic<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        length<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>Information_<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#length2=len(Information_[i].subject)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> Information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>subject<span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">==</span> subjects<span class="token punctuation">:</span>                    Dic<span class="token punctuation">[</span>Information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token operator">=</span>Information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>subject<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token comment">#Name=sorted(Dic.values())</span>        Name <span class="token operator">=</span> Sort_<span class="token punctuation">.</span>Mysort<span class="token punctuation">(</span>Dic<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>        length2<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span>        <span class="token keyword">if</span> length2<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有学这个科目的学生,请检查是否输入错误'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        cnt<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>>>>>&#123;0&#125;学科的各个学生排名"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>subjects<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> Name<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"排名&#123;0&#125;:&#123;1&#125; &#123;2&#125;分"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>Name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cnt<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">PersonalRank</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>information__<span class="token punctuation">)</span><span class="token punctuation">:</span>        length<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>information__<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> information__<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">==</span>name<span class="token punctuation">:</span>                Student<span class="token operator">=</span>information__<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                Name<span class="token operator">=</span>Sort_<span class="token punctuation">.</span>Mysort<span class="token punctuation">(</span>Student<span class="token punctuation">.</span>subject<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>                cnt<span class="token operator">=</span><span class="token number">0</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>>>>>&#123;0&#125;的各学科排名:"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> Name<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"排名&#123;0&#125;:&#123;1&#125; &#123;2&#125;分"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>Name<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    cnt<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">def</span> <span class="token function">SumScore</span><span class="token punctuation">(</span>Name<span class="token punctuation">,</span>information__<span class="token punctuation">)</span><span class="token punctuation">:</span>    length<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>information__<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>information__<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">==</span>Name<span class="token punctuation">)</span><span class="token punctuation">:</span>            Student<span class="token operator">=</span>information__<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token builtin">sum</span><span class="token operator">=</span><span class="token number">0</span>            <span class="token comment">#length=len(Student.subject)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> Student<span class="token punctuation">.</span>subject<span class="token punctuation">:</span>                <span class="token builtin">sum</span><span class="token operator">+=</span>Student<span class="token punctuation">.</span>subject<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"姓名:&#123;0&#125; 总分:&#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有找到这个学生,请确认输入正确性:"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#numofstudent=Modi.login_information()</span>    <span class="token comment">#Modi.output_information(numofstudent)</span>    <span class="token comment">#SumScore('Bily')</span>    <span class="token comment">#Sort_.PersonalRank('Bily')</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Student_Information_Arrangement_System.py</code></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment"># Andrew82106</span><span class="token comment"># time: 2021/7/18 14:23</span><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">r"G:\Learning Python\StudentGradeSystem"</span><span class="token punctuation">)</span><span class="token keyword">import</span> informationBase <span class="token keyword">as</span> Info<span class="token keyword">import</span> StudentQuery <span class="token keyword">as</span> Quer<span class="token keyword">global</span> information_<span class="token keyword">global</span> numofstudent<span class="token keyword">class</span> <span class="token class-name">Modi</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">cutback</span><span class="token punctuation">(</span>Stringss<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 利用切片把末尾的回车去掉的函数</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Stringss<span class="token punctuation">)</span>        <span class="token keyword">return</span> Stringss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">login_information</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 读取文件模块</span>        <span class="token keyword">global</span> numofstudent        <span class="token keyword">global</span> information_        information_<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        info <span class="token operator">=</span> <span class="token number">0</span>        numofstudent <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> numofstudent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># &#123;SubName1:score1,SubName2:score2......&#125;</span>            name_ <span class="token operator">=</span> Modi<span class="token punctuation">.</span>cutback<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            age_ <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            gender_ <span class="token operator">=</span> Modi<span class="token punctuation">.</span>cutback<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            height_ <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            grade_ <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            Class <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            numofsub <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            Sub <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> numofsub<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                Sub_name <span class="token operator">=</span> Modi<span class="token punctuation">.</span>cutback<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># Sub_name = file.readline()</span>                Sub<span class="token punctuation">[</span>Sub_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># print(">>>>&#123;0&#125;".format(info))</span>            information_<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Info<span class="token punctuation">.</span>Student<span class="token punctuation">(</span>name_<span class="token punctuation">,</span> age_<span class="token punctuation">,</span> gender_<span class="token punctuation">,</span> height_<span class="token punctuation">,</span> numofsub<span class="token punctuation">,</span> Sub<span class="token punctuation">,</span> grade_<span class="token punctuation">,</span> Class<span class="token punctuation">)</span><span class="token punctuation">)</span>            info <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment"># print('info&#123;0&#125;'.format(info))</span>            <span class="token keyword">if</span> info <span class="token operator">>=</span> numofstudent<span class="token punctuation">:</span>                <span class="token keyword">return</span> numofstudent    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">output_Student</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 输出某个学生的信息模块</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">>>>>>\n姓名:&#123;0&#125; 性别:&#123;1&#125; 年龄:&#123;2&#125; 身高(cm):&#123;3&#125; &#123;4&#125;年级&#123;5&#125;班"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">,</span> Student<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> Student<span class="token punctuation">.</span>age<span class="token punctuation">,</span>                                                                         Student<span class="token punctuation">.</span>height<span class="token punctuation">,</span> Student<span class="token punctuation">.</span>grade<span class="token punctuation">,</span> Student<span class="token punctuation">.</span>Class<span class="token punctuation">)</span><span class="token punctuation">)</span>        lenth <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>subject<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"在学学科数目:&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>lenth<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> Student<span class="token punctuation">.</span>subject<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"学科名:&#123;0&#125; 分数:&#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> Student<span class="token punctuation">.</span>subject<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">output_information</span><span class="token punctuation">(</span>numofstudent<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 输出所有文件信息模块</span>        <span class="token keyword">global</span> information_        <span class="token keyword">if</span> numofstudent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"还没有任何信息"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> numofstudent<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Modi<span class="token punctuation">.</span>output_Student<span class="token punctuation">(</span>information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">output_information_TOFiles</span><span class="token punctuation">(</span>numofstudent<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 输出所有文件信息模块</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在将文件保存到静态文档中'</span><span class="token punctuation">)</span>        <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>numofstudent<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> numofstudent<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"&#123;0&#125;\n&#123;1&#125;\n&#123;2&#125;\n&#123;3&#125;\n&#123;4&#125;\n&#123;5&#125;\n&#123;6&#125;\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>                                                                    information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>gender<span class="token punctuation">,</span>                                                                    information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span> information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>grade<span class="token punctuation">,</span>                                                                    information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Class<span class="token punctuation">,</span>                                                                    information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>numofsubject<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>subject<span class="token punctuation">:</span>                <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"&#123;0&#125;\n&#123;1&#125;\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>subject<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'存储完毕'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">generate_Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入学生名字:'</span><span class="token punctuation">)</span>        age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入学生年龄:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            gender <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入学生性别(M=Male,F=Female):'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> gender <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span>                gender <span class="token operator">=</span> <span class="token string">'Male'</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> gender <span class="token operator">==</span> <span class="token string">'F'</span><span class="token punctuation">:</span>                gender <span class="token operator">=</span> <span class="token string">'Female'</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请不要输入无关字符'</span><span class="token punctuation">)</span>        height <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入学生身高(cm):'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        grade <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入学生年级:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        Class <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入学生班级:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        numofsub <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请问该学生有多少正在学的科目:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sub <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> numofsub<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nameofs <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'第&#123;0&#125;个在学学科名:'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            sub<span class="token punctuation">[</span>nameofs<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'这个学科本次考试的分数:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Info<span class="token punctuation">.</span>Student<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> height<span class="token punctuation">,</span> numofsub<span class="token punctuation">,</span> sub<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> Class<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> numofstudent        Stu <span class="token operator">=</span> Modi<span class="token punctuation">.</span>generate_Student<span class="token punctuation">(</span><span class="token punctuation">)</span>        information_<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Stu<span class="token punctuation">)</span>        numofstudent<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>information_<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">DeleteStu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> numofstudent        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入要删除的学生的名字'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> numofstudent<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该学生信息如下:'</span><span class="token punctuation">)</span>                Modi<span class="token punctuation">.</span>output_Student<span class="token punctuation">(</span>information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>                    ensure <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'确定要删除吗?Yes为确定,No为取消:'</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> ensure <span class="token operator">==</span> <span class="token string">'Yes'</span><span class="token punctuation">:</span>                        information_<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成功删除'</span><span class="token punctuation">)</span>                        numofstudent <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>information_<span class="token punctuation">)</span>                        <span class="token keyword">return</span>                    <span class="token keyword">elif</span> ensure <span class="token operator">==</span> <span class="token string">'No'</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成功取消删除操作'</span><span class="token punctuation">)</span>                        numofstudent <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>information_<span class="token punctuation">)</span><span class="token comment">#</span>                        <span class="token keyword">return</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请不要输入无关内容:"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'找不到该学生,请检查是否有输入错误'</span><span class="token punctuation">)</span>        numofstudent <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>information_<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">updateStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入要修改信息的学生的名字:'</span><span class="token punctuation">)</span>            Have <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> numofstudent<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该学生信息如下:'</span><span class="token punctuation">)</span>                    Have <span class="token operator">=</span> <span class="token boolean">True</span>                    Modi<span class="token punctuation">.</span>output_Student<span class="token punctuation">(</span>information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>                        choose <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请问要修改什么?输入相应字符进行修改(Name,Age,Gender,Height,Subject,Grade,Class),输入exit退出修改:'</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> choose <span class="token operator">==</span> <span class="token string">'Name'</span><span class="token punctuation">:</span>                            information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入修改后的名字:'</span><span class="token punctuation">)</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改成功'</span><span class="token punctuation">)</span>                        <span class="token keyword">elif</span> choose <span class="token operator">==</span> <span class="token string">'Age'</span><span class="token punctuation">:</span>                            information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入修改后的年龄:'</span><span class="token punctuation">)</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改成功'</span><span class="token punctuation">)</span>                        <span class="token keyword">elif</span> choose <span class="token operator">==</span> <span class="token string">'Gender'</span><span class="token punctuation">:</span>                            information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入修改后的性别:'</span><span class="token punctuation">)</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改成功'</span><span class="token punctuation">)</span>                        <span class="token keyword">elif</span> choose <span class="token operator">==</span> <span class="token string">'Height'</span><span class="token punctuation">:</span>                            information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入修改后的身高(cm):'</span><span class="token punctuation">)</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改成功'</span><span class="token punctuation">)</span>                        <span class="token keyword">elif</span> choose <span class="token operator">==</span> <span class="token string">'Subject'</span><span class="token punctuation">:</span>                            <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>                                choose2 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请问是否新增科目,输入Yes或No,退出输出Exit:"</span><span class="token punctuation">)</span>                                <span class="token keyword">if</span> choose2 <span class="token operator">==</span> <span class="token string">'Yes'</span><span class="token punctuation">:</span>                                    NumofNew <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'新增几个科目:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> NumofNew<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                        Name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入新增的第&#123;0&#125;个科目的名字:'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                        <span class="token comment"># if information_[i].subject.has_key(Name):</span>                                        <span class="token keyword">if</span> Name <span class="token keyword">in</span> information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>subject<span class="token punctuation">:</span>                                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已经有这个科目了"</span><span class="token punctuation">)</span>                                        <span class="token keyword">else</span><span class="token punctuation">:</span>                                            information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>subject<span class="token punctuation">[</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入&#123;0&#125;的分数:"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token keyword">elif</span> choose2 <span class="token operator">==</span> <span class="token string">'No'</span><span class="token punctuation">:</span>                                    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>                                        choose3 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入欲修改科目的名称:"</span><span class="token punctuation">)</span>                                        D <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                                        Have_ <span class="token operator">=</span> <span class="token boolean">False</span>                                        <span class="token keyword">for</span> k <span class="token keyword">in</span> information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>subject<span class="token punctuation">:</span>                                            <span class="token keyword">if</span> k <span class="token operator">==</span> choose3<span class="token punctuation">:</span>                                                Have_ <span class="token operator">=</span> <span class="token boolean">True</span>                                                <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>                                                    choose4 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'删除此科目输入 Del ,修改此科目分数输入 Modi,退出输入exit:'</span><span class="token punctuation">)</span>                                                    <span class="token keyword">if</span> choose4 <span class="token operator">==</span> <span class="token string">'Del'</span><span class="token punctuation">:</span>                                                        D<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>                                                        <span class="token keyword">break</span>                                                    <span class="token keyword">elif</span> choose4 <span class="token operator">==</span> <span class="token string">'Modi'</span><span class="token punctuation">:</span>                                                        information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>subject<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'修改后的分数:'</span><span class="token punctuation">)</span>                                                        <span class="token keyword">break</span>                                                    <span class="token keyword">elif</span> choose4 <span class="token operator">==</span> <span class="token string">'exit'</span><span class="token punctuation">:</span>                                                        <span class="token keyword">break</span>                                                    <span class="token keyword">else</span><span class="token punctuation">:</span>                                                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请不要输入无关字符'</span><span class="token punctuation">)</span>                                        <span class="token keyword">if</span> Have_ <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>                                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'未查询到相关科目,请注意拼写和大小写是否正确'</span><span class="token punctuation">)</span>                                        <span class="token keyword">else</span><span class="token punctuation">:</span>                                            <span class="token keyword">for</span> kk <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                <span class="token keyword">del</span> information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>subject<span class="token punctuation">[</span>D<span class="token punctuation">[</span>kk<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 字典元素不能够再遍历字典的时候删除,所以在里面做个标记之后再删除</span>                                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"待删除元素处理完成"</span><span class="token punctuation">)</span>                                            D<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                                            <span class="token keyword">break</span>                                <span class="token keyword">elif</span> choose2 <span class="token operator">==</span> <span class="token string">'Exit'</span><span class="token punctuation">:</span>                                    <span class="token keyword">break</span>                                <span class="token keyword">else</span><span class="token punctuation">:</span>                                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请不要输入无关内容"</span><span class="token punctuation">)</span>                        <span class="token keyword">elif</span> choose <span class="token operator">==</span> <span class="token string">'Grade'</span><span class="token punctuation">:</span>                            information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入修改后的年级:'</span><span class="token punctuation">)</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改成功'</span><span class="token punctuation">)</span>                        <span class="token keyword">elif</span> choose <span class="token operator">==</span> <span class="token string">'Class'</span><span class="token punctuation">:</span>                            information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Class <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入修改后的班级:'</span><span class="token punctuation">)</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改成功'</span><span class="token punctuation">)</span>                        <span class="token keyword">elif</span> choose <span class="token operator">==</span> <span class="token string">'exit'</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"退出"</span><span class="token punctuation">)</span>                            <span class="token keyword">break</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不要输入无关内容"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> Have <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未找到学生信息,请重新输入:"</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> Have <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"成功更新"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">getStudent</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>information_<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">==</span> Name<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> information_<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment"># print("未找到相关学生信息")</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">checkFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"成功读取到静态文件,正在启动系统"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> BaseException<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"想必这应该是第一次使用本系统,创建静态文件存档中..."</span><span class="token punctuation">)</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">OutputMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"_________________学生成绩管理系统(1.0.0)_________________"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"_________________        Menu        _________________"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"___________        1.新建学生存档信息         ___________"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"___________        2.修改学生存档信息         ___________"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"___________        3.删除学生存档信息         ___________"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"___________      4.查询单科相关学生总排名      ___________"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"___________        5.查询某学生所有信息       ___________"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"___________       6.查询各学生所有信息        ___________"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"___________      7.查询某学生所学科目排名      ___________"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"___________     输入其他任意字符来退出系统      ___________"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">OutputChoose</span><span class="token punctuation">(</span>INPUT<span class="token punctuation">)</span><span class="token punctuation">:</span>    length<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>INPUT<span class="token punctuation">)</span>    Choose <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入欲进行的操作前面的数字编号:"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>Choose<span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">str</span><span class="token punctuation">(</span>INPUT<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> INPUT<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        Choose<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请不要输入一些无关的字符:"</span><span class="token punctuation">)</span>checkFiles<span class="token punctuation">(</span><span class="token punctuation">)</span>Modi<span class="token punctuation">.</span>login_information<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    OutputMenu<span class="token punctuation">(</span><span class="token punctuation">)</span>    Choose<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入欲进行的操作前面的数字编号:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> Choose <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        Modi<span class="token punctuation">.</span>addStudent<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> Choose <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        Modi<span class="token punctuation">.</span>updateStudent<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> Choose <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        Modi<span class="token punctuation">.</span>DeleteStu<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> Choose <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        subject <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入要查询的科目:"</span><span class="token punctuation">)</span>        Quer<span class="token punctuation">.</span>Sort_<span class="token punctuation">.</span>SubjectRank<span class="token punctuation">(</span>information_<span class="token punctuation">,</span> subject<span class="token punctuation">)</span>    <span class="token keyword">elif</span> Choose <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入要查询的学生姓名:"</span><span class="token punctuation">)</span>            Check <span class="token operator">=</span> Modi<span class="token punctuation">.</span>getStudent<span class="token punctuation">(</span>name<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>Check<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>                Modi<span class="token punctuation">.</span>output_Student<span class="token punctuation">(</span>Check<span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未查询到相关学生信息"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> Choose <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span>        Modi<span class="token punctuation">.</span>output_information<span class="token punctuation">(</span>numofstudent<span class="token punctuation">)</span>    <span class="token keyword">elif</span> Choose <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入要查询的学生姓名:"</span><span class="token punctuation">)</span>            Check <span class="token operator">=</span> Modi<span class="token punctuation">.</span>getStudent<span class="token punctuation">(</span>name<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>Check<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>                Quer<span class="token punctuation">.</span>Sort_<span class="token punctuation">.</span>PersonalRank<span class="token punctuation">(</span>Check<span class="token punctuation">.</span>name<span class="token punctuation">,</span>information_<span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未查询到相关学生信息"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"谢谢使用"</span><span class="token punctuation">)</span>        Modi<span class="token punctuation">.</span>output_information_TOFiles<span class="token punctuation">(</span>numofstudent<span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>感觉这样一打还是暴露出很多问题</p><p>变量和函数的名字取得太长,程序鲁棒性不行,函数实现上比较冗长</p><p>按理来讲一百多行应该足够了但我这个….</p><p>这么丑的代码就不往GitHub上面传了吧</p><p>还有,在打包生成exe文件的时候一定记得,要把杀毒软件<strong>暂时</strong>关掉,不然造不出来exe文件的</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git浅学笔记</title>
      <link href="/2021/07/04/Git%E6%B5%85%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/04/Git%E6%B5%85%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Git教程"><a href="#Git教程" class="headerlink" title="Git教程"></a>Git教程</h1><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h3 id="简图"><a href="#简图" class="headerlink" title="简图"></a>简图</h3><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li>workspace：</li></ul><p>工作区，程序员进行开发改动的地方，是你当前看到的，也是最新的。</p><p>平常我们开发就是拷贝远程仓库中的一个分支，基于该分支进行开发。在开发过程中就是对工作区的操作</p><p>实际中就是.git文件夹所在的那个大文件夹</p><ul><li>index：暂存区</li></ul><p>.git目录下的index文件, 暂存区会记录git add添加文件的相关信息(文件名、大小、timestamp…)，不保存文件实体, 通过id指向每个文件实体。可以使用git status查看暂存区的状态。暂存区标记了你当前工作区中，哪些内容是被git管理的。</p><p>当你完成某个需求或功能后需要提交到远程仓库，那么第一步就是通过git add先提交到暂存区，被git管理。</p><ul><li>repository：本地仓库</li></ul><p>保存了对象被提交 过的各个版本，比起工作区和暂存区的内容，它要更旧一些。</p><p>git commit后同步index的目录树到本地仓库，方便从下一步通过git push同步本地仓库与远程仓库的同步。</p><p>在实际上其实就是.git文件夹，其中有stage(暂存区)，master（Git自动创建的第一个分支），HEAD（指向master的一个指针）等</p><ul><li>remote：远程仓库</li></ul><p>远程仓库的内容可能被分布在多个地点的处于协作关系的本地仓库修改，因此它可能与本地仓库同步，也可能不同步，但是它的内容是最旧的。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>任何对象都是在工作区中诞生和被修改；</p><p>任何修改都是从进入index区才开始被版本控制；</p><p>只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹；</p><p>与协作者分享本地的修改，可以把它们push到远程仓库来共享。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装好git后设置本机全局用户名和邮箱：</p><p>git config –gobal user.name “XX”<br>git config –gobal user.email “xx”</p><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>相关命令:</p><p>cd XX：进入某文件夹</p><p>mkdir XX：新建文件夹</p><p>pwd ：显示当前目录</p><p>git init：把当下目录变成git可以管理的仓库</p><h3 id="修改和上传文件"><a href="#修改和上传文件" class="headerlink" title="修改和上传文件"></a>修改和上传文件</h3><p>git add XXX：将XXX添加到暂存区里面去</p><p>git commit -m”XX”：将暂存区里的文件上传到仓库里面，并写注释XX</p><p>git status：检查状态，看是否有文件没有提交</p><p>显示：nothing to commit, working tree clean，则没有要提交的文件</p><p>显示：Changes not staged for commit，则有要提交的修改过后的文件</p><p>git diff XX.x：在XX.x文件被修改后但没有add到仓库里时可以用此命令来看XX.x文件的修改情况</p><p>文件版本回退，撤销修改，删除文件</p><p>git log：查看历次commit到仓库的情况和记录</p><p>cat XX.XX：查看XX.XX文件</p><p>git reflog 得到历次修改的版本号和注释（这就体现了写注释的重要性）</p><p>git reset –hard 版本号：将文件恢复到版本号所指的文件情况下</p><p>git reset –hard HEAD~X：将文件退回到前X个版本</p><p>git checkout –XX.xx：撤销XX.xx文件在工作区所做的修改， 让其回到和暂存区一样的状态</p><p>rm X.x：将X.x文件从文件目录（工作区）中删掉</p><h2 id="远端操作"><a href="#远端操作" class="headerlink" title="远端操作"></a>远端操作</h2><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><h4 id="SSH加密设置"><a href="#SSH加密设置" class="headerlink" title="SSH加密设置"></a>SSH加密设置</h4><p>在用户主目录下找到.ssh文件夹</p><p>如果没有id_rsa（私匙，不可泄露）,id_rsa.pub（公匙）两个文件则输入命令：</p><p>ssh-keygen -t rsa –C “<a href="mailto:&#x79;&#111;&#117;&#114;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#111;&#109;">&#x79;&#111;&#117;&#114;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#111;&#109;</a>”</p><p>来生成密匙</p><h4 id="与github连接"><a href="#与github连接" class="headerlink" title="与github连接"></a>与github连接</h4><p>打开settings中的SSH Keys界面，将公匙文件中的文字复制到Key框中，单击AddKey即可</p><p>在github上创建仓库</p><p>点击新建仓库按钮后填写仓库名字</p><p>点击创建</p><h4 id="上传操作"><a href="#上传操作" class="headerlink" title="上传操作"></a>上传操作</h4><p>git remote add origin +地址：创建本地仓库和存储库的链接</p><p>git remote rm origin：删除远程地址（上传文件时运行add origin命令是如果报错说已经存在远端则就用这个命令给他把远端删除，再add origin并进行第一次推送）</p><p>git push -u origin master ：第一次将本地的内容推送到远程</p><p>git push origin master：第二次及以后的推送</p><h4 id="克隆操作"><a href="#克隆操作" class="headerlink" title="克隆操作"></a>克隆操作</h4><p>git clone + 地址：从…地址处克隆仓库放在当前文件夹下</p><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><h5 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h5><p>刚刚开始时候的分支是master（其实github好像是main分支，但为了统一，不妨就设为master吧）</p><p>git checkout -b Name 创建名称为Name的分支并切换到 Name分支</p><p>这条命令相当于如下两条命令：</p><p>git branch dev：新建名称为dev的分支</p><p>git checkout dev：转移到名称为dev的分支</p><p>git branch：查看当前的分支情况</p><p>git merge XX：将XX分支合并到当前分支上</p><p>git branch -d name：删除名称为name的分支</p><p>如果分支和master发生冲突，则需要改成一样的才能够合并</p><h5 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h5><p>一般搞一个非常稳定的分支master，然后搞一个分支dev，在dev里面工作好后再合并到master分支上，不能够再master分支上工作</p><h5 id="合并分支的不同模式"><a href="#合并分支的不同模式" class="headerlink" title="合并分支的不同模式"></a>合并分支的不同模式</h5><p>Fast-forward模式：很快，但会丢掉分支信息</p><p>禁用Faster-forward模式合并name分支：</p><p>git merge -no-ff -m “注释” name</p><h2 id="多人合作"><a href="#多人合作" class="headerlink" title="多人合作"></a>多人合作</h2><h3 id="查看远端情况"><a href="#查看远端情况" class="headerlink" title="查看远端情况"></a>查看远端情况</h3><p>git remote 查看远端情况</p><p>git remote -v 查看远端详细情况</p><h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><p>git push origin XX：推送到XX分支上</p><p>一般只推送主分支master</p><p>如果两个人推送同一个文件的不同版本，那么就会出现矛盾，这时考虑把第一个推送上去的人的文件抓取过来然后把两个文件改到一样就行</p><h3 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h3><p>git clone命令把远程的要开发的分支分到本地来</p><p>git pull：把最新的提交从当前所在分支抓下来</p><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><p>git config –global http.sslVerify “false”：解除ssl验证</p><p>git credential-manager uninstall + git credential-manager install：删除用户名，从而可以重新输入密码</p><p>git config –global –unset https.proxy：取消https代理</p><p>git config –global –unset http.proxy：取消http代理</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/04/hello-world/"/>
      <url>/2021/07/04/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="中文版"><a href="#中文版" class="headerlink" title="中文版"></a>中文版</h1><p>似乎用电脑访问此博客会获得更加自由的感觉</p><p>本博客的定位，以学习笔记和阅读笔记为主，当然也有部分随笔等，详细内容如下：</p><h2 id="思维记录板"><a href="#思维记录板" class="headerlink" title="思维记录板"></a>思维记录板</h2><p>这是在本人在高中竞赛时期长时间使用电脑学习思考环境下,为了提高专注度和思维深度而提出的一种学习辅助手段，居然来讲就是把自己的思维活动详细的记录下来,以达到实时监控思维和深入思考的目的</p><p>但这种方式的弊端很明显:耗时太长。本网站将这些文章按月份整合，目的其实是为了保存这些信息。也正因此,不建议访客阅读这些啰嗦的文章。</p><p><del>（update:2022.2.16:反正现在也看不到了乙嘻嘻)</del></p><h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><h3 id="算法竞赛题解-资料-分析"><a href="#算法竞赛题解-资料-分析" class="headerlink" title="算法竞赛题解-资料-分析"></a>算法竞赛题解-资料-分析</h3><p>本博客中会有少量关于信息竞赛的资料，如果您对此感兴趣，可以阅读它们</p><h3 id="高中常规课程学习笔记"><a href="#高中常规课程学习笔记" class="headerlink" title="高中常规课程学习笔记"></a>高中常规课程学习笔记</h3><p>这个版块的文章应该会集中出现在2019年10月份,因为这个月是能够同时接触到常规学习和电脑的少有的时段(说实话没啥好看的)</p><h3 id="一些其他内容的学习笔记"><a href="#一些其他内容的学习笔记" class="headerlink" title="一些其他内容的学习笔记"></a>一些其他内容的学习笔记</h3><p>学不可以已。这一部分的内容是本博客的重点。</p><p>这里学习的笔记可能比较杂，但会尽量分类清晰，便于查找。</p><h2 id="阅读，观影笔记"><a href="#阅读，观影笔记" class="headerlink" title="阅读，观影笔记"></a>阅读，观影笔记</h2><p>顾名思义。</p><p>个人认为这是很重要的事情。</p><h2 id="随笔集"><a href="#随笔集" class="headerlink" title="随笔集"></a>随笔集</h2><p>随笔这个东西很有趣。</p><p>高中时随笔是向着语文素养前进的，但是离开了学校，并不意味着随笔就失去了意义。毕竟写随笔，不仅仅是一种功利性的素养培养，更是一种消遣，一种兴趣，一种发泄的方式，等等。</p><p><del>本文中会有选录的部分高中时期的随笔，包括作业随笔，课外随笔，也会有高中后写的随笔。这个事情还是很有意思的，应该会当作兴趣继续写下去。</del></p><p><del>需要提醒的是，这些随笔以及评论仅仅代表本人高中时期观点，并且有部分是有较大争议的，因此如果要浏览，在阅读的时候请多加留心，多多包涵。</del></p><p><del>还有，鉴于这些文章字数过多，我使用了手写字迹识别软件，而本人的字又写的丑陋，因此即使我花了很多时间订正，文章中也难免会出现一些别字，导致文章句读不通，难以理解，也还请多多包涵。</del></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>关于一些问题做一些说明。</p><h3 id="密码问题"><a href="#密码问题" class="headerlink" title="密码问题"></a>密码问题</h3><p><del>考虑到一些因素，本博客部分文章设置了密码。如果有意愿浏览，请联系我。</del><br>update：2022.2.16:密码统一为123456</p><h3 id="本博客的搭建"><a href="#本博客的搭建" class="headerlink" title="本博客的搭建"></a>本博客的搭建</h3><p>用hexo搭建，butterfly主题。</p><p>搭建网站比较容易上手，但美化网站的确需要比较丰富的前端的经验，包括css，html等。不过学无止境嘛，技多不压身，学一下挺有意思的。</p><p><strong>以后还会加入更多版块</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>物理常规课基础补救资料</title>
      <link href="/2021/06/16/%E7%89%A9%E7%90%86%E5%B8%B8%E8%A7%84%E8%AF%BE%E5%9F%BA%E7%A1%80%E8%A1%A5%E6%95%91%E8%B5%84%E6%96%99/"/>
      <url>/2021/06/16/%E7%89%A9%E7%90%86%E5%B8%B8%E8%A7%84%E8%AF%BE%E5%9F%BA%E7%A1%80%E8%A1%A5%E6%95%91%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h1 id="电场强度和电场线"><a href="#电场强度和电场线" class="headerlink" title="电场强度和电场线"></a>电场强度和电场线</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>电场</li></ul><p>电荷的周围存在电场,场是物质的一种存在形式</p><ul><li>电场强度</li></ul><ol><li>检验电荷</li></ol><p>用来检验电场是否存在及其强弱分布情况的电荷,特点是体积小,电荷量小,不会对研究造成任何影响</p><ol start="2"><li>场源电荷</li></ol><p>被检验的电场是由电荷Q所激发的,则电荷Q称为场源电荷</p><ol start="3"><li>电场强度</li></ol><p>比值定义:$E=\frac{F}{q}$,单位$V$/$m$($N$/$C$)</p><p>方向:<strong>为该点正电荷受到的电场力方向</strong></p><p>点电荷的电场强度:$E=\frac{F}{q}=\frac{\frac{kQq}{r^2}}{q}=\frac{kQ}{r^2}$</p><p>电场强度的叠加:根据电场强度的矢量性,电场强度可以根据平行四边形法则进行叠加</p><p><strong>均匀带电体(或球壳)外某点电场强度的计算:可以用公式</strong>$\frac{kQ}{r^2}$<strong>,r是球心到该点的距离,Q为整个球体的带电量(这个比较神奇,深层次原理我也不知道..)</strong></p><ul><li>电场力</li></ul><p>由电场强度的定义式可以导出电场力的公式之一:$F=Eq$</p><ul><li>电场线</li></ul><p>法拉第首先引入电场线这个概念来描述电场的性质</p><p>电场线的性质:</p><ol><li><p>曲线上任意一点的切线方向和其场强方向一致</p></li><li><p>电场强度较大的地方电场线密集,较小的地方电场线稀疏</p></li><li><p>电场线并不实际存在,且分布于整个立体空间内</p></li></ol><p>常见的电场线:</p><ol><li><p>单个正电荷为场源电荷:电场线发散状</p></li><li><p>单个负电荷为场源电荷:电场线汇聚状</p></li><li><p>两个等电量同种电荷为场源电荷:电场线相斥状</p></li><li><p>两个等电量异种电荷为场源电荷:电场线相吸状</p></li><li><p>匀强电场平行线状</p></li></ol><ul><li>匀强电场</li></ul><p>各个点的电场强度相等的电场叫做匀强电场</p><p>特点:</p><ol><li><p>电场强度方向处处相同且大小处处相等,所以电场线是等距平行线</p></li><li><p>带电粒子在匀强电场里受到恒定的电场力作用</p></li></ol><h2 id="题型总结"><a href="#题型总结" class="headerlink" title="题型总结"></a>题型总结</h2><h3 id="求解电场强度"><a href="#求解电场强度" class="headerlink" title="求解电场强度"></a>求解电场强度</h3><h4 id="直接求解"><a href="#直接求解" class="headerlink" title="直接求解"></a>直接求解</h4><p>对于点电荷,$E=\frac{F}{q}$和$E=\frac{kQ}{r^2}$都是可以使用的</p><p>对于任意电荷,只能够用定义式,即$E=\frac{F}{q}$</p><h4 id="利用场的叠加原理"><a href="#利用场的叠加原理" class="headerlink" title="利用场的叠加原理"></a>利用场的叠加原理</h4><p>这种方法的使用特征是:<strong>当带电体不能够看做点电荷的时候</strong>,核心思想就是使用微元法来解决不能够看做点电荷的问题,比如:</p><p><img src="https://picflow.koolearn.com/upload/papers//20140824/201408241444308821462.png"></p><p>如图所示，一个均匀的带电圆环，带电荷量为＋Q，半径为R，放在绝缘水平桌面上．圆心为O点，过O点作一竖直线，在此线上取一点A，使A到O点的距离为R，在A点放一检验电荷＋q，则＋q在A点所受的电场力为?</p><p>解:</p><p>取环上长度为$\triangle x$的一段,则其带电量为$\triangle Q=Q\times \frac{\triangle x}{2\pi R}$,对A的库仑力为$F=\frac{k\triangle Q q}{(\sqrt {2}R)^2}=Q\times \frac{\triangle x}{2\pi R}\times \frac{k q}{(\sqrt {2}R)^2}=\frac{Q\triangle xkq}{4\pi R^3}$</p><p>接下来考虑所有的长度为$\triangle x$的一段对A的影响:根据对称性,水平方向上的分力抵消;竖直方向上:</p><p>$F_y=\sum F_icos\frac{\pi}{4}=\frac{2\pi R}{\triangle x}\times Fcos\frac{\pi}{4}=\frac{2\pi R}{\triangle x}\times \frac{Q\triangle xkq}{4\pi R^3}\times \frac{\sqrt2}{2}=\frac{\sqrt 2kQq}{4R^2}$</p><p>因此大小为$\frac{\sqrt 2kQq}{4R^2}$,方向竖直向上</p><h4 id="利用对称法求解"><a href="#利用对称法求解" class="headerlink" title="利用对称法求解"></a>利用对称法求解</h4><p>这种方法的特征特别明显:<strong>电荷的分布具有对称性的时候</strong>(<del>书上说的</del>)</p><p>具体做法是:<strong>巧妙而合适的假设放置额外电荷,或将电荷巧妙的分割,是问题简化而求的未知的电场强度</strong>(<del>也是书上说的哈哈</del>)</p><p>例题:</p><p><img src="http://img.zuoyebang.cc/zyb_b0b18eb651efdf17f5feeb6fedbdce36.jpg"></p><p>均匀带电的球壳在球外空间产生的电场等效于电荷集中于球心处产生的电场.如图所示，在半球面AB上均匀分布正电荷，总电荷量为q,球面半径为r,CD 为通过半球顶点与球心 O 的轴线，在轴线上有 M ,N 两点,OM＝ON=2r.已知 M 点的场强大小为 E,则 N 点的场强大小为?</p><p>解:</p><p>一个完整球壳对N点的场强大小为$E=\frac{2kq}{(2r)^2}=\frac{kq}{2r^2}$</p><p>而半个球壳对M的场强大小为E,也就是对N点的场强大小为E,且两个球壳在电场上等价,因此半个球壳对N的场强大小为$\frac{kq}{2r^2}-E$</p><h4 id="利用电场强度和电势差的关系求解"><a href="#利用电场强度和电势差的关系求解" class="headerlink" title="利用电场强度和电势差的关系求解"></a>利用电场强度和电势差的关系求解</h4><p>留坑待补(可能我不会补了吧~~)</p><h3 id="电场线"><a href="#电场线" class="headerlink" title="电场线"></a>电场线</h3><h4 id="由电场线和运动轨迹判断带电粒子的运动情况"><a href="#由电场线和运动轨迹判断带电粒子的运动情况" class="headerlink" title="由电场线和运动轨迹判断带电粒子的运动情况"></a>由电场线和运动轨迹判断带电粒子的运动情况</h4><p>这种题型需要注意两点</p><ul><li><p>做曲线运动的粒子所受合外力方向指向曲线凹侧</p></li><li><p>粒子的速度沿着轨迹的切线方向</p></li></ul><h3 id="两个等量电荷电场"><a href="#两个等量电荷电场" class="headerlink" title="两个等量电荷电场"></a>两个等量电荷电场</h3><p>分类讨论可得,两个等量电荷电场有两种情况:两个同种电荷,两个异种电荷(以下简称等量同种,等量异种)</p><p>这个东西需要掌握点的主要为:</p><ul><li><p>场强的极值</p></li><li><p>中垂线(面)上场强的变化规律</p></li></ul><h4 id="等量异种"><a href="#等量异种" class="headerlink" title="等量异种"></a>等量异种</h4><p><img src="https://www.dgzj.com/uploads/allimg/180312/1TH13330-1.jpg"></p><ul><li>电场极值</li></ul><p>电场在连线中点上场强最小,越靠近点电荷场强越强,可以证明以下(<del>不知道这种证法算不算伪证</del>):</p><p>设两端点电荷电荷量的绝对值为Q,连线上任意一点电荷量为q(假设是正电荷,负电荷为这种情况的对称情况,不消讨论),q和左边的电荷相距$l_1$,和右边的电荷相距$l_2$;</p><p>则q的场强为$E=\frac{kqQ}{l_1^2}+\frac{kqQ}{l_2^2}=kqQ(\frac{1}{l_1^2}+\frac{1}{l_2^2})$</p><p>根据基本不等式,$\frac{1}{l_1^2}+\frac{1}{l_2^2}&gt;=2\sqrt{\frac{1}{l_1^2l_2^2}}=\frac{2}{l_1l_2}$,当且仅当$l_1=l_2$的时候有最小值$\frac{2}{l_1l_2}$</p><p>得证.</p><ul><li>中垂线(面)上场强的变化规律</li></ul><p>在中垂线(面)上场强方向不变,场强大小在O点最大,且向两边对称递减</p><h3 id="等量同种"><a href="#等量同种" class="headerlink" title="等量同种"></a>等量同种</h3><p><img src="https://www.dgzj.com/uploads/allimg/180312/1TH15248-0.jpg"></p><ul><li>电场极值</li></ul><p>O点无电场外,其他点都有电场</p><p>中垂线上的最大场强比较神奇:</p><p><img src="https://i.loli.net/2019/10/23/9RsnwM6SLBpZiNy.png" alt="无标题.png"></p><p>设MN=2L</p><p>于是$E_m=E_n=\frac{kQ}{(\frac{L}{cos\theta})^2}$,P点的合场强$E_p=2E_msin\theta=\frac{2kQcos^2\theta sin\theta}{L^2}$</p><p>当$2cos^2\theta sin\theta$最大的时候$E_p$最大</p><p>这时有一个神奇的不等式:$abc&lt;=(\frac{a+b+c}{3})^3$(暂时还没有想到怎么去证明这个不等式)</p><blockquote><p>update 2019年10月24日10:04:35</p></blockquote><p>今天在听微积分课的时候听到了这个不等式,其实它叫做平均值不等式,用自然语言描述就是算术平均值不小于其几何平均值,即</p><p>$$\sqrt[n]{\prod_{i=1}^{n}x_i}&lt;=\frac{\sum_{i=1}^{n}x_i}{n}$$</p><p>但还是没有讲到怎么证明这个不等式…..</p><p>因此$2(cos^2\theta sin\theta)=(1-sin^2\theta)(1-sin^2\theta)2sin^2\theta&lt;=(\frac{2}{3})^3$</p><p>当$1-sin^2\theta=2sin^2\theta$,也就是$sin\theta=\frac{\sqrt3}{3}$时$E_p$最大,等于$\frac{4\sqrt3 kQ}{9L^2}$</p><ul><li>中垂线(面)上场强的变化规律</li></ul><p>场强方向总**沿面(线)**远离O(等量正电荷)或指向O(等量负电荷),且从O点到无穷远,电场线先变密后变疏,场强先变强后变弱</p><h3 id="叠加场"><a href="#叠加场" class="headerlink" title="叠加场"></a>叠加场</h3><p>这个方法的意思就是利用等效原理将多个场的问题转化为一个场的问题.一般来讲就是把电场和重力场转化为一个等效重力场(记得我上个学期听到过这种方法,当时叫的是<strong>等效重力法</strong>)</p><p>使用的特征就是<strong>当场的力的形式不发生改变的时候</strong>,说白了就是场力方向不随位置改变而改变,对应到电场里面就是匀强电场了</p><p><del>例题就懒得给了</del></p><h1 id="电荷和电荷守恒定律"><a href="#电荷和电荷守恒定律" class="headerlink" title="电荷和电荷守恒定律"></a>电荷和电荷守恒定律</h1><h2 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h2><p>两种电荷:正电荷,负电荷(丝绸摩擦过的玻璃棒是正电荷,毛皮摩擦后的橡胶棒是负电荷)</p><p>电荷间作用规律:同性相斥异性相吸</p><p>电荷量:电荷的多少,单位是库伦,简称库,$C$($1μC=10^{-6}C \ 1nC=10^{-9}C$)</p><p>元电荷:电子带的电荷量,也是最小的电荷量,称作e</p><p>比荷:带电体的电荷量和其质量之比(电子的比荷为$\frac{e}{m_e}=\frac{1.60\times 10^{-19}C}{9.1\times 10^{-31}kg}=1.76\times 10^{11}C$/$kg$)</p><p>电荷守恒定律:电荷既不会创生,也不会消灭,只能转移,总量不变</p><p>起电方式:摩擦起电,感应起电,接触起电</p><p>验电器:注意其结构和原理(具体信息略)</p><h2 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h2><p>这节比较基础,稍稍麻烦一点的题型只有一个,就是关于各种起电方式的相关问题.这个…..不是重点,略.</p><p>end</p><h1 id="库仑定律"><a href="#库仑定律" class="headerlink" title="库仑定律"></a>库仑定律</h1><h2 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="库仑定律-1"><a href="#库仑定律-1" class="headerlink" title="库仑定律"></a>库仑定律</h3><p>$$F=k\frac{Q_1Q_2}{r^2}(平方反比律)$$</p><ul><li><p>适用条件:真空中的<strong>点电荷</strong></p></li><li><p>静电力常量:$k=9.0\times 10^9 \ Nm^2$/$C^2$</p></li><li><p>计算的时候不需要带符号</p></li><li><p>库仑力具有力的一切特性</p></li></ul><h2 id="题型-1"><a href="#题型-1" class="headerlink" title="题型"></a>题型</h2><p>本节有几个题型:</p><ul><li>经典动力学问题</li></ul><p>解决动力学问题的基本思路不变</p><ol><li><p>明确研究对象</p></li><li><p>受力分析,运动分析</p></li><li><p>列方程</p></li><li><p>求解方程</p></li></ol><p>相关的受力分析就不再展开讲解了,</p><ul><li>三个自由点电荷的平衡问题</li></ul><p>关键是认识到”三点共线,两同夹异,两大夹小,近小远大”规律即可</p><ul><li>利用割补法等方式等效求解库仑力</li></ul><p>其实就是运用等效的思想,将受力状态相同的状态等效为另外一个相同的状态,如:</p><p><img src="https://i.loli.net/2019/10/23/S6VC4ncgzG3evtA.png" alt="无标题.png"></p><p>如图,求中间电荷量为$+q$的点电荷所受库仑力</p><p>由于5个电荷量为$+Q$的电荷对中心点电荷库仑力为0,因此上面这种状态可以看成是5个电荷量为$+Q$的电荷中的一个电荷上加了$-4Q$的点电荷,这样就等价于求$-4Q$的点电荷对对中心点电荷的库仑力,根据库仑定律:$F=\frac{4kQq}{r^2}$</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 物理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>化学常规课基础补救资料</title>
      <link href="/2021/06/16/%E5%8C%96%E5%AD%A6%E5%B8%B8%E8%A7%84%E8%AF%BE%E5%9F%BA%E7%A1%80%E8%A1%A5%E6%95%91%E8%B5%84%E6%96%99/"/>
      <url>/2021/06/16/%E5%8C%96%E5%AD%A6%E5%B8%B8%E8%A7%84%E8%AF%BE%E5%9F%BA%E7%A1%80%E8%A1%A5%E6%95%91%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<h1 id="分子的立体构型"><a href="#分子的立体构型" class="headerlink" title="分子的立体构型"></a>分子的立体构型</h1><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2019/10/13/yP2XcDwuzClK7sW.png" alt="化学选修3-分子的立体构型.png"></p><h2 id="费曼技巧测试"><a href="#费曼技巧测试" class="headerlink" title="费曼技巧测试"></a>费曼技巧测试</h2><p>本节讲分子的立体构型,首先是列举了一些常见的立体构型:<strong>直线型</strong>,$CO_2$,<strong>V形</strong>,$H_2O$,<strong>平面正三角形</strong>,$BF_3$,<strong>三角锥形</strong>,$NH_3$,<strong>正四面体形</strong>,$CH_4$,$P_4(白磷)$</p><p>然后讲了两种分子立体结构的判断理论:VSEPR理论(价层电子互斥理论)和杂化轨道理论</p><p>VSEPR理论认为,<strong>分子的立体构型</strong>由<strong>价电子空间构型</strong>决定,而价电子空间构型是可以预测的,因此分子的立体构型是可以预测的.具体的预测方法也很简单.本质是把中心原子的价电子空间构型预测出来,然后考虑上中心原子上的孤对电子的影响,从而得到分子的立体构型,如:</p><ul><li>$NH_3$的立体构型的预测:氮元素最外层有5个电子,而一个氢元素最多容纳1个电子,3个氢元素和中心氮元素形成3个$σ$键,因此氮元素最外层上有$3+\frac{5-3}{2}=4$个电子对,而只有3个氢元素,因此有一对孤对电子,而这一对孤对电子对其他的氢原子有排斥作用,因此$NH_3$的分子立体构型是三角锥形</li></ul><p>杂化轨道理论是鲍林提出的一种为了解释某些分子的立体构型的理论.其实上面的理论比较完善,但是有一点不严谨:</p><p>当分析到$CH_4$这种物质的时候,发现碳元素的核外电子排布式是$1s^22s^22p^2$,最层只有两个孤对电子($2p_x,2p_y$),但是却有4个氢元素和碳元素成了键.众所周知,成键的先要条件是有足够的孤对电子,因此鲍林提出一种理论,认为碳原子的$2s,2p$轨道融合成了4个相同的轨道,每个轨道中一个电子,这样就可以和4个氢元素结合形成4个键参数完全相等的碳氢键,这是我们把那4个新轨道叫做杂化轨道,把这种轨道杂化方式叫做$sp^3$杂化.除开$sp^3$杂化之外,还有$sp^2 \ sp$杂化,s的指数加上p的指数就等于杂化轨道数</p><p>杂化轨道理论同样可以预测分子的立体构型,思路和VSEPR非常的相像,即先预测出中心原子的杂化轨道空间构型,然后在考虑上孤对电子的影响从而得到分子的立体构型,for example,$H_2O$,中心原子是氧原子,要计算轨道数,只需要把和中心原子相邻的原子数和中心原子上的孤对电子数相加即可,因为杂化轨道只用来容纳未成对电子和$σ$键,因此水的轨道数$=2+\frac{6-2}{2}=4$,而只有两个氢原子和氧结合,因此还留了两个空轨道容纳孤对电子,因此是V形</p><p>最后提到了一个配合物理论,<strong>这是我没有怎么搞懂的东西,具体是不知道到底要考什么</strong>,我现在学到的东西也就是一些概念和两个方程式($[Cu(NH_4)]^{2+}$,还有个什么也忘了..配合物这部分真的学的糊涂),因此这一部分后面再update.</p><p>update 2019年10月13日21:03:26</p><p>再次整合了一下配合物的相关知识点,整合到的内容如下:</p><p>配合物的定义,即由提供的孤对电子的<strong>配体</strong>和接受孤对电子的<strong>中心离子或原子</strong>以<strong>配位键</strong>结合而形成的化合物,配位键是指一种特殊的共价键,孤电子对由一个原子单方面提供,配体是指和中心离子或原子直接结合,给予中心离子或原子成对电子的分子或离子.配合物的结构分为内界和外界,内界就是配体部分,一般不会参与反应,外界是非配体部分,优先参与反应,还有一个基本概念叫做配位数,即配体的个数,如果有多种配体,应该把他们加在一起得到配位数</p><p>经典的配合物的应用有三个:</p><ul><li><p>硫酸铜和氨水反应:$CuSO_4+2NH_3·H_2O=Cu(OH)_2+(NH_4)_2SO_4$,继续滴加氨水得到$Cu(OH)_2+4NH_3·H_2O=[Cu(NH_3)_4]^{2+}+2OH^{-}+4H_2O$</p></li><li><p>检验三价铁:$Fe^{3+}+SCN^{-}=[Fe(SCN)]^{3+}$</p></li><li><p>银氨溶液的制备:$AgNO_3+NH_3·H_2O=AgOH+NH_4NO_3$,继续滴加氨水得到$AgOH+2NH_4OH=[Ag(NH_3)_2]^{+}+OH^{-}+2H_2O$</p></li></ul><p>此外,配合物还有一些性质:1.配位键的强弱和配体的非金属性相关,非金属性越强,配位键越弱 2.配体失配的顺序也和配体的非金属性相关,非金属性越强,配体越早失配 3.制备配合物的反应都是可逆反应</p><p>关于如何判断分子中是否有配位键,我们从定义入手,找有空轨道的原子和孤对电子的原子,一般来讲是一些经验,<del>多积累?.</del></p><p>end.</p><p>以上这些关于配合物的理论还不能够完全解决教材完全解读上面的所有相关题目,真是很可惜啊,没有人能够给我提供帮助,于是我只有到网上去找相关的资源,这耗费了我大量的时间.希望事情会有好转吧</p><h1 id="分子的性质"><a href="#分子的性质" class="headerlink" title="分子的性质"></a>分子的性质</h1><h2 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2019/10/14/SftaPAVrk2iYxBJ.png" alt="化学选修3-分子的性质.png"></p><h2 id="费曼技巧测试-1"><a href="#费曼技巧测试-1" class="headerlink" title="费曼技巧测试"></a>费曼技巧测试</h2><p>首先是讲极性和非极性.极性共价键和非极性共价键的定义:共用电子对有偏移的是极性共价键,没有偏移的是非极性共价键.一般来讲,判断这两种键的方法就是直接看键两端的原子是否相同,如果相同就说明是非极性共价键,反之是极性共价键.</p><p>了解了极性共价键和非极性共价键后,引入一个极性分子和非极性分子的概念.极性分子的定义是正电中心和负点中心不重合的分子,非极性分子的定义是两个中心重合的分子.判断分子极性的方法如下:分子的极性是各个共价键极性的向量和,如果某个分子里的极性向量和为0,那么为非极性分子,如果极性向量和不为0,那么是极性分子.我们还可以从分子的立体构型来判断,如果分子的立体构型是对称的,那么说明分子是非极性分子,反之极性分子;</p><p>接下来是讲范德华力,范德华力,说白了就是万有引力,只要距离足够近,分子两两之间都存在范德华力.影响范德华力的因素有分子的相对分子质量和分子的极性.范德华力可以影响物质的熔沸点,具体表现为范德华力越大,分子的熔沸点越高.范德华力还可以影响分子在溶剂中的溶解度,范德华力越大,溶解度越大</p><p>之后是氢键,氢键的定义是已经和非金属性很强的原子结合了的氢原子和另一个非金属性很强的原子之间形成的一种相互作用力,可以有趣的理解为由于氢原子的最外层电子有被中心原子抢去的趋势,氢原子和另外一个中心原子达成了使用电子对的口头协议.注意这里的中心原子仅限于$N \ O \ F$元素,因为只有这三种元素才能够让共用电子对偏移到即将被剥夺的地步.氢键也可以影响物质的熔沸点,具体表现是氢键越强,熔沸点越高;当然氢键还可以影响分子在溶剂中的溶解度,如果溶剂和溶质能够形成氢键,那么溶解度增大;氢键还影响了水的密度,因为当水结成冰的时候,由于氢键按照一定的空间构型排列,冰的分子间空隙很大,故密度变小</p><p>后面讲了物质的溶解性,首先讲了相似相溶规律(注意这个仅仅是一个规律,不是一个定理,也就是说有例外):极性溶剂易溶于极性溶质,非极性溶剂易溶于非极性溶质.例外是$CO$等.我们可以用这个规律来解释一些溶解的现象</p><p>相似相溶过后,探讨了影响物质溶解性的因素:1.分子的结构 2.溶剂和溶质是否可反应 3.固体的溶解度和温度一般成正比($Ca(OH)_2$除外) 4.气体的溶解度一般和温度成反比,和压强成正比</p><p>然后引入了手性的概念:一对手性异构体是指一对拥有完全相同的元素种类,个数和排列的但是不能够在空间里重合的分子,<strong>有手性异构体的分子叫做手性分子(这个概念之前还打掉了)</strong>,具体的判断方式就是从定义出发了.接下来讲到一种特殊的手性分子:手性碳原子,定义是四个与其相连的基团都互不相同的碳原子,在有机化学里面,判断一个有机物是否是手性分子,不仅仅可以从定义出发,还可以数手性碳原子的个数:如果有一个手性碳原子,那么就是手性分子,如果有两个就不一定了.</p><p>最后是讨论了无机含氧酸的酸性.首先解释了无机含氧酸显酸性的原因:其中含有$OH^{-}$,$OH^{-}$在水的作用下可以电离出$H^{+}$从而显酸性.无机含氧酸可以写成如下通式:$(HO)_mRO_n$,对于同一个成酸元素$R$来讲,其化合价越高,对应酸的酸性越强.而一般来讲,通式中的n越大(其实就是非羟基氧的个数),对应的酸酸性越强,这是因为n越大,R的正电性越大,因此电子就越偏向R,整个酸就越容易电离出氢离子</p><p>end.</p><h1 id="分子晶体和原子晶体"><a href="#分子晶体和原子晶体" class="headerlink" title="分子晶体和原子晶体"></a>分子晶体和原子晶体</h1><h2 id="思维导图-2"><a href="#思维导图-2" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2019/10/16/OdG6ESKFicYVhrU.png" alt="化学选修3-分子晶体和原子晶体.png"></p><h2 id="费曼技巧测试-2"><a href="#费曼技巧测试-2" class="headerlink" title="费曼技巧测试"></a>费曼技巧测试</h2><p>首先是讲了分子晶体.分子晶体是仅由分子构成的晶体,分子间的作用力是范德华力,分子内部的作用力一般是共价键(稀有气体没有).常见的分子晶体一般有:所有的非金属氢化物,大部分非金属单质,部分非金属氧化物,大部分的酸和几乎所有的有机物.由于分子晶体是由范德华力作用的,因此分子晶体熔沸点都不高,容易升华,硬度小,而且基本不能够导电,因为没有自由移动的电子,而且遵循相似相溶原理.</p><p>分子晶体的组成方式有两种:密堆积和非密堆积.密堆积是指每个分子都有12个紧邻的分子,这种分子晶体里面一般存在的只有范德华力,另一种非密堆积就是指分子紧邻的分子数少于12个,因此这种分子晶体里面的力除了范德华力之外还有氢键.</p><p>典型的非密堆积分子晶体就是冰晶体.冰晶体的结构是由以一个水分子为中心,四个水分子为顶角的正四面体结构为基础而延伸开来构成的空间网状结构,冰晶体的特点就是,由于氢键,密度小于水,且硬度也比较小.典型的密堆积的分子晶体就是干冰晶体.干冰晶体的晶胞呈现面心立方形,每个顶点有一个二氧化碳分子,每个面上也有一个二氧化碳分子,每个二氧化碳分子和其他12个二氧化碳分子等距离相邻.由于干冰晶体是密堆积,因此密度比冰大,但是也很小,而且硬度,熔沸点都不高</p><p>然后引入原子晶体,原子晶体是指由原子构成的,共价键作用的晶体,微粒子间的作用很显然是共价键,常见的原子晶体一般有:一部分非金属单质和一些非金属化合物(说了和没说一样啊),还有一个特例是一个金属氧化物:$α$形氧化铝.共价键一般很强,因此原子晶体一般硬度大,熔沸点高达上千摄氏度,且不溶于常见溶剂(具体溶于什么我也不晓得)</p><p>常见的原子晶体有两种:金刚石和二氧化硅</p><p>金刚石中,每一个碳原子和其他四个碳原子成键,是$sp^3$杂化,4个碳原子成正4面体形,金刚石按照这种基本形式展开成为一个网状结构(也就是很多地方说的<strong>巨分子</strong>),金刚石中,一个$C-C$键分别属于两个正四面体结构,而一个碳原子分别和其他4个碳原子成键,因此一个碳均摊下来形成2根$C-C$键</p><p>(思考:这里提到了均摊法,而之前的均摊法是用在晶胞中的均摊法,这里的均摊法是用在正四面体结构上的,但是并没有详尽关于均摊法使用对象,也就是基本单位(晶胞,正四面体,或是其他什么乱七八糟的东西)的定义,所有应该怎样去理解这个现象,难道是因为无论怎样定义这个基本单位,计算出来的分子式都是一样的吗?诶好像有理解这个问题的思路了,也就是说,基本单位的定义就是:整个晶体是这个基本单位按照一定规律重复得到的结构,只要满足这个定义,基本单位怎么定义都是可以的,这样理解不知道对不对)</p><p>金刚石中还有一种基本单位叫做6碳环,也就是6个碳组成的一个环,这6个碳中的每一个又被其他的12个6碳环共用,因此一个6碳环均摊下来相当于是只有$6\times \frac{1}{12}=\frac{1}{2}$个碳原子</p><p>介绍完金刚石的结构后我们介绍一下金刚石的晶胞:金刚石的晶胞是面心正六边形结构,有6个碳原子在面心,8个碳原子在顶点,4个在体内,均摊下来有8个碳原子</p><p>除开金刚石外,还有一种原子晶体叫做二氧化硅,每一个硅原子和4个氧原子结合,构成正四面体结构,键角109度28分,均摊下来每个四面体内氧原子个数和硅原子个数比为2:1,因此二氧化硅才叫$二$氧化$(一)$硅..</p><p>二氧化硅也有类似于金刚石的最小环结构,但和金刚石不同的是,二氧化硅的最小环结构是有12个原子的,6个$Si$6个$O$;二氧化硅中每个$Si-C$键不发生共用,而一个$Si$元素一般会和4个氧元素成键,因此在$n \ mol \ SiO_2$晶体中一般含有$4n \ mol \ Si-C$键</p><p>(说实话我感觉这一节的主要知识记忆的不牢固,这次费曼技巧都进行的非常卡顿)</p><p>接下来是一些关于晶体硬度和熔沸点判断的技巧性知识</p><p>首先来讲硬度,对于结构相似的原子晶体来讲,其原子半径越小,共价键就越稳定,硬度相应越大</p><p>接下来是熔沸点.如果比较分子晶体和原子晶体的熔沸点的话,显然分子晶体要低得多.如果比较两种分子晶体的熔沸点大小的话,考虑分析分子间的范德华力:对于结构相似的分子,相对分子质量大的熔沸点高,因为范德华力大;对于结构不相似但是相对分子质量相近的,分子极性越大,熔沸点越高,原因同理.如果这两个不能分析,那么考虑如果分子间有氢键,那么熔沸点反常升高;在有机化学里面,碳的个数越多,熔沸点高,在同分异构体中,支链越少,熔沸点越高.如果比较原子晶体的话,还是比较原子的半径大小,和硬度相似</p><p>end</p><p>#共价键</p><p>(DMR 2019.10.11)</p><h2 id="思维导图-3"><a href="#思维导图-3" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2019/10/11/9jwzICRxDWtJpa8.png" alt="化学选修3-共价键.png"></p><h2 id="费曼技巧测试-3"><a href="#费曼技巧测试-3" class="headerlink" title="费曼技巧测试"></a>费曼技巧测试</h2><p>上午看了共价键一节</p><p>这一节主要讲了化学键中的共价键,既然这样,那就先讲一下化学键是什么东西.化学键就是原子之间相互结合而产生的作用力,化学键一般分两种:离子键和共价键(还有一个配位键我现在还没有学到),离子键比共价键稳定,判断两个元素成键的类型可以用电负性差值的大小来判断,当然也可以粗糙的用成键元素的金属和非金属性来判断,只是要记住一个特例,$AlCl_3$</p><p>化学键中的离子键不是今天研究的重点,今天的重点是共价键,共价键的定义是:成键原子之间<strong>共用</strong>电子对而形成的作用力,共价键有两个特性:方向性和饱和性,方向性是指有一些共价键是有方向的,饱和性是指每个原子的成键总数或以单键相连的原子数目是一定的</p><p>接下来是讲共价键的分类了.我们根据共价键成键轨道和形式的不同将共价键分成两种:$σ键$和$π键$:</p><p>$σ键$是轨道头碰头形成的共价键,而$π键$是轨道肩并肩形成的共价键,$σ键$,按照成键的轨道不同,也可以详细的分为$s-s \ σ键$,$s-p \ σ键$,$p-p \ σ键$,$π键$一般只见到$p-p \ π键$,由于$σ键$是头碰头形成的,电子云重叠的比较多,因此比较稳定,相对应的$π键$就比较不稳定了,而根据共价键的方向性,两个原子间能且只能形成一个$σ键$,其他的都是形成的$π键$,且$σ键$首先形成,还值得一提的是,这两种键都是有对称性的,区别在于$σ键$有轴对称和镜面对称,$π键$只有镜面对称</p><p>共价键的分类之后是共价键的参数:键长,键能,键角</p><p>键长是指成键原子原子核之间的距离,受成键原子核电荷数和共用电子对个数影响,且一般来讲,键长越长,共价键越不稳定,越容易断,且和分子的空间构型有一定关系</p><p>键能就是气态基态原子形成1mol化学键释放的最低能量,单位是kJ/mol,键能受键长的影响,键能和很多东西都有关,一般常见的是:键能越大,共价键越稳定,化合物越稳定,越不活泼</p><p>键角一般只考虑它和分子空间构型的关系</p><p>以上是本章的主要内容,还有一个等电子体简单提一下:</p><ul><li>等电子原理,指原子个数相等且核外电子也相等的分子具有相同的化学键性质和物理性质,但化学性质不保证相似</li></ul><ul><li>等电子体,即满足等电子原理的分子,这些分子之间有相似的性质</li></ul><p>这个东西有什么用呢?首先是用来判断分子的立体构型,即等电子体的分子具有相似的立体构型,其次是制造新材料,利用他们相似的物理性质,这第二点作为了解就好吧</p><h1 id="金属晶体"><a href="#金属晶体" class="headerlink" title="金属晶体"></a>金属晶体</h1><h2 id="思维导图-4"><a href="#思维导图-4" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2019/10/18/eHM5T8hwC2WxoFY.png" alt="化学选修3-金属晶体.png"></p><h2 id="费曼技巧测试-4"><a href="#费曼技巧测试-4" class="headerlink" title="费曼技巧测试"></a>费曼技巧测试</h2><p>首先引入金属键的概念:金属键就是指金属阳离子和电子的强烈相互作用.本质是电子气和金属离子之间的相互作用.电子气:金属晶体中的所有金属阳离子失去电子,从而晶体中的电子为所有的金属原子所有.就像包围着地球的气体属于大家所有人一样,这种电子气体与金属原子之间形成了非常强烈的相互作用,这种相互作用叫做金属键.</p><p>电子气和金属的大部分性质都是相关联的:金属的导电性是因为电子气和中的电子可以自由移动的缘故,导热性是因为电子气中的电子可以快速的和金属原子碰撞从而传递能量使得整块金属快速的升温到同一温度,有金属光泽是因为电子气可以吸收所有颜色的光,然后快速的放出各种颜色的光,所以一般的金属都显银色.有些金属显特殊的颜色是因为其电子气更偏向于吸收某种颜色的光.而金属有延展性是因为电子气在金属原子中间起到了轴承的作用,因此金属原子在外力挤压下虽然会发生相对移动,但是结构是不会变的,因此具有很好的延展性</p><p>金属键没有方向性和饱和性,且其强弱和原子的半径,单位空间自由电子数,金属阳离子所带电荷数有关</p><p>接下来是金属晶体的概念:金属原子间通过金属键的作用形成的晶体叫做金属晶体.金属晶体中的微粒只有自由电子和金属原子,作用力是金属键</p><p>金属晶体在平面上的堆积方式有两种:密置层和非密置层.密置层就是一个原子周围有6个其他的原子,非密置层就是原子上下左右有其他原子,因此这两种方法的配位数分别是6和4</p><p>金属晶体在三维空间上的堆积方式有4种.</p><p>第一种是简单立方堆积.这种堆积就是很简单的非密置层重叠,很显然可以从其立体结构中提出一个正立方体晶胞,因此这种堆积方式名字叫做简单立方堆积,其空间利用率为52%(计算过程稍后给出),配位数(这里的配位数是指距离一个原子最近的原子个数)为6,均摊下来每个晶胞中有1个原子,一般常见的有钋$Po$元素的晶体按照这种方式堆积</p><p>第二种是体心立方堆积.这种堆积的结构是非密置层交错重叠,可以从中划分出一个体心立方晶胞,因此得名体心立方堆积.空间利用率为68%,配位数为8,均摊下来每个晶胞2个原子,由于所有的碱金属都是这种堆积方式,因此也叫做钾形堆积,除开非金属外,还有$Fe$元素的晶体也按照这种方式堆积</p><p>第三种是六方最密堆积.这种堆积结构难以一言蔽之,自己看图去.画图可得,其中可以划分出一个平行六面体晶胞(注意不是正六面体,夹角是60°和120°),画图可得,这个晶胞的空间利用率为74%,利用率最高,配位数为12,均摊下来每个晶胞中有2个原子,常见的有$Mg \ Zn \ Ti$,因此也叫镁型</p><p>第四种是面心立方最密堆积,结构同样难于一言蔽之,其中可以画出面心立方晶胞,因此得名.这个晶胞的空间利用率和六方最密堆积一样,为74%,因为这两种堆积方式在堆积很多层后基本上没有什么太大的差别(边界除外.在一大块晶体中,中心的结构六方和面心差不多,但是边界上就不一样了,这就是他们两个的晶胞形式不一样的原因),配位数也是12,均摊下来每个晶胞中有4个原子,常见的有$Cu \ Ag \ Au$(都不便宜啊<del>),因此也叫铜型(</del>个人认为应该叫贵型~~)</p><p>后面讲了石墨晶体的一些特点.</p><p>首先是石墨晶体的结构.石墨晶体中碳原子是$sp^2$杂化,和相邻的3个碳原子形成$σ$键.石墨晶体中的基本结构是6碳环,这种6碳环中均摊下来仅有3根$C-C$键,2个碳原子.碳原子是可以形成4根键的,而一个碳原子只和其他三个碳原子形成了键,因此一对孤对电子在垂直于原子平面的方向参与形成了$π$键,因此石墨晶体中有遍布整个原子平面的大$π$键,因此石墨的碳原子层和层之间是有类似于自由电子的东西的.因此,石墨晶体层和层之间是由范德华力维护,同层之间的碳原子之间有共价键和金属键(这里有点不符合逻辑啊,为什么碳原子之间还有金属键啊)</p><p>接下来是石墨晶体的一些性质.石墨晶体的导电和导热性是由于形成大$π$键的电子是可以在层间自由移动的,石墨晶体的润滑性也是因为其层状结构.最后一个性质就是石墨晶体的熔沸点很高,其熔点高于金刚石</p><p>接下来是补充堆积方式的空间利用率的计算:</p><p>设晶胞中原子体积为$V_{a}$,晶胞体积为$V_{b}$,空间利用率为$X$</p><ul><li>立方堆积:</li></ul><p>$V_{a}=1\times \frac{4}{3}π r^3=\frac{4}{3}πr^3$</p><p>$V_{b}=(2r)^3=8r^3$</p><p>$得到X=\frac{V_{a}}{V_{b}}=\frac{π}{6}=0.52333333333333333333333333333333…….$</p><ul><li>体心立方堆积:</li></ul><p>$V_{a}=2\times \frac{4}{3}π r^3=\frac{8}{3}πr^3$</p><p>根据立方体对角线等于4倍原子半径得到:</p><p>$V_{b}=(\frac{4 \sqrt{2}r}{3})^3=\frac{64 \sqrt{3}}{9}r^3$</p><p>$得到X=\frac{V_{a}}{V_{b}}=\frac{\sqrt{3}π}{8}=0.67982994197078433770952268904105…….$</p><ul><li>六方最密堆积</li></ul><p>$V_{a}=4\times \frac{4}{3}π r^3=\frac{16}{3}πr^3$</p><p>设$S$为底面菱形的面积,则$S=2r\times (2r\times sin60°)=2\sqrt3r^2$</p><p>设$H$为平行六面体的高度,根据平行六面体内部原子所处高度为整个六面体高度的一半且和其他的4个底面原子形成正四面体这个条件得到</p><p>$H=2\times(\sqrt{(2r)^2-(\frac{2\sqrt3}{3}r)^2})=\frac{4\sqrt6r}{3}$</p><p>$V_{b}=S\times H=\frac{4\sqrt6r}{3}\times 2\sqrt3r^2=8\sqrt2r^3$</p><p>$得到X=\frac{V_{a}}{V_{b}}=\frac{\frac{π}{3}}{\sqrt2}=0.74010509764191974220621709900308……..$</p><ul><li>面心立方最密堆积</li></ul><p>$V_{a}=4\times \frac{4}{3}π r^3=\frac{16}{3}πr^3$</p><p>$V_{b}=(2\sqrt2r)^3=16\sqrt2r^3$</p><p>$得到X=\frac{V_{a}}{V_{b}}=\frac{\sqrt2π}{6}=0.74010509764191974220621709900308…….$</p><p>end</p><h1 id="晶体常识"><a href="#晶体常识" class="headerlink" title="晶体常识"></a>晶体常识</h1><h2 id="思维导图-5"><a href="#思维导图-5" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2019/10/16/x4wBNsZuzhYGUFM.png" alt="化学选修3-晶体的常识.png"></p><h2 id="费曼技巧测试-5"><a href="#费曼技巧测试-5" class="headerlink" title="费曼技巧测试"></a>费曼技巧测试</h2><p>晶体的常识一节首先引入了晶体的概念:内部微粒(原子,分子,离子)按照某种规律重复排列所构成的固体叫做晶体.且我们根据晶体内部作用力的不同把晶体分为:金属键作用的金属晶体,离子键作用的离子晶体,范德华力作用的分子晶体和共价键作用的原子晶体.</p><p>晶体有一些特殊的性质:1.自范性,即晶体在某些环境下会自动形成具有规则的几何结构的固体. 2.各向异性,即晶体在不同方向显示出来的物理性质(导电性,导热性,光学特性等)不同 3.晶体都有固定的熔沸点 4.晶体可以使得X射线发生衍射(当然具体我也不知道这是个什么鬼东西)</p><p>获得晶体的方法大概有三种:你可以让气态物体直接凝华,也就是让某种气体不经过液态直接凝固成固态,从而得到晶体.你还可以让熔融态物质在恰当的速率下冷却从而得到晶体.还有一种方法是让晶体从溶液中析出,比如你把残缺的$NaCl$晶体放到饱和氯化钠溶液中就可以得到完整的$NaCl$晶体</p><p>为了方便研究晶体的性质,我们引入了一个晶胞的概念.晶胞,就是晶体中的最小单位,整个晶体就是由晶胞重复堆叠而成的.晶胞的结构一般为平行正六面体(不一定是长方体!),典型的晶胞结构可以分为3种:仅在4个顶点有原子的叫做简单立方,在简单立方的基础上体心上还有一个原子的叫做体心立方,在简单立方的基础上在6个面的面心上还有原子的叫做面心立方.<del>但在做题的时候会遇到更加恶心的东西</del></p><p>之后就是本章的计算版块,我们需要用均摊法研究晶体的微粒数,并在此基础上研究晶体的相关物理量:密度,体积,相对分子质量,以至于阿伏伽德罗常数等.</p><p>均摊法就是一个公式:$X=kx$,大写的X是某一个微粒在晶胞中实际占有的个数,小写的x是指由多少个位置相似的微粒,k就是比例常数,代表着此位置上的微粒实际上由几个晶胞共有.假如某晶体的晶胞长成正6棱柱,那么这个晶胞中的顶点上的一个微粒就会被12个晶胞共用,因此$X=1\times\frac{1}{12}=\frac{1}{12}$,也就是说,实际上一个晶胞中仅拥有十二分之一个此微粒.</p><p>关于相关的物理量的计算,一般来讲就按照自己的思路走就可以,但是一般的资料书上会把常问的物理量组合起来写成一个关系式:$a^3ρN_A=xM$,a的立方是晶胞的体积(有时候并不是正方体,因此不能够直接带入a的立方),$ρ$是密度,$N_A$阿伏伽德罗常数,x是一个晶胞中含有的基本粒子的个数,M是基本粒子的相对分子质量,因此就可以根据1摩尔晶胞的质量相等这个等量关系来列出这个式子了,不得不说这是一个快速计算的好方法,听寝室里的同学讲理综的时间非常不够,需要读一遍题就出答案,这个时候也许套公式比自己算要更快一些.当然,套公式和自己算两种方法最后得出的结果理论上来讲是等价的</p><h1 id="离子晶体"><a href="#离子晶体" class="headerlink" title="离子晶体"></a>离子晶体</h1><h2 id="思维导图-6"><a href="#思维导图-6" class="headerlink" title="思维导图"></a>思维导图</h2><p>很可惜的是,我的幕布会员过期了,这也就意味着我不能够导出.png形式的思维导图,看来应该<strong>支持一下开发者了</strong>,就充一个月~~9元不算很贵的啊</p><h2 id="费曼技巧测试-6"><a href="#费曼技巧测试-6" class="headerlink" title="费曼技巧测试"></a>费曼技巧测试</h2><p>首先引入离子键这一概念</p><p>离子键是由于阴阳离子之间的静电作用而形成的一种化学键.要形成离子键,首先要一方原子有很强的得电子能力,另外一方原子有很强的失电子能力.一般来讲,两方原子电负性差值大于1.7就可以认为可以形成离子键.当然有两个特例:$NaH \ KH$,这两个离子晶体内部元素的电负性差的绝对值小于1.7.离子键没有方向性和饱和性,原因很简单,如果空间允许,一块磁铁可以365度无死角的吸引世界上的所有金属.离子键这个概念的意义和前面的金属键等一样,在于衡量离子化合物的稳定性.离子键的强弱和离子的带电数和离子的半径有关,这一点在后面讲晶格能的时候会提到</p><p>接下来是讲离子晶体</p><p>离子晶体就是阴阳离子之间以离子键为相互作用力而形成的晶体.显然,离子化合物之间的作用力是离子键,并且构成其的微粒是阴阳离子.在堆积方式上,由于离子键没有方向性和饱和性,可以把离子晶体看做是不等径圆球的密堆积.</p><p>典型的离子晶体有:$NaCl \ CsCl \ CaF_2$,接下来一一介绍.</p><p>因为氯化钠的晶胞是面心立方+体心,因此$NaCl$中钠离子和氯离子的配位数都是6,而一个钠离子周围和其等距离的钠离子个数为12个.由于钠离子和氯离子在空间中是等效的,因此氯离子周围的等距氯离子也是12个.根据均摊法,一个晶胞中含有4个钠离子,4个氯离子</p><p>$CsCl$的晶胞是体心立方,你可以理解为体心一个$Cl$,面心一个$Cs$,也可以反过来理解,因为在空间中两种离子位置等效.因此两种离子的配位数为8,而一种离子周围和其等距离的同种离子个数为6,均摊下来每个晶胞中1个$Cs$1个$Cl$</p><p>$CaF_2$的晶胞比较神奇,是一个面心立方内部加上8个氟离子,百度百科把这个叫做萤石型结构(不禁想起$Minecraft$里的萤石).大概长这样:</p><p><img src="http://www.hxzxs.cn/uploads/image/20170425/1493087191735628.gif"></p><p>反正一个钙离子的配位数为8,氟离子的配位数为4(这个比例从化学式中也能够看得出来),阴离子$F^-$填充在四面体空隙中,面心立方点阵对角线的$\frac{1}{4}$和$\frac{3}{4}$处,因此$CaF_2$中的最近的钙离子和氟离子之间的距离为$\frac{1}{4}$体对角线长度</p><p>最后引入了晶格能的概念.晶格能的定义是气态离子形成1mol离子晶体释放是能量,单位为千焦每摩尔($kJ$/$mol$),影响晶格能的大小的因素可以用库仑定律来理解:$F=k\frac{Q_1Q_2}{r^2}$,晶格能的大小也就和成键离子的带电荷数的乘积成正比,和其间距离的平方成反比(可以直接理解为和距离成反相关就行,反正不需要定量研究).晶格能影响晶体的物理性质,也就是熔点和硬度.可以用一句话讲清楚他们之间的关系:晶格能越大,离子键越稳定,因此晶体越稳定,表现为硬度越高,熔点越高.</p><h1 id="元素周期律"><a href="#元素周期律" class="headerlink" title="元素周期律"></a>元素周期律</h1><p>(from DMR 2019.10.10)</p><h2 id="思维导图-7"><a href="#思维导图-7" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://i.loli.net/2019/10/10/fSWgA1rxyRsOepD.png" alt="化学选修3-元素周期律.png"></p><h2 id="费曼技巧测试-7"><a href="#费曼技巧测试-7" class="headerlink" title="费曼技巧测试"></a>费曼技巧测试</h2><p>今天的章节是元素周期律</p><p>首先要探讨元素周期表</p><p>元素周期表有7个周期,16个族,18个纵行,这些族分别是$IA \ IIA \ IIIB \ VIB \ VB \ VIB \ VIIB \ VIII \ IB \ IIB \ IIIA \ IVA \ VA \ VIA \ VIIA \ O$</p><p>然后继续对族进行分类,即按照每一主族的最外层电子最后落在的能级分类:</p><p>IA,IIA,s区</p><p>IIIB,VIB,VB,VIB,VIIB,VIII,d区</p><p>IB,IIB,ds区</p><p>IIIA,IVA,VA,VIA,VIIA,O,p区</p><p>这样一来就可以根据元素的价电子排布式来判断元素在元素周期表中的位置了:</p><p>价电子排布:</p><p>$ns^{1,2}$,第n周期第1或2主族</p><p>$(n-1)d^{i}ns^{j},i+j&lt;=7$:第n周期第$i+j$副族</p><p>$(n-1)d^{i}ns^{j},i+j \in [8,10]$:第n周期第VIII族</p><p>$(n-1)d^{10}ns^{1,2}$:第n周期第1或2副族</p><p>$ns^2np^{1,2,3,4,5,6}$:第n周期第1,2,3,4,5主族或O族</p><p>(据说这个O族本来不是零的意思,它是印度语里<strong>轮回</strong>的意思)</p><p>接下来要研究的就是元素周期律了</p><p>元素周期律中主要研究这些问题:</p><ul><li><p>原子半径</p></li><li><p>元素金属/非金属性</p></li><li><p>元素最高价氧化物的水化物的酸碱性</p></li><li><p>元素得失电子能力</p></li></ul><p>上面这些问题在必修阶段(也就是高一的时候)已经详细的研究过了,当然,还不完整,但是基本上足够,一般就按照必修阶段的理论判断</p><p>为了完善这个体系,我们引入两个概念:第一电离能和电负性</p><p>第一电离能:气态基态原子…(诶我记不到这话怎么背的了,抄一段:)<strong>气态电中性基态</strong>原子失去<strong>一个电子</strong>转化为气态基态正离子所需要的<strong>最低能量</strong>叫做<strong>第一</strong>电离能,这个东西其实就是衡量原子失去电子能力的一个指标</p><p><strong>(但是有一个问题啊,第一电离能的使用条件是气态基态原子,但是为什么其他的原子也在使用这个指标呢?其他的原子都成了气态???)</strong></p><p><del>暂且不管这个问题,继续</del></p><p>关于第一电离能的递变趋势有一张表(看来必须要把图片搞上来了)</p><p><img src="https://i.loli.net/2019/10/10/3lLuwm5A6CEgrbY.png" alt="捕获.PNG"></p><p>这张表是需要记忆的,但是记忆也很简单的,大概只需要记住以下两条规律:</p><ul><li><p>同周期(特指短周期)从左往右第一电离能除第2,5个外单调递增</p></li><li><p>同主族从上往下第一电离能单调递减</p></li></ul><p>为什么每一周期第2,5个是例外呢?这是因为洪特规则的特例:每一周期的第2个的价电子排布式是$ns^2$,第3个是$ns^2np^1$,按照洪特规则的特例,$ns^2$比$ns^2np^1$稳定,因此失去一个s上的电子比失去一个p上的电子更耗能量.同理,第5个的价电子排布式是$ns^2np^3$,第6个是$ns^2np^4$,显然,洪特规则告诉我们,半满的相对稳定,因此失去一个半满的p上的电子比失去一个非半满的p电子更耗能量</p><p>掌握了这张表,电离能基本上就ok</p><p>接下来是电负性,它的定义就是:原子对键合电子吸引力大小的标度,本质上就是衡量原子吸引电子能力的大小的一个指标,关于它的大小关系,也有一张表,是鲍林以F元素的电负性为4.0为基准算出来的每一个元素的电负性表,这个表不需要背到数值,只需要记住如下规律即可:</p><ul><li><p>电负性同周期单调递增,同主族单调递减</p></li><li><p>两个元素形成化合物的时候,电负性大的显负价,小的显正价</p></li><li><p>如果两个元素电负性差的绝对值大于1.7,那么他们形成的化合物的化学键一般是离子键,反之是共价键</p></li><li><p>利用电负性可以判断元素的金属性和非金属性,分解线是1.8</p></li></ul><h1 id="原子结构"><a href="#原子结构" class="headerlink" title="原子结构"></a>原子结构</h1><p>(from DMR 2019.10.9)</p><h1 id="思维导图-8"><a href="#思维导图-8" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://i.loli.net/2019/10/09/BbXcNgwnHsd5DWC.png" alt="化学选修3-原子结构.png"></p><h1 id="费曼技巧测试-8"><a href="#费曼技巧测试-8" class="headerlink" title="费曼技巧测试"></a>费曼技巧测试</h1><p>第一章第一节,原子结构,主要是要讲清楚原子核外电子的构成</p><p>首先讲能级和能层</p><p>为了区分不同位置电子的能量大小,我们引入一个<strong>能层</strong>的概念,即把原来的核外电子分为7个能层,分别是K,L,M,N,O,P,Q,可以简单记为从国王到皇后~~</p><p>每一个能层其实就是一层核外电子,这个就相当于我们初中学的那个核外电子排布规律了</p><p>但是注意到每一个能层里面的电子能量还是有很大的差异性,因此我们继续详细探究,把同一个能层分为几个<strong>能级</strong></p><p>具体怎么分呢?</p><p>首先,第i层能层就有i个能级</p><p>然后,一共来讲有6种能级,高中阶段值只讲四种:s p d f</p><p>对于第i层,就有is ip id if能级(但数量要保证合法)</p><p>那么每一个能层就可以分出能级来了:</p><p>K:1s</p><p>L:2s2p</p><p>M:3s3p3d</p><p>N:4s4p4d4f</p><p>…</p><p>但分出了能级有什么用呢?</p><p>在讲用处之前,我们讲一个原子轨道理论</p><p>原子轨道,就是电子在原子核外的一个空间运动状态,而上面我们讲到的每一个能级的一个伸展方向就是一个原子轨道</p><p>原子轨道可以容纳电子,具体来讲,1个s可以容纳2个电子,1个p可以容纳6个电子,1个d可以容纳10个电子,1个f可以容纳14个电子,</p><p>那么这个时候,我们只要知道每一个能层有多少个什么能级,就可以知道每一个能层能够放多少个电子了</p><p>但是核外电子难道就直接按照能层从低到高依次排列嘛???no!</p><p>首先,核外电子的排列需要遵循一个原则:能量最低原则,即先填充能量较低的能层和能级</p><p>而有些能级和能层的能量大小关系不是非常的明确的,比如说吧:3d和4s能级的能量就不是一般想的那样:3d&lt;4s,而是3d&gt;4s,这是科学研究证明过的</p><p>那么到底是怎样排列的呢????这里,为了<strong>方便知识储备不够的高中生学习</strong>,各位化学教授大佬们编写了一张表,取名为构造原理:</p><p><img src="https://i.loli.net/2019/10/09/OKrQwFcSjImTAfH.png" alt="捕获.PNG"></p><p>这张表是什么意思呢?看到那条对角线了吗?我们填充的顺序就是按着那条对角线斜着向上,到头了就返到下一层的对角线开始的地方继续走</p><p>这就是构造原理了</p><p>比如说吧:Fe元素,第26号元素,填充出来的<strong>电子排布式</strong>就是:$1s^2 \ 2s^2 \ 2p^6 \ 3s^2 \ 3p^6 \ 3d^6 \ 4s^2$</p><p>那么如果我要画出电子排布图怎么办?比如一个p能级里面有4个电子,这4个电子又是怎么排的呢???</p><p>这就要引入两个个大佬提出的原理了:泡利原理和洪特规则</p><ul><li><p>泡利原理:一个原子轨道里最多只能容纳两个电子,且自旋方向相反</p></li><li><p>洪特规则:原子核外电子在能量相同的各个轨道上分布时,<strong>电子尽可能占不同的电子轨道,且自旋方向相同</strong>,这样能量最低</p></li></ul><p>那么按照这两个规则,一个p能级里面有4个电子,就相当于是3个原子轨道中有一个是被占满了的,另外两个只有一个电子</p><p>但是,事情还没完,洪特先生发现一些特例不满足他提出的规律:</p><p>当某一能级的电子数为半满,全满或全空的时候,能级能量较低且趋于稳定</p><p>比如铜元素的电子排布式就应该这样写:$1s^2 \ 2s^2 \ 2s^6 \ 3s^2 \ 3s^6 \ 3p^6 \ 3d^{10} \ 4s^1$,而不是$1s^2 \ 2s^2 \ 2s^6 \ 3s^2 \ 3s^6 \ 3p^6 \ 3d^{9} \ 4s^2$</p><p>以上就是本章节最最重要的知识了,感觉还掌握的可以,只是原子轨道和泡利原理和洪特规则掌握的稍显不熟悉</p><p>剩下一点点就是:电子云理论,激发态和光谱,这些比较简单,就不测试了</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 化学 </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 化学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复数</title>
      <link href="/2020/03/02/%E5%A4%8D%E6%95%B0/"/>
      <url>/2020/03/02/%E5%A4%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="复数的概念"><a href="#复数的概念" class="headerlink" title="复数的概念"></a>复数的概念</h1><ul><li><p>引入i满足$i^2=-1$,则$\sqrt{-7}=\sqrt 7 i$</p></li><li><p>通式:$z=a+bi$,其中a为实部,b为虚部</p></li><li><p>复数的分类:当b=0的时候,z为实数,b!=0时,z为虚数,当a=0的时候z为纯虚数</p></li><li><p>两个虚数$a+bi=c+di$相等时,$a=c,b=d$</p></li></ul><h1 id="复数的几何意义"><a href="#复数的几何意义" class="headerlink" title="复数的几何意义"></a>复数的几何意义</h1><p><img src="https://img-blog.csdnimg.cn/20200302210651183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>如图的坐标系叫做复平面直角坐标系,y为虚轴,x为实轴</p></li><li><p>复数$z=a+bi$在复平面坐标中可以用点或向量$(a,b)$表示</p></li><li><p>复数的模:$z=a+bi$的模为$\sqrt{a^2+b^2}$</p></li></ul><h1 id="圆的复数表示"><a href="#圆的复数表示" class="headerlink" title="圆的复数表示"></a>圆的复数表示</h1><p>对于一个复数$z$,式子$|z-(a+bi)|$表示的是复数$z$在复平面上的点到点$(a,b)$的距离(用向量减法即可证明)</p><p>如果有$|z-(a+bi)|=c$,那么这个式子即表示以$(a,b)$为圆心,$c$为半径的圆,$z$所代表的点在圆上</p><h1 id="复数加减法"><a href="#复数加减法" class="headerlink" title="复数加减法"></a>复数加减法</h1><p>实部加实部,虚部加虚部即可</p><p>如:$3i+7-2i+3=i+10$</p><p>这种计算规则决定了如下关系:两个复数$z_1,z_2$所表示的点为$m_1,m_2$,则$\vec{Om_1}+\vec{Om_2}=z_1+z_2$,因为向量加法是x与x相加,y与y相加,复数加法是实加实,虚加虚,正好等价</p><h1 id="复数乘法"><a href="#复数乘法" class="headerlink" title="复数乘法"></a>复数乘法</h1><p>直接按照多项式相乘后展开,然后合并同类项(不要忘了$i^2=-1$)</p><p>如$(1+2i)(3+4i)(-2+i)=-25i$</p><h1 id="共轭复数"><a href="#共轭复数" class="headerlink" title="共轭复数"></a>共轭复数</h1><p>实部相等,虚部互为相反数的两个复数是共轭复数</p><p>$z=a+bi$,则其共轭复数是$\overline{z}=a-bi$</p><p>(其实我们常用的平方差中的两个因式就称作互为共轭式)</p><h2 id="共轭复数的性质"><a href="#共轭复数的性质" class="headerlink" title="共轭复数的性质"></a>共轭复数的性质</h2><p>$|z|=|\overline{z}|=\sqrt{a^2+b^2}$</p><p>$(a+bi)(a-bi)=a^2+b^2$</p><p>$z\times \overline{z}=|z|^2=|\overline{z}|^2$</p><h1 id="复数除法"><a href="#复数除法" class="headerlink" title="复数除法"></a>复数除法</h1><p>使用分母实数化,也就是分数线上下两端同时乘上分母的共轭复数,从而将分母化为常数,转化为加减乘法</p><p>$\frac{7+i}{-3+4i}=\frac{(7+i)(4i-3)}{9+16}=\frac{-17}{25}+\frac{-31}{25}i$</p><h1 id="复数的乘方中的周期现象"><a href="#复数的乘方中的周期现象" class="headerlink" title="复数的乘方中的周期现象"></a>复数的乘方中的周期现象</h1><p>$i=i,i^2=-1,i^3=-i,i^4=1,i^5=i$,因此$i^n$这个数列以4为一个周期.由于这种特殊性质,我们可以借用这种思路来计算一些高次的复数</p><p>求:$(\frac{\sqrt 2}{2}+\frac{\sqrt 2}{2}i)^{2015}$</p><p>列表如图:</p><p><img src="https://img-blog.csdnimg.cn/20200303212521242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>由于$\frac{2015}{8}=251…7$,于是$(\frac{\sqrt 2}{2}+\frac{\sqrt 2}{2}i)^{2015}=\frac{\sqrt 2}{2}-\frac{\sqrt 2}{2}i$</p><h1 id="求复数的模"><a href="#求复数的模" class="headerlink" title="求复数的模"></a>求复数的模</h1><p>有如下两个规律(暂时不知道如何证明):</p><ol><li>两个复数的积的模等于两个复数模的积</li><li>两个复数商的模等于两个复数模的商</li></ol><p>然后可以求解一些较为复杂的复数</p><p><img src="https://img-blog.csdnimg.cn/20200303214337789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="复数与方程"><a href="#复数与方程" class="headerlink" title="复数与方程"></a>复数与方程</h1><p>对于一个实系数方程,如果判别式算出来小于0,那么一定有一对互为共轭复数的根,因为根据韦达定理$x_1x_2$为实数</p><p>如果对于复系数方程,已知有一个实数根,那么可以假设这个根为b,代入原式中,根据整理后的式子的实部虚部都为0得到这个实数根</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数学 </category>
          
          <category> 复数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数列递推:不定点法和特征方程法</title>
      <link href="/2020/03/02/%E6%95%B0%E5%88%97%E9%80%92%E6%8E%A8-%E4%B8%8D%E5%AE%9A%E7%82%B9%E6%B3%95%E5%92%8C%E7%89%B9%E5%BE%81%E6%96%B9%E7%A8%8B%E6%B3%95/"/>
      <url>/2020/03/02/%E6%95%B0%E5%88%97%E9%80%92%E6%8E%A8-%E4%B8%8D%E5%AE%9A%E7%82%B9%E6%B3%95%E5%92%8C%E7%89%B9%E5%BE%81%E6%96%B9%E7%A8%8B%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数列递推形式"><a href="#数列递推形式" class="headerlink" title="数列递推形式"></a>数列递推形式</h1><h2 id="不动点法"><a href="#不动点法" class="headerlink" title="不动点法"></a>不动点法</h2><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><p>分式线性:$a_{n+1}=\frac{pa_n+q}{ra_n+s}$</p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><ul><li><p>不动点:对于如上这个没有初值的数列,当数列中任意一个数取到某一个值$\lambda$的时候,这个数列的每一项都相等,也就是$a_{n+1}=a_n$,这个时候我们把这个$\lambda$叫做不动点</p></li><li><p>当不动点$\lambda_1!=\lambda_2$时,数列$\frac{a_{n}-\lambda_1}{a_{n}-\lambda_2}$是等比数列</p></li><li><p>当$\lambda_1=\lambda_2$时,数列$b_n=\frac{1}{a_n-\lambda}$是等差数列</p></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>核心思想:利用不动点的特殊性质将上式转为等比或等差数列</li></ul><ul><li>推导过程</li></ul><p>假设出我们的参数$\lambda$,接下来我们会证明这样一个性质:</p><blockquote><p>$\lambda$满足<br>$$a_{n+1}-\lambda=\frac{(p-\lambda r)(a_n-\lambda)}{ra_n+s}$$</p></blockquote><p><strong>证明:</strong></p><p>将上式左右两边都减去这个参数得到:</p><p>$$a_{n+1}-\lambda=\frac{pa_n+q}{ra_n+s}-\lambda=\frac{pa_n+q-\lambda ra_n-\lambda s}{ra_n+s}=\frac{(p-\lambda r)a_n+q-\lambda s}{ra_n+s}$$</p><p>如果想要上式的等号左边和等号右边的分子成</p><p>$$a_{n+1}-\lambda=\frac{(p-\lambda r)(a_n-\lambda)}{ra_n+s}$$</p><p>的形式,那么就有关系:</p><p>$$(q-\lambda s)=(p-\lambda r)(-\lambda)$$</p><p>(这个式子的含义是$(q-\lambda s)$是$(-\lambda)$的$(p-\lambda r)$倍,带回式子中发现,如果有$\lambda$满足这个条件,一定可以化成上面我们想象的那种形式)</p><p>也就是</p><p>$$q-\lambda s=\lambda ^2 r-p\lambda$$</p><p>$$r\lambda^2+(s-p)\lambda-q=0$$</p><p>而根据不动点的定义有:</p><p>$$\lambda=\frac{p\lambda+q}{r\lambda+s}$$</p><p>$$\lambda(\lambda+s)=p\lambda+q$$</p><p>$$r\lambda ^2+s\lambda-p\lambda-q=0$$</p><p>我们发现上面的两个方程是一样的,因此不动点$\lambda$就有</p><p>$$\lambda=\frac{p\lambda+q}{r\lambda +s}&lt;=&gt;(q-\lambda s)=(p-\lambda r)(-\lambda)$$</p><p>所以向$a_{n+1}-\lambda=\frac{(p-\lambda r)a_n+q-\lambda s}{ra_n+s}$代入$(q-\lambda s)=(p-\lambda r)(-\lambda)$得</p><p>$$a_{n+1}-\lambda=\frac{(p-\lambda r)(a_n-\lambda)}{ra_n+s}$$</p><p><strong>证毕</strong></p><p>从上面的证明我们可以看出,不动点$\lambda$可能有两种情况:有两个解/一个解(在复数范围内),那么我们接下来就会证明如下结论:</p><blockquote><p>$\lambda_1!=\lambda_2$时,数列$\frac{a_{n}-\lambda_1}{a_{n}-\lambda_2}$是等比数列<br>$\lambda_1=\lambda_2$时,数列$b_n=\frac{1}{a_n-\lambda}$是等差数列</p></blockquote><ol><li>当$\lambda_1!=\lambda_2$</li></ol><p>我们将他们分别带回我们开始的$a_{n+1}-\lambda=\frac{(p-\lambda r)(a_n-\lambda)}{ra_n+s}$中有:</p><p>$$a_{n+1}-\lambda_1=\frac{(p-\lambda_1 r)(a_n-\lambda_1)}{ra_n+s}\a_{n+1}-\lambda_2=\frac{(p-\lambda_2 r)(a_n-\lambda_2)}{ra_n+s}$$</p><p>两式相除得到:</p><p>$$\frac{a_{n+1}-\lambda_1}{a_{n+1}-\lambda_2}=\frac{(p-\lambda_1 r)(a_n-\lambda_1)}{(p-\lambda_2 r)(a_n-\lambda_2)}$$</p><p>$$\frac{a_{n+1}-\lambda_1}{a_{n+1}-\lambda_2}=\frac{(p-\lambda_1 r)}{(p-\lambda_2 r)}\times \frac{(a_n-\lambda_1)}{(a_n-\lambda_2)}$$</p><p>因此:</p><p>$$\frac{a_{n}-\lambda_1}{a_{n}-\lambda_2}=[\frac{(p-\lambda_1 r)}{(p-\lambda_2 r)}]^{n-1}\frac{(a_1-\lambda_1)}{(a_1-\lambda_2)}$$</p><p>于是就可以反过来解出原来的通项公式:</p><p>令$t=[\frac{(p-\lambda_1 r)}{(p-\lambda_2 r)}]^{n-1}\frac{(a_1-\lambda_1)}{(a_1-\lambda_2)}$</p><p>$$a_n=\frac{\lambda_1-t\lambda_2}{1-t}$$</p><ol start="2"><li>当$\lambda_1=\lambda_2=\lambda$</li></ol><p>则有:</p><p>$$a_{n+1}-\lambda=\frac{(p-\lambda r)(a_n-\lambda)}{ra_n+s}$$</p><p>$$\frac{1}{a_{n+1}-\lambda}=\frac{ra_n+s}{(p-\lambda r)(a_n-\lambda)}$$</p><p>令$b_n=\frac{1}{a_n-\lambda}$,则$a_n=\frac{1}{b_n}+\lambda$</p><p>$$b_{n+1}=\frac{ra_n+s}{(p-\lambda r)}b_n=\frac{r(\frac{1}{b_n}+\lambda)+s}{(p-\lambda r)}b_n=\frac{r+r\lambda b_n+sb_n}{(p-\lambda r)}\=\frac{r}{(p-\lambda r)}+\frac{r\lambda +s}{p-\lambda r}b_n$$</p><p>因为$\lambda$是方程$r\lambda^2+(s-p)\lambda-q=0$的唯一根,那么$2\lambda=\frac{(p-s)}{r},\lambda=\frac{p-s}{2r}$</p><p>代入$b_{n+1}$中得到</p><p>$$b_{n+1}=\frac{r}{p-\frac{p-s}{2}}+b_n=\frac{2r}{p+s}+b_n$$</p><p>因此$b_n$是等差数列</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><blockquote><p>设无穷项数列 $a_n$ 满足 $a_{n+1}a_n+3a_{n+1}+a_n+4=0$,若$a_{2016}$是$a_n$的最小项,则$a_1$的取值范围是?</p></blockquote><p>转化为分式形式:$a_{n+1}=-\frac{a_n+4}{a_n+3}$</p><p>求出不动点$\lambda=-2$</p><p>构造等差数列:</p><p>$$a_{n+1}+2=-\frac{a_n+4}{a_n+3}+2=\frac{a_n+2}{a_n+3}$$</p><p>$$\frac{1}{a_{n+1}+2}=\frac{a_n+3}{a_n+2}=\frac{1}{a_n+2}+1$$</p><p>于是就有</p><p>$$\frac{1}{a_n+2}=\frac{1}{a_1+2}+n-1$$</p><p>观察此式,其中如果$a_1+2&gt;0$,那么$a_n$将是一个恒大于零的递减数列,不存在某一项为最小值.但如果$a_1+2&lt;0$,那么$\frac{1}{a_n+2}$是一个递增数列.如果用反比例函数来解释这个东西就是这样:</p><p><img src="https://img-blog.csdnimg.cn/20200302144614540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>(图稍微画的有点问题,但影响不大)</p><p>其中$\frac{1}{a_1+2}&lt;\frac{1}{a_2+2}&lt;…&lt;\frac{1}{a_k+2}&lt;0&lt;\frac{1}{a_{k+1}+2}&lt;\frac{1}{a_{k+2}+2}…$</p><p>那么我们不难发现,此时数列$a_n$的最小值就对应着$\frac{1}{a_n+2}$的最后一个负数值</p><p>因此:</p><p>$$\begin{cases}\frac{1}{a_{2016}+2}&lt;0\\frac{1}{a_{2017}+2}&gt;0\end{cases}$$</p><p>解得$a_1\in(-\frac{4031}{2015},-\frac{4033}{2016})$</p><blockquote><p>数列$x_n$满足$x_1=1,x_{n+1}=\frac{3+3x_n}{3+x_n}$,则数列的极限是?</p></blockquote><p><strong>方法一:无脑暴算</strong></p><p>首先一波暴算得到不动点为$\lambda_1=-\sqrt 3,\lambda_2=\sqrt 3$,然后求得通项公式为$x_n=\sqrt 3[1-\frac{2}{(2-\sqrt 3)^n+1}]$,显然,$\lim_{n\to\infty}\sqrt 3[1-\frac{2}{(2-\sqrt 3)^n+1}]=\sqrt3$,得到答案</p><p><strong>方法二:利用数列极限的性质</strong></p><p>对于一个一阶递推数列$a_{n+1}=f(a_n)$,如果有$\lim_{n\to\infty}a_{n}=L$</p><p>则$\lim_{n\to\infty}f(a_n)=a_{n+1}=f(L)$</p><p>而$\lim_{n\to\infty}a_{n+1}=L$</p><p>所以$f(L)=L$,也就是说,如果数列有极限,那么极限的值一定是不动点</p><p>因此上面的方法中,解出了不动点为$±\sqrt3$的时候,因为$x_1=1$,那么数列恒为正,因此极限一定是大于0的,也就是$\sqrt3$</p><h2 id="特征方程"><a href="#特征方程" class="headerlink" title="特征方程"></a>特征方程</h2><h3 id="使用条件-1"><a href="#使用条件-1" class="headerlink" title="使用条件"></a>使用条件</h3><p>二阶线性递推式:$a_{n+2}=pa_{n+1}+qa_n,p,q\in R$</p><h3 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h3><p>将$a_{n+2}$换成$x^2$,$a_{n+1}$换成$x$,$a_n$换成1,得到方程$x^2=px+q$,这个方程就是递推式的特征方程,其解就是特征根.</p><ul><li>如果有两个特征根$x_1,x_2$,那么就有$\frac{a_{n+1}-x_1a_n}{a_{n+1}-x_2a_n}$是等比数列</li></ul><ul><li>如果是两个重根,那么$a_{n+1}-xa_{n}$是等比数列</li></ul><p>可以利用此方法将二阶递推数列$a_{n}=f(a_{n-1},a_{n-2})$化为一阶递推数列$a_n=f(a_{n-1})$,达到降阶从而简化问题的目的</p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>$a_{n+2}=pa_{n+1}+qa_n$中左右两边同时减去$xa_{n+1}$得到</p><p>$$a_{n+2}-xa_{n+1}=pa_{n+1}+qa_n-xa_{n+1}$$</p><p>$$a_{n+2}-xa_{n+1}=(p-x)a_{n+1}+qa_n$$</p><p>这里操作的指导思想和前面的不动点类似,也就是如果可以化成</p><p>$$a_{n+2}-xa_{n+1}=(p-x)(a_{n+1}-xa_n)$$</p><p>的话会有利于研究</p><p>于是有关系式</p><p>$$1:-x=p-x:q$$</p><p>$$q=x^2-px$$</p><p>$$x^2-px-q=0$$</p><p>说来也怪,这个式子就是刚刚替换掉$a_{n+2},a_{n+1},a_n$的结果,因此我们把这个式子叫做特征方程</p><p>接下来对x的个数分类讨论:</p><p>首先,由于韦达定理,$x_1+x_2=p$</p><ol><li>$x_1!=x_2$</li></ol><p>$$a_{n+2}-x_1a_{n+1}=x_2(a_{n+1}-x_1a_n)$$</p><p>$$a_{n+2}-x_2a_{n+1}=x_1(a_{n+1}-x_2a_n)$$</p><p>两式相除得到</p><p>$$\frac{a_{n+1}-x_1a_{n}}{a_{n+1}-x_2a_{n}}=\frac{x_2}{x_1}\frac{a_n-x_1a_{n-1}}{a_n-x_2a_{n-1}}$$</p><p>于是$\frac{a_{n+1}-x_1a_n}{a_{n+1}-x_2a_n}$是等比数列</p><ol start="2"><li>$x_1=x_2=x$</li></ol><p>$$a_{n+2}-xa_{n+1}=x(a_{n+1}-xa_n)$$</p><p>因此$a_{n+1}-xa_{n}$是等比数列</p><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><p>(<del>偷个懒</del>)</p><p><img src="https://img-blog.csdnimg.cn/20200302202015310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数学 </category>
          
          <category> 数列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普林斯顿微积分读本阅读笔记-续2</title>
      <link href="/2020/02/23/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E5%BE%AE%E7%A7%AF%E5%88%86%E8%AF%BB%E6%9C%AC%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E7%BB%AD2/"/>
      <url>/2020/02/23/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E5%BE%AE%E7%A7%AF%E5%88%86%E8%AF%BB%E6%9C%AC%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E7%BB%AD2/</url>
      
        <content type="html"><![CDATA[<p>终于看到积分了</p><blockquote><p>上接<strong>普林斯顿微积分读本-阅读笔记</strong></p></blockquote><span id="more"></span><h1 id="Chapter-XIV-积分"><a href="#Chapter-XIV-积分" class="headerlink" title="Chapter XIV 积分"></a>Chapter XIV 积分</h1><h2 id="求和符号"><a href="#求和符号" class="headerlink" title="求和符号"></a>求和符号</h2><p>又叫$sigma$(西格玛),怎么写下面有,怎么使用…自己去网上找吧,不再赘述</p><h2 id="位移和面积"><a href="#位移和面积" class="headerlink" title="位移和面积"></a>位移和面积</h2><p>考虑这样一个问题:<strong>已知一辆汽车在某一时段内每一时刻的行驶速度,求其在这个时间段的总位移?</strong></p><p>显然,当速度为一个定值的时候不是很简单吗对吧,直接$v\times t$完事</p><p>但是当速度-时间图像成了这个样子:</p><p><img src="https://img-blog.csdnimg.cn/20200223114704372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70"></p><p>我们只能够对每一段速度不变的区间使用$s=v\times t$,然后求$\sum v_i\times t_i$,如果使用平均速度的话会得到一个不精确的解</p><p>但实际上更加靠近现实的情况中,汽车的速度变化很快,我们不妨将速度相同的时间段划为一个区域(无论这个区间是有多小),那么整个过程就被分成了很多个区域,不妨设成共有$m$段分区,每一段分区结束于$t_j$时刻,那么这时的路程就变成了</p><p>$$\sum_{j=1}^m v_j\times(t_j-t_{j-1})$$</p><p>不难看到,这里的位移其实就是上图中的阴影面积.</p><h2 id="连续的速度"><a href="#连续的速度" class="headerlink" title="连续的速度"></a>连续的速度</h2><p>上面的情景假设其实还有一个瑕疵:加速不可能一下达到目标速度,这需要一定时间.因此不妨将速度看成一个连续的函数如图所示:</p><p><img src="https://img-blog.csdnimg.cn/20200223115903665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里的路程(也可以认为是位移,因为没有倒车)就是图中的阴影部分面积</p><p>但是这个面积怎么求?显然不好求,因为不规则.那就让它规则一下如何?沿用前面的思路,将这个图像<strong>均匀</strong>分区(也就是每一块分区的长度相近),然后把这一分区的速度近似看成这一分区内某一点的速度,然后得到这个:</p><p><img src="https://img-blog.csdnimg.cn/20200223120626310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再多分一点得到这个:</p><p><img src="https://img-blog.csdnimg.cn/20200223120544403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>显然,分的越多,面积越接近原来的面积.</p><p>当我们让我们分出来的最大区间趋于零的时候,就可以得到一个精确的答案了,也就是说:</p><p>实际面积=$\lim_{mesh \to 0}\sum_{j=1}^{n}v_j\times(t_j-t_{(j-1)})$</p><p>当然还有个问题,如果我们选取的区间和代表每个区间的值不一样的话,得出来的面积也会不一样啊,就像下面这样:</p><p><img src="https://img-blog.csdnimg.cn/20200224185524440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>图中第一个图是把每个区间的最大值当做区间速度,第二个是把最小值当做区间速度.实际上,当最大区间长度趋近0时,这两个面积的极限是一样的.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数学 </category>
          
          <category> 微积分 </category>
          
          <category> 普林斯顿微积分读本阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈美-阅读笔记</title>
      <link href="/2020/02/10/%E8%B0%88%E7%BE%8E-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/02/10/%E8%B0%88%E7%BE%8E-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本书顺着美从哪里来、美是什么以及美的特点等问题层层展开，提出了他的美学研究的理想目标——“人生的艺术化”。朱先生以一种对老朋友的语气娓娓而谈，将他对艺术与人生关系的深刻体悟渗透在质朴清新的文字中，“引读者由艺术走入人生，又将人生纳入艺术之中”（朱自清语）。全书最后呼吁人们“慢慢走，欣赏啊”，认为“欣赏之中都寓有创造，创造之中也都寓有欣赏”。 </p></blockquote><span id="more"></span><h1 id="Chapter-One-我们对于一棵古松的三种态度"><a href="#Chapter-One-我们对于一棵古松的三种态度" class="headerlink" title="Chapter One 我们对于一棵古松的三种态度"></a>Chapter One 我们对于一棵古松的三种态度</h1><blockquote><p>实用的,科学的,美感的</p></blockquote><p>一切事物都有多种看法,其原因是:知觉不是完全客观的,各人所见到的物的形象都带有几分主观的色彩.对于一颗”古松”,我们可以从三个不同的角度去看它:<strong>实用的态度,科学的态度,美感的态度</strong>.</p><p>其中,<strong>实用的态度起于实用的知觉,实用的知觉起于经验</strong>.这里给”态度”下的定义就是<strong>对物体的爱憎的情感</strong>,知觉的定义是<strong>对一件事物的作用的认识看法</strong>.小孩子第一次吃饭,得到了饱腹感,消除了饥饿,于是通过这种”我吃饭后就不饿了”的经验得到了”饭可以饱腹”的知觉,从而有了”饭对我有利”这样一个态度.因此,<strong>实用的态度是从生存的角度出发,对事物的功用做出一个定性(好或坏)判断的一种态度</strong></p><p>而<strong>科学的态度是纯粹客观,理论的</strong>,其中不会包含任何感性的因素.科学家看见一堆粪,如果没有掩鼻走开,而是取样分析,那么这个时候这位科学家就抱着一个科学的态度.科学的目的是要探求客观事物之间的因果关系,也就是搞清楚这个东西到底是什么.因此科学家们力求客观.</p><p><strong>美感的态度最大的特点便是意象的孤立绝缘.<strong>不同于前面两种态度,美感的态度不会去联想其他的东西,只专注于当下所见.由于持美感经验的人不计较实用,不推求逻辑,因此不需要动用意志和抽象思考.我们把这种</strong>脱尽了意志和抽象思考的心理活动叫做直觉</strong>.于是我们定义<strong>美感经验是形象的直觉,美是事物将形象呈现在直觉时所拥有的特征</strong></p><p>从实用的角度出发,美感的态度是百无一用的.然而人类除了生存需求外还有更高的企图(马斯洛需求层次理论了解一下~~),美就是其中一个,因此美感的态度从广义上讲是实用的.</p><p>(不过读到这里我有个问题:艺术既然和实用是两个分立的概念,那那些用文章来发动革命,也就是把艺术付诸实用的那些人的操作是否违背了艺术的初衷???)</p><h1 id="Chapter-Two-当局者迷-旁观者清"><a href="#Chapter-Two-当局者迷-旁观者清" class="headerlink" title="Chapter Two 当局者迷,旁观者清"></a>Chapter Two 当局者迷,旁观者清</h1><blockquote><p>艺术与人生的实际距离</p></blockquote><p><strong>美的事物和实际的人生是有恰当距离的</strong>.太近会使得人们容易持实用的态度,从而挑剔这物品的细节.太远又显得难以理解,无法触及.也正因此,很多艺术作品在细节处理上刻意远离生活.</p><p>很多人喜欢用道德的观点来谈文艺,还有人喜欢用政治的观点来谈文艺,这都是把实际人生的规范强加到艺术上的错误举措.曾经在美国种族歧视白热化的阶段,一个剧院里上演莎士比亚的悲剧”奥赛罗”.当演到奥赛罗掐死自己的妻子那一段,台下一个退伍士兵站起来大吼:我不能忍受一个黑人掐死我们白人妇女!随即掏枪杀死奥赛罗的演员.(我也是醉了..)</p><p>艺术是主观的,但是也要加入一些客观(中庸~~).因为当作者深陷于他的狂风暴雨般的情感中时,他和现实生活的距离太近了,是不能够做出有效反省从而将情绪加工成艺术的.这也是为什么很多人情绪丰富却搞不出艺术品的原因.</p><h1 id="Chapter-Three-子非鱼-安知鱼之乐"><a href="#Chapter-Three-子非鱼-安知鱼之乐" class="headerlink" title="Chapter Three 子非鱼,安知鱼之乐?"></a>Chapter Three 子非鱼,安知鱼之乐?</h1><blockquote><p>宇宙的人情化</p></blockquote><p><strong>根据自己的经验来了解外物,将自己的情感附加给外物,这种心理活动叫做移情作用.<strong>美感经验和移情作用是有密切联系的.实际上,美感经验还可以定义成</strong>在聚精会神之中,个人的情趣和物的情趣的往复回流</strong>.因此在个人的情趣流向物的时候,移情作用就发生了,将个人的经历向物传递,使得本来没有特殊含义的物有了什么特殊的含义,从而获得美的感觉,这种美的感觉又以物的情趣为名回流到人的身上,这就是美感经验的发生和移情作用在其中的作用.</p><p>比如说听音乐.在听到一段音乐的时候,人们给这种本来只有音调高低的一连串波赋予了情感和历史,从而心力也随之做一种相应的活动,听者心里随即感到一种情调.这种情调虽然属于听者,但听者常常认为其来自于这段音乐,从而音乐就有了情调,人也同时有了情调,美感经验随之产生.</p><h1 id="Chapter-Four-希腊女神的雕像和血色鲜丽的英国姑娘"><a href="#Chapter-Four-希腊女神的雕像和血色鲜丽的英国姑娘" class="headerlink" title="Chapter Four 希腊女神的雕像和血色鲜丽的英国姑娘"></a>Chapter Four 希腊女神的雕像和血色鲜丽的英国姑娘</h1><blockquote><p>美感与快感</p></blockquote><p><strong>美感与实用活动无关,快感则起于实际要求的满足</strong>.因此常说的”美人”在大多数人那里只能够引起快感,因为”美人”常常会引起性欲,而性欲是最强烈的一种占有欲,根本不能叫做美感.血色鲜丽的姑娘距离人生的距离太近,引起美感的能力完全比不上希腊女神的雕像.</p><p><strong>美感经验是直觉的而非反省的</strong>,因为在聚精会神之中,我们忘去自我,自然不能够决定我是否欢喜所观赏的景象,或是反省这种形象是否是快感.如果已经感觉到快感,那么已经由知觉变成反省,美感的态度已经没了.美感的愉快,在当时都不会有感觉,要到事后才回忆的起来.</p><h1 id="Chapeter-Five-记得罗绿裙-处处怜芳草"><a href="#Chapeter-Five-记得罗绿裙-处处怜芳草" class="headerlink" title="Chapeter Five 记得罗绿裙 处处怜芳草"></a>Chapeter Five 记得罗绿裙 处处怜芳草</h1><blockquote><p>美感与联想</p></blockquote><p>联想有两种:类似联想和接近联想.类似联想指甲和乙在性质上相类似,接近联想指甲和乙在经验上曾接近.联想作用很广,如果没有联想,知觉和记忆,想象都不能发生.</p><p>很多人认为,联想所带来的的快感是美感,实际上不是(至少在作者的定义里面不是).比如看到耶稣临刑图,你问一位基督教徒这幅画美不美.他说:”美极了!为人类的福祉而献身,他是多么伟大啊!”其实这不叫美,这位基督徒仅仅是在享受联想所带来的的愉悦.实际上,联想使得人的注意力容易转移,从而不能够再集中在欣赏对象上.注意力一涣散,美感经验自然而然就消失了.</p><h1 id="Chapeter-Six-灵魂在杰作中的冒险"><a href="#Chapeter-Six-灵魂在杰作中的冒险" class="headerlink" title="Chapeter Six 灵魂在杰作中的冒险"></a>Chapeter Six 灵魂在杰作中的冒险</h1><blockquote><p>考证,批评与欣赏</p></blockquote><p>学者们常常有一种误解,即认为<strong>考证和批评是欣赏</strong>.</p><p>考据,就是详细的考察艺术品的来源,历史,作者生平等事实.据作者描述,国外研究莎士比亚戏剧会精细到某一个字和词的来源,以及戏剧剧本印刷的格式.很多学者认为做到如此精细的程度是为了体会莎翁作品的美.实际上,考察的过于精细并不能体会作品的美,那样子只是将历史学的功夫做得很足,而美学根本还没有入门.欣赏美和考据的关系应该是这样的:<strong>考据是欣赏美的前提条件,但光考据是不可能欣赏到美的</strong>.</p><p>批评这个词并没有一个特别精确的定义,作者在书中列举了几种常见的批评流派,他们对批评的定义各自不同.</p><p>首先是”导师类”批评家.他们对各种艺术都抱有一种理想,但自己又能力不足不能够创作,因此就去研究这些艺术,并将研究所得作为向作家发号施令的资本.他们为创作者设下重重教条,认为创作者只要遵守就可以写出优秀的作品.他们意义下的批评是对创作者的创作进行指导.</p><p>然后是”法官类”批评家.他们心里有一些准则,只要违背了这些准则就是丑,符合就是美.这类批评家常常和导师类批评家合体,从而一边指导一边评价.他们概念中的批评可以叫做评判,也就是我们最常见的批评的含义.</p><p>第三类是”舌人类”批评家.按照作者的话来说,他们”把外乡话翻译成本乡话,叫人能懂得”.这种批评家又细分为两类,第一类是完全的考据学家,第二类是用自然科学的方法去分析作品的分析学家.他们的批评其实就是考据罢了.</p><p>最后一类是”印象主义”的批评家.他们的领袖法朗士曾说:凡是真批评家都只叙述他的灵魂在杰作中的冒险.这反应了他们对批评:批评应该是主观的,正像艺术是主观的一样.因此,这一派批评学家的观念中,批评就是按照自己的直觉主观的来判断一个作品的好坏.</p><p>实际生活中,大家都被告诉要”不能尽信书”,要”判断是非”,因此大多数人是持的法官式的批评,这种批评和欣赏的态度相去甚远.**欣赏的态度注重我的情感和物的姿态的交流,这种态度凭的是直觉.**因此这四类批评家中,印象派的批评和欣赏最接近,但是还是有差距.因为印象派常常把快感和美感混淆.</p><h1 id="Chapter-Seven-情人眼底出西施"><a href="#Chapter-Seven-情人眼底出西施" class="headerlink" title="Chapter Seven 情人眼底出西施"></a>Chapter Seven 情人眼底出西施</h1><blockquote><p>美与自然</p></blockquote><p>美到底是什么?美不是物品的属性,因为它是主观的.美也不是心的产品,因为如果没有物直观感受就无从活动.因此,<strong>美是心和物相互作用而产生的</strong>.</p><p>因此,我们常常说的自然美,其实是与作者的美学观念相违背的.你觉得自然美,其实此时的自然已经经过了你的心的加工,你所看见的山水已经不是山水的本色,而是人情化后的山水.柏拉图式的恋爱也是一样.你在理想中先酝酿一个理想的形象,然后把它投射到你的爱人身上去,你的爱人只不过是寄托你的理想化的精灵的躯骸罢了.</p><p>美的欣赏也和以上两点相似,也就是把自然加以艺术化.这里的艺术化的定义是<strong>人情化和理想化</strong>.这种欣赏是没有任何占有欲的,也就是”无所为而为”的欣赏.</p><h1 id="Chapter-Eight-依样画葫芦"><a href="#Chapter-Eight-依样画葫芦" class="headerlink" title="Chapter Eight 依样画葫芦"></a>Chapter Eight 依样画葫芦</h1><blockquote><p>写实主义和理想主义的错误</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谈美.朱光潜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这才是标准的退役记</title>
      <link href="/2020/02/08/%E8%BF%99%E6%89%8D%E6%98%AF%E6%A0%87%E5%87%86%E7%9A%84%E9%80%80%E5%BD%B9%E8%AE%B0/"/>
      <url>/2020/02/08/%E8%BF%99%E6%89%8D%E6%98%AF%E6%A0%87%E5%87%86%E7%9A%84%E9%80%80%E5%BD%B9%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感觉以前写那篇退役记太愤青,有种愤世嫉俗想要超脱物外的感觉.再加上<del>寒假作业的威逼利诱</del>….就有了这篇狗屁不通的文章</p></blockquote><span id="more"></span><p>日光斜射,将漆黑的屋内照的一片金黄.床头的时钟滴滴答答的走着,偶尔用秒针投来一束从太阳那里借来的刺眼的金光.突然,时钟上的秒针静止,空气也似凝固了一般,正欲起身查看,那时钟上的秒针发疯似的逆时针旋转了起来,那将要西落的太阳如流星般在空中划过,月亮紧随其后,在漆黑的夜幕上划出一条银白的弧线.我从家里走出,倒退着坐上车,车倒着开到了学校,我回到教室,将期末考试那做的一团糟的卷子上的痕迹用笔涂去,然后退出考场,第一次来到了机房,那个承载了我半个高中生活喜怒哀乐的地方.</p><p>我打开电脑,将电脑密码设为**”GoodBye OI”**,然后再叹一口气,眨眨眼,面色凝重的打开了成绩查询网址,返回到刷新页面,脸上的表情由无奈变成了满怀希望.我想,我到底能不能拿到省一呢?虽然第一天的题考得很差,但是说不定运气好呢?正欲再看,我突然消失在了流动的人群中,画面又切到了成都.我看见我走在电子科大的树林中的小路上,忐忑不安的拿起电话:”反正省一是基本没希望了.”,一颗石子从路边飞到我的鞋子前,然后落在地上.”糟了,这次真的没希望了,第一天的题就已经和别人掉了将近100分了”.我退回考场门口,站在台阶上,望着面前黑压压一片的来接孩子考试的家长和教练,深吸了一口气,用手揉了一下眼睛,眼睛被揉痛了似的闪出点点泪花.</p><p>一片光影闪动之后,窗外变成了一个凉爽的下午.几个同学刚刚从机房里走出去,嘴里还嚼着食堂的面包.其中一个同学将目光放向教学楼那边,感叹道:”能够提前去食堂真是一大快事!”,话还没说完,脚下的地板开始微微摇动,整栋教学楼缓缓开始咆哮起来,操场上如离弦之箭一般向食堂射去的人影飞速的被教学楼吞下,地板的震动也越来越强烈,让人怀疑是不是发生了地震.就在那几个同学走出楼道的时候,震动突然停止,只听见丝娜坦考尔悠扬的歌声:”I am happy,I am good……”.歌声突然间就消失在流动的时空中,我发现现在来到了绵中实验.在他们的食堂外,一群学生正在热烈的讨论着什么东西,我也在其中.随后他们从生活部走出,一边吸着饮料一边更加热烈的讨论着.日月你追我赶了不知多少来回后,我又回到了机房.这时的太阳高高的正挂在南方的天空中,四周一片云也没有.我嘀咕:现在还没到上课时间呢,难道不可以休息一下嘛.同桌无语的瞧了我一眼.过了一会儿,老师一脸怒色的走进机房,倒退着来到了教室的最后面.经过我和同桌这一桌的时候狠狠的盯了我俩一眼.此时的我正端着午饭,身子侧向同桌,同桌的电脑屏幕上正放着崔佛诺亚的脱口秀.</p><p>这段影像渐渐又淡去,模糊中我到了常规教室,一群同学聚集在教室后面,我站在人群中间,目光定在墙上的一张纸上,一动不动了很久,脸上的表情由惊讶和失望转向期望.一瞬间又到了考场,空气中弥漫着紧张的气息.我坐在座位上,正在向着数学的最后一道大题发动猛烈的攻击.不过凑近仔细一看,已经做完的三道大题就错了一道半.突然窗外的云如海浪般涌来,遮天蔽日的气势让机房的色调冷了下来.透过机房的窗户,可以看到空无一人的操场和安安静静的食堂.这是寒假的学校,因此并不存在吃饭早晚的问题.我并没有看见自己在这里.机房没开灯,角落中坐着一个人,我一眼就认出了他.他抓挠着头发,在自己的电脑前走来走去,微微发光的屏幕将他青涩的脸映的有些沧桑.他慢慢俯身,将手放在键盘上,轻轻的敲了几个字符,紧皱的双眉微微松了些,吐出一口长长的呼吸.他将书从桌子上快速拿起,发出碰的一声,书那泛黄的纸页显得无比脆弱.他缓缓的坐下,眼神开始呆滞,手指轻轻地敲着面前的一张便利贴.我凑近一看,上面密密麻麻全部写的是最近的学习计划,红色的钩和黑色的圈让整张纸显得有些凌乱.这时,灯亮了,一位同学站在门口问:”你吃饭不?一起如何?”,他定了一下,怔怔的说:”明天吧.”.不远处的桌子上,一本本崭新的寒假生活安安静静的躺在那里,一动不动.</p><p>窗外突然下起雨来,我打着伞,最后一次来到机房,最后一次见到和善的教练,最后一次见到即将和我一起度过大半个高中生涯的同学们,最后一次打开机房的电脑,在上面打出<code>printf(&quot;Hello World\n&quot;);</code></p><p>窗外的景色变得比以前快多了,倏忽之间,又到了一个夏天.我坐在行驶在绵中外公路的车上,透过车窗能够看到绵中的红墙和六艺楼的上半部分.我的眼光里充满了憧憬和向往,眼睛甚至不想移动,入迷的都忘了继续看手上拿着的手机.仔细一瞧,原来在看百度贴吧,贴名叫<strong>OIER值不值?</strong>.突然,一束阳光照在我脸上,我遮住眼睛,从床上爬起来.原来是场梦啊.我又打开手机,找到了当时看到那篇帖子.他说:你会失去很多,但是只要你愿意,你会得到更多.</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 议论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>令中兴日思夜想的芯片到底是什么</title>
      <link href="/2020/02/08/%E4%BB%A4%E4%B8%AD%E5%85%B4%E6%97%A5%E6%80%9D%E5%A4%9C%E6%83%B3%E7%9A%84%E8%8A%AF%E7%89%87%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2020/02/08/%E4%BB%A4%E4%B8%AD%E5%85%B4%E6%97%A5%E6%80%9D%E5%A4%9C%E6%83%B3%E7%9A%84%E8%8A%AF%E7%89%87%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="43d4ed1d679b9680c17d4428161a842a70f4918e7ebfcac37daadab4f5acc41a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一份没有经过调查的社会调查报告</title>
      <link href="/2020/01/28/%E8%BF%99%E6%98%AF%E4%B8%80%E4%BB%BD%E6%B2%A1%E6%9C%89%E8%B0%83%E6%9F%A5%E8%BF%87%E7%9A%84%E7%A4%BE%E4%BC%9A%E8%B0%83%E6%9F%A5%E6%8A%A5%E5%91%8A/"/>
      <url>/2020/01/28/%E8%BF%99%E6%98%AF%E4%B8%80%E4%BB%BD%E6%B2%A1%E6%9C%89%E8%B0%83%E6%9F%A5%E8%BF%87%E7%9A%84%E7%A4%BE%E4%BC%9A%E8%B0%83%E6%9F%A5%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>感谢您以迅雷不及掩耳盗铃而响叮当仁不让世界充满爱妈妈再爱我一次的速度来看这篇冗长的调查报告.</p><p>相信我,这篇报告绝对没有实地调查哈哈</p><span id="more"></span><h1 id="社会调查报告"><a href="#社会调查报告" class="headerlink" title="社会调查报告"></a>社会调查报告</h1><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>中学生心理困扰</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>心理困扰,是人们生活中经常遇到的一种问题.这种问题,具有<strong>困扰程度强,持续时间长,原因错综复杂</strong>的特点.具体到中学生,这种问题的复杂程度和影响稍稍有所减轻,但是这并不意味着中学生就没有心理困扰.实际上,经过笔者的调查,中学生的心理困扰普遍存在.</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p>对于接下来的心理问题的实例,我们将会部分采用阿尔伯特·艾利斯创立的<strong>情绪ABC理论</strong>来分析其中的原因.</p><p>情绪ABC理论是指:<strong>任何的行为由情绪决定,情绪由观念或事件决定,而观念最终是由事件决定的.</strong></p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><blockquote><p>注:为了保障受访者的个人隐私,下面不会给出受访者的真名或化名</p></blockquote><h3 id="1-观念问题"><a href="#1-观念问题" class="headerlink" title="1.观念问题"></a>1.观念问题</h3><p>A同学,在学校成绩中等偏优,但是自己并不满意,且常常为自己状态而焦虑.她表面上的问题显示是容易松懈,每当长时间学习的时候就会感到不安,这种不安加深了她的劳累感,因此会出现无原因的头痛.这些因素使她开始为状态而焦虑.</p><p>深入探讨过后,笔者发现她有一个特殊的观念:<strong>如果按照高中的学习强度长时间思考,大脑会受到损伤</strong>.正是因为这个观念,她难以拿捏自己学习的时长和深度,不知是该多学一点还是该休息一会.在这种左右为难的境地中自然而然会产生焦虑的情绪,以至于反应为身体的不适.</p><p>当我们发现这个观念后,她自己也发现这个观念比较荒唐.毕竟,高中强度的学习并不会造成不可逆性的大脑损伤.相反,在不断的长时间深入思考中,我们的思维能力才能够提升,从而才能够取得进步.因此,她的问题很快就解决了.</p><p>像这种单纯的观念造成的心理问题,我们往往会认为其原因捉摸不定.然而当我们静下心来深入挖掘,不难发现这背后的观念.大多数情况下,这些观念是荒唐的,因此可以很快切断这条”观念-情绪-行为”的反应链.如果遇到的是根深蒂固的观念,那么需要的就是时间了.</p><h3 id="2-学习问题"><a href="#2-学习问题" class="headerlink" title="2.学习问题"></a>2.学习问题</h3><p>B同学,常常为自己学习效率而担忧.不知道自己学了是否有效,是否在做无用功.有时做作业时就会因此而产生情绪使得自己分心,从而作业错误率偏高,这也就反过来更加影响他自己的心理状况,对自己学习效率的担忧就更加严重.</p><p>这位同学的问题很明显.他想要取得好成绩,却没有找到行之有效的学习方法,没有建立有效的学习效率测评体系,因此无法对自己的学习效率进行有效估计,从而容易担忧自己正在无效努力,从而状态变差</p><p>中学生的主要任务是学习,学习成绩对于中学生来讲就类似于家庭收入对于一个家庭来讲一样.因此因为学习成绩的担忧相对频繁.</p><h3 id="3-人际交往"><a href="#3-人际交往" class="headerlink" title="3.人际交往"></a>3.人际交往</h3><p>C同学,相对内向的一位同学.学习成绩还比较优秀,但是在班级集体活动的时候并不积极,且和班上同学说话很少,因此没有几个知心朋友.每当回到寝室,看见其他同学在热情的交流时,就会感到焦虑,甚至有抑郁的情绪.</p><p>一开始笔者认为C同学可能仅仅是太内向,但是在面对面交谈的时候,笔者发现C同学并不像想象中的那么内向.经过询问和观察,笔者发现C同学自己说话发音不是特别准确,且所在的班级属于学校里顶尖的班级.最后我们达成的共识是:C同学由于发音不太准确,便认为别人会因此而看低他.且自身又处于一个比较优秀的集体,C同学进入这个集体的过程也并非很顺利,因此C同学在潜意识里就认为自己比这个集体中的人差.两个因素一叠加,C同学就基本上不敢与同学交流了.</p><p>然而交不到朋友,并不见得就很失败.但C同学却认为自己如果在高中阶段就已经交不到很多朋友的话,未来在社会里,相比起那些左右逢源的人来讲是会寸步难行.因此C同学会产生这一些消极的情绪,也是情有可原的.</p><p>人是社会动物,不能够脱离友情而存在.但是当一个人过于在意朋友的时候,他就成了友情的奴隶.高中阶段不交友,不见得以后就交不到朋友.当没有朋友的时候,利用这些时间来提升自己,把自己送上一个更好的平台,去交更好的朋友,不是更加合理吗?</p><h3 id="4-情感问题"><a href="#4-情感问题" class="headerlink" title="4.情感问题"></a>4.情感问题</h3><p>D同学,一个十分努力且抱有远大理想的优秀学生,突然喜欢上班上一个女生.他自己明确知道这样的情绪是无益于学习的,但无论如何都难以放下这种情感.自然而然的,他开始焦灼了起来,学习状态也开始下降.</p><p>D同学是一个十分努力的同学,但是在高中的压抑下性格不如以前活泼了.经D同学的描述,恰恰那位女同学就是一位非常活泼的人,逢人就笑的那种.</p><p>实际上,高中生涯中的情感问题,并不是什么神秘或者不道德的事.它就是一件小事.一般高中出现情感问题的有两种情况:1.为了反抗某些禁令从而显示自己青春期的”朝气”.2.情感上出现了匮乏.而D同学的情况一定是属于第二种.他对那位女生产生了情感,其实是他对一个更加活泼开朗的自己产生的向往.似乎如果和那位女生在一起后,那位女生身上的活泼开朗就可以分他一份.这显然是不可能的.</p><p>处于青春期的高中生,难免会遇到情感上的问题.然而当理解了这一切的原因后,相信这种问题带来的困扰会少很多.</p><h3 id="5-一些更为严重的原因"><a href="#5-一些更为严重的原因" class="headerlink" title="5.一些更为严重的原因"></a>5.一些更为严重的原因</h3><p>除了上面的原因之外,还有一些更加严重的原因.这些原因起源不是来自中学生个人,而是来自外部.这些外部的原因,往往会导致很严重的心理阴影,且难以挽回.毕竟,这些外部原因是命运的安排,想要逆天改命,是需要下一番狠劲的.下面列举两个比较常见的原因.</p><p>其一是家庭原因,也就是双亲关系和亲子关系原因.</p><p>家庭中父母吵架不和是最常见的现象,离异或者父母有特殊情况(受伤而不能自理等)而不能够正常生活的情况也不少.往重了讲这些现象往往会导致家庭中出现家暴或者放任自流的现象.而一个孩子从小就在这种相对畸形的环境中长大,在没有外部辅助的情况下很难保证他自己的三观能够保持正常,性格能够不过于偏激.往轻了讲,家里的矛盾会使得中学生的心绪难以集中,总有那么一点注意力会放在思考家里的问题上.这一类中学生,往往比一般中学生背负着更大的压力,更加需要外部的辅助和支持.</p><p>亲子关系不和也会影响中学生的心理状态.如果是中学生因为叛逆而导致的亲子关系不和,那么不在外部原因(也就是本小节)的讨论范围之内.如果是父母由于各种原因而对孩子不好从而导致的亲子关系不和,就显得难以解决,笔者也没能够取得相关信息进行有效的分析.</p><p>其二是资源丰富度不均衡导致的问题.</p><p>我国经济发达程度和教育资源都呈现东多西少的态势,因此很多中学生由于地理位置的原因和经济的桎梏难以接受到相对较好的教育资源,而自身又向往更好的高校,从而心理上产生巨大落差,久而久之滋生出绝望的情绪.这种情况往往出现在中产家庭.也许我们应该认识到,想要跨越阶级的禁锢,最稳妥的办法是一代人一代人的步进.</p><h2 id="总结及建议"><a href="#总结及建议" class="headerlink" title="总结及建议"></a>总结及建议</h2><p>现在看来,笔者调查到的中学生的心理困扰,可以大概分为如下两类:</p><h3 id="自身的原因造成的困扰"><a href="#自身的原因造成的困扰" class="headerlink" title="自身的原因造成的困扰"></a>自身的原因造成的困扰</h3><p>像前文中的ABCD4位同学,其实都是因为自己的某些原因而产生心理困扰.<strong>并且不难发现,除开B同学的学习问题,其他三位同学的心理困扰都是来自一些观念</strong>:A同学认为如果按照高中的学习强度长时间思考,大脑会受到损伤,C同学认为如果在高中阶段就已经交不到很多朋友的话,未来在社会里会寸步难行,还认为自己永远不如现在所在班上的同学,还认为自己发音不标准别人就会嘲笑他.D同学认为由于自己的匮乏而产生情感是真正的爱情.</p><p>按照情绪ABC理论的原理,我们不难找到解决这些问题的办法:学会分析自己情绪背后的观念,找到那个起作用的观念后尝试去纠正它,从而切断这条传导链.</p><h3 id="外部原因造成的困扰"><a href="#外部原因造成的困扰" class="headerlink" title="外部原因造成的困扰"></a>外部原因造成的困扰</h3><p>这一部分问题解决起来相对麻烦.虽然不是不能解决,但解决起来往往是要付出巨大的代价的.对于有这一部分问题的中学生,学校和组织应该给予更多的帮助,让他们获得更大的动力.</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>中学时期正是人生的一个蜕变期,曾经幼稚青涩的青年将要负起成人的责任.也正是如此,青少年们未成熟的心智总是会遇到很多难以解决的问题.只有敢于直面问题,解决问题的人才能够甩下心理困扰这个包袱,向更加丰富的未来迈开步去.</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 议论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普林斯顿微积分读本-阅读笔记-续1</title>
      <link href="/2019/11/13/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E5%BE%AE%E7%A7%AF%E5%88%86%E8%AF%BB%E6%9C%AC-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E7%BB%AD1/"/>
      <url>/2019/11/13/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E5%BE%AE%E7%A7%AF%E5%88%86%E8%AF%BB%E6%9C%AC-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E7%BB%AD1/</url>
      
        <content type="html"><![CDATA[<p>上接<strong>普林斯顿微积分读本-阅读笔记</strong></p><span id="more"></span><h1 id="Chapter-VII-指数函数和对数函数"><a href="#Chapter-VII-指数函数和对数函数" class="headerlink" title="Chapter VII 指数函数和对数函数"></a>Chapter VII 指数函数和对数函数</h1><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>这一大板块是作者回顾指对数函数的基本性质的一部分,个人认为可能会容易忘记的主要有以下几点:</p><ul><li><p>$log_xb$中,$b&gt;0$</p></li><li><p>$b^{log_b(y)}=y$</p></li><li><p>$log(xy)=log(x)+log(y)$</p></li><li><p>$log(\frac{x}{y})=log(x)-log(y)$</p></li><li><p>$log(x^y)=ylog(x)$</p></li><li><p>$log_b(x)=\frac{log_c(x)}{log_c(b)}$</p></li></ul><h2 id="神秘的自然对数e"><a href="#神秘的自然对数e" class="headerlink" title="神秘的自然对数e"></a>神秘的自然对数e</h2><h3 id="一个关于复利的问题"><a href="#一个关于复利的问题" class="headerlink" title="一个关于复利的问题"></a>一个关于复利的问题</h3><blockquote><p>假设你在某银行有一个账户,该银行给你一个很高的年利率0.12,一年记一次复利.这也就意味着每一年你的财富增加12%,同时也意味着在n年后,你的财富会变成原来的$(1+0.12)^n$倍.<br>这时候有另外一家银行,它也提供0.12的年利率,但和前一家银行不同的是,这家银行一年记两次复利,每半年记一次利率为$\frac{0.12}{2}$的复利,这样的话,你如果把钱存入这个银行,一年后,你的财富就变成了$(1+0.06)^2$倍,n年后,你的财富就会变成原来的$(1+0.06)^{2n}$倍<br>不难发现,复利的次数越多,你的收益就越多,因为你的利息被更多次的当做了增值的资本.<br>那么问题来了,如果我们复利的次数越来越多,我们的财富的增长速度会越来越快吗?或者说,这一切都有一个上限?</p></blockquote><p>为了回答这个问题,我们先设一些符号:</p><p>设$r$为复利的利率,一年内一共计算$n$次,则这一年后增长的倍数就可以表示为</p><p>$$(1+\frac{r}{n})^n$$</p><p>当复利的次数越来越多的时候,倍数(设为$L$)就可以写作</p><p>$$L=\lim_{n\to \infty}(1+\frac{r}{n})^n$$</p><p>此时我们来计算这个极限:</p><p>设$h=\frac{r}{n}$,则$n=\frac{r}{h}$,那么当$n\to \infty$的时候,由于$r$是常数,$h\to 0^+$,于是原式可以替换成</p><p>$$L=\lim_{h\to 0^+}(1+h)^{\frac{r}{h}}=\lim_{h\to 0^+}((1+h)^{\frac{1}{h}})^r$$</p><p>这时,自然对数$e$实际上就等于$\lim_{h\to 0^+}(1+h)^{\frac{1}{h}}$</p><p>因此,$L=e^r$,这意味着,当你每时每刻都在复利的情况下,你的财富增长速度会达到一个非常接近于$e^r$的量.</p><p>(我承认这样直接引入自然对数的定义式比较突兀,但是当你看到$f(h)=(1+h)^{\frac{1}{h}}$的图像的时候,这种感觉就会好很多:)</p><p><img src="https://img-blog.csdnimg.cn/2019111019573120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>(并且可以把自然对数理解为一个常用的极限)</p><h3 id="更多对e的探究"><a href="#更多对e的探究" class="headerlink" title="更多对e的探究"></a>更多对e的探究</h3><h4 id="e的取值"><a href="#e的取值" class="headerlink" title="e的取值"></a>e的取值</h4><p>已知</p><p>$$e=\lim_{h\to 0^+}(1+h)^{\frac{1}{h}}=\lim_{h\to \infty}(1+\frac{1}{h})^{h}$$</p><p>当$r=1$的时候,</p><p>$$e=\lim_{n\to \infty}(1+\frac{1}{n})^n$$</p><p>作者在书中列出一张$(1+\frac{1}{n})^n$的表出来,得到了自然对数的一个近似值:$2.718$,事实上,$e$是一个无理数,并非一个有理数,实际应用中只需要知道比$2.7$大一点就够了</p><h4 id="经典极限"><a href="#经典极限" class="headerlink" title="经典极限"></a>经典极限</h4><p>假设取极限$\lim_{n\to \infty}(1+\frac{r}{n})^n=e^r$(不妨叫做经典极限),并且设$h=\frac{1}{n}$,则当$n\to\infty$的时候,$h\to 0^+$,因此原极限可以写成$\lim_{h\to 0^+}(1+rh)^{\frac{1}{h}}=e^r$</p><p>我们要证明的是$\lim_{h\to 0}(1+rh)^{\frac{1}{h}}=e^r$</p><p>很自然就应该考虑$\lim_{h\to 0^-}(1+rh)^{\frac{1}{h}}=?$</p><p>设$h=-t$,则当$h\to0^-$,$t\to 0^+$</p><p>因此原极限$=\lim_{t\to 0^+}(1-rt)^{\frac{-1}{t}}=\lim_{t\to 0^+}\frac{1}{(1-rt)^{\frac{1}{t}}}$</p><p>观察刚刚一开始取的经典极限$\lim_{h\to 0^+}(1+rh)^{\frac{1}{h}}=e^r$,发现我们正在研究的这个极限的分母就是当$r=-r$时的经典极限,因此$\lim_{t\to 0^+}\frac{1}{(1-rt)^{\frac{1}{t}}}=\frac{1}{e^{-r}}=e^r$</p><p>于是我们证明了</p><p>$$\lim_{h\to 0^+}(1+rh)^{\frac{1}{h}}=\lim_{h\to 0^-}(1+rh)^{\frac{1}{h}}=e^r$$</p><p>也就是$\lim_{h\to 0}(1+rh)^{\frac{1}{h}}=e^r$</p><p>因此,汇总一下,我们发现如下事实:</p><p>$$\lim_{n\to\infty}(1+\frac{x}{n})^n=e^x$$</p><p>$$\lim_{h\to 0}(1+xh)^{\frac{1}{h}}=e^x$$</p><p>当$x=1$的时候:</p><p>$$\lim_{n\to\infty}(1+\frac{1}{n})^n=e$$</p><p>$$\lim_{h\to 0}(1+h)^{\frac{1}{h}}=e$$</p><h2 id="对数函数和指数函数求导"><a href="#对数函数和指数函数求导" class="headerlink" title="对数函数和指数函数求导"></a>对数函数和指数函数求导</h2><h3 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h3><p>设$g(x)=log_b(x)$,那么$g’(x)$为多少呢?</p><p>根据导数的定义,我们有$g’(x)=\lim_{h\to 0}\frac{g(x+h)-g(x)}{h}=\lim_{h\to 0}\frac{log_b(x+h)-log_b(x)}{h}$</p><p>这时候我们使用对数的性质对其进行化简:</p><p>$\lim_{h\to 0}\frac{log_b(x+h)-log_b(x)}{h}=\lim_{h\to 0}\frac{1}{h}\log_b(\frac{x+h}{x})$</p><p>$=\lim_{h\to 0}\log_b(\frac{x+h}{x})^{\frac{1}{h}}=\lim_{h\to 0}\log_b(1+\frac{h}{x})^{\frac{1}{h}}$</p><p>上一节中,我们得到一个结论:$\lim_{h\to 0}(1+xh)^{\frac{1}{h}}=e^x$</p><p>因此在这里,$\lim_{h\to 0}(1+h\frac{1}{x})^{\frac{1}{h}}=e^{\frac{1}{x}}$,故将这个极限带入回去得到</p><p>$g’(x)=\lim_{h\to 0}log_b(1+\frac{h}{x})^{\frac{1}{h}}=log_b(e^{\frac{1}{x}})=\frac{1}{x}log_be$</p><p>于是我们就成功证明了</p><p>$$\frac{d}{dx}log_b(x)=\frac{1}{x}log_b(e)$$</p><p>从这个式子中,我们可以发现,当$x=e$的时候,导数为$\frac{1}{x}$!,其他的任何值都不行呢!这就是$e$叫做<strong>自然对数</strong>的原因了,故</p><p>$$\frac{d}{dx}\ln(x)=\frac{1}{x}$$</p><p>而对于底数不为e的对数来说,使用换底公式会让上面的式子更简洁一些:</p><p>$\frac{1}{x}log_be=\frac{1}{x}\frac{\ln e}{\ln b}=\frac{1}{x}\frac{1}{\ln b}$,因此</p><p>$$\frac{d}{dx}log_b(x)=\frac{1}{x\ln (b)}$$</p><p>那么指数函数呢?设$y=b^x$,于是有$x=log_b(y)$,现在<strong>对其关于y求导</strong>有</p><p>$\frac{dx}{dy}=\frac{1}{y\ln(b)}$</p><p>于是根据链式求导法则,$\frac{dy}{dx}=y\ln(b)$</p><blockquote><p>2019年11月10日21:34:23</p></blockquote><p>说实话我没有想出来为什么这个可以用链式求导法则解释..</p><p>但是我可以用另外一种方法解释这个问题:</p><p>当y变化$\triangle y$的时候,x会变化$\frac{1}{y\ln(b)}\triangle y$,于是当x变化$\frac{1}{y\ln(b)}\triangle y$的时候,为了让y变化$\triangle y$,变化率就应该是原来变化率的倒数,也就是$y\ln(b)$</p><p>于是我们证明了一个很好的公式:</p><p>$$\frac{d}{dx}(b^x)=b^x\ln(b)$$</p><p>当$b=e$的时候,有</p><p>$$\frac{d}{dx}(e^x)=e^x$$</p><p><del>可真有趣呢</del></p><h3 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h3><p><strong>1.求证</strong>$\frac{d}{dx}e^{ax}=ae^{ax}$</p><p><strong>2.求证</strong>$\frac{d}{dx}(e^{x^2}log_3(5^x-sin(x)))=log_3(5^x-sin(x))2xe^{x^2}+e^{x^2}\frac{5^x\ln(5)-cos(x)}{\ln(3)(5^x-sin(x))}$</p><h2 id="指数函数和对数函数的极限问题"><a href="#指数函数和对数函数的极限问题" class="headerlink" title="指数函数和对数函数的极限问题"></a>指数函数和对数函数的极限问题</h2><h3 id="涉及自然对数定义的极限"><a href="#涉及自然对数定义的极限" class="headerlink" title="涉及自然对数定义的极限"></a>涉及自然对数定义的极限</h3><p><strong>1.</strong> 考虑极限$\lim_{h\to 0}(1+3h^2)^{\frac{1}{3h^2}}$</p><p>看到这个极限不免想起自然对数的定义:</p><p>$$e=\lim_{h\to 0}(1+h)^{\frac{1}{h}}$$</p><p>在上面$e$的极限中用$3h^2$替换$h$得到</p><p>$$\lim_{3h^2\to 0}(1+3h^2)^{\frac{1}{3h^2}}$$</p><p>这时注意到当$3h^2\to 0$时,$h\to 0$</p><p>于是</p><p>$$\lim_{h\to 0}(1+3h^2)^{\frac{1}{3h^2}}=e$$</p><p>从上面的论证不难看出,<strong>如果用任意的当</strong>$h\to0$<strong>时自身趋于0的量替换h,那么极限仍然是e</strong>,比如$h=2h^4,h=sin(h)$</p><p><strong>2. 考虑极限</strong>$\lim_{h\to 0}(1+cos(h))^{\frac{1}{cos(h)}}$</p><p>由于$\lim_{h\to 0}cos(h)=1$,因此上面的论证就不能够用在这里了</p><p>我们其实可以直接代值得到</p><p>$$\lim_{h\to 0}(1+cos(h))^{\frac{1}{cos(h)}}=2$$</p><p><strong>3.考虑极限</strong>$\lim_{h\to 0}(1+h^2)^{\frac{1}{3h^2}}$</p><p>不难发现这个式子和自然对数的定义式的差距就在系数上面,因此想办法将系数统一</p><p>$$\lim_{h\to 0}(1+h^2)^{\frac{1}{3h^2}}=\lim_{h\to 0}(1+h^2)^{\frac{1}{h^2}\times\frac{1}{3}}=e^{\frac{1}{3}}$$</p><p>因此$$\lim_{h\to 0}(1+h^2)^{\frac{1}{3h^2}}=e^{\frac{1}{3}}$$</p><p><strong>4.考虑极限</strong>$\lim_{h\to 0}(1-5h^3)^{\frac{2}{h^3}}$</p><p>这时不匹配的现象就更加严重了.但我们仍然尝试着去使其匹配</p><p>$\lim_{h\to 0}(1-5h^3)^{\frac{2}{h^3}}=\lim_{h\to 0}(1-5h^3)^{\frac{1}{-5h^3}\times(-10)}$</p><p>注意到$\lim_{h\to 0}-5h^3=0$</p><p>则原极限$=\lim_{-5h^3\to 0}(1-5h^3)^{\frac{1}{-5h^3}\times(-10)}=e^{-10}$</p><h3 id="指数函数在0附近的行为"><a href="#指数函数在0附近的行为" class="headerlink" title="指数函数在0附近的行为"></a>指数函数在0附近的行为</h3><p>显然,</p><p>$$\lim_{x\to 0}e^x=e^0=1$$</p><p>我们可以利用这一点来进行一些极限的计算</p><p><strong>1.考虑极限</strong>$\lim_{x\to 0}e^{x^2}$</p><p>因为$\lim_{x\to 0}x^2=0$,故可以直接替换得到</p><p>$$\lim_{x\to 0}e^{x^2}=0$$</p><p>和上面的那题很像,<strong>如果用任意的当</strong>$h\to0$<strong>时自身趋于0的量替换h,那么极限仍然是0</strong></p><p><strong>2.考虑极限</strong>$\lim_{x\to 0}\frac{e^{x^2}sin(x)}{x}$</p><p>由于对数是处于乘积(商的形式也差不多)的形式中,我们可以把这个极限写开得到</p><p>$\lim_{x\to 0}e^{x^2}\frac{sin(x)}{x}=1\times 1=1$</p><p><strong>3.考虑极限</strong>$\lim_{x\to \infty}\frac{2x^2+3x-1}{e^{\frac{1}{x}}(x^2-7)}$</p><p>这就是商和乘积的形式的一个综合了,实际上做法和上面那个差不多:</p><p>$\lim_{x\to \infty}\frac{2x^2+3x-1}{e^{\frac{1}{x}}(x^2-7)}=\lim_{x\to \infty}\frac{1}{e^{\frac{1}{x}}}\times\frac{2x^2-3x-1}{x^2-7}$</p><p>由于$\lim_{x\to \infty}\frac{1}{x}=0$,故$\lim_{x\to\infty}e^{\frac{1}{x}}=1$</p><p>因此原极限$=1\times\lim_{x\to\infty}\frac{2x^2-3x-1}{x^2-7}=1\times2=2$</p><p><strong>4.考虑极限</strong>$\lim_{h\to 0}\frac{e^h-1}{h}$</p><p>当对数不处于乘积或商的极限中的时候,把$\lim_{x\to 0}e^x$看成1就不是那么奏效了.但是这题有一个很好的特征:分母上有一个虚拟变量,这就是伪装的导致嘛,因此设$f(x)=e^x$</p><p>根据我们之前对指数函数求导的结论,</p><p>$f’(x)=\lim_{h\to 0}\frac{e^{x+h}-e^x}{h}=e^x\ln(e)=e^x$</p><p>要得到答案,我们只需要把上式中的x变成0,也就是$\lim_{h\to 0}\frac{e^{0+h}-e^0}{h}=e^0$</p><p>于是我们得到一个比较有用的结论:</p><p>$$\lim_{h\to 0}\frac{e^h-1}{h}=1$$</p><p>当然,将h换成相应的匹配的很小的量都是满足条件的(这是多次提到的<strong>替换对应法则</strong>,也就是作者说的<strong>匹配技巧</strong>),例如</p><p>$\lim_{h\to 0}\frac{e^{3s^{5}-1}}{s^{5}}=\lim_{h\to 0}\frac{e^{3s^{5}-1}}{3s^{5}}\times 3=1\times 3=3$</p><h3 id="对数函数在1附近的行为"><a href="#对数函数在1附近的行为" class="headerlink" title="对数函数在1附近的行为"></a>对数函数在1附近的行为</h3><p>(<strong>注意这里是1不是0</strong>)</p><p>$$\lim_{h\to0}\frac{\ln(1+h)}{h}=?$$</p><p>实际上这又是一个导数伪装的极限!(说实话我一开始还真没看出来,看来这种方法还掌握的不咋地啊.导数伪装的极限本质上是构造法的一个应用)</p><p>设$f(x)=\ln(x)$,$f’(x)=\frac{1}{x}$</p><p>于是$\lim_{h\to 0}\frac{\ln(x+h)-\ln(x)}{h}=\frac{1}{x}$</p><p>当$x=1$的时候,原方程可以化为</p><p>$\lim_{h\to 0}\frac{\ln(1+h)-\ln(1)}{h}=\frac{1}{1}$</p><p>$\lim_{h\to 0}\frac{\ln(1+h)}{h}=1$</p><p>于是愉快的证明了</p><p>$$\lim_{h\to0}\frac{\ln(1+h)}{h}=1$$</p><p>这一个结论和预期有很大不同,因为$\ln(1)=0$,但事实就是这样奇怪,可能是因为极限和函数值并没有直接的联系吧(毕竟这个函数在0处没有定义)</p><p>同样的,<strong>匹配技巧</strong>适用于这里</p><p>比如:尝试证明$\lim_{h\to 0}\frac{\ln(1-7h^2)}{5h^2}=-\frac{7}{5}$</p><h3 id="指数函数在无穷处的行为"><a href="#指数函数在无穷处的行为" class="headerlink" title="指数函数在无穷处的行为"></a>指数函数在无穷处的行为</h3><p>根据常识(图像)有:</p><p>$$\lim_{x\to\infty}e^x=\infty,\lim_{x\to-\infty}e^x=0$$</p><p>在这之后,根据我们高中学习的相关知识,不难有:</p><p>$$<br>\lim_{x\to\infty}r^x=\begin{cases}<br>\infty(r&gt;1)\1,r=1\0,0&lt;=r&lt;=1<br>\end{cases}<br>$$</p><p>但是如果不从图像的角度,我们应该如何去证明这个结论呢?</p><p>用到一个技巧:$r^x=e^{\ln(r^x)}=e^{x\ln(r)}$</p><p>于是有$\lim_{x\to \infty}r^x=\lim_{x\to\infty}e^{x\ln(r)}$</p><p>由于r是一个常数,因此对r分类讨论就有</p><p>$$<br>\lim_{x\to\infty}x\ln(r)\to\begin{cases}<br>\infty,r&gt;1\0,r=1\-\infty,0&lt;=r&lt;1<br>\end{cases}<br>$$</p><p>于是乎,利用前面单独对e推出来的结论,我们有</p><p>$$<br>\lim_{x\to\infty}e^{x\ln(r)}=\begin{cases}<br>\infty(r&gt;1)\1,r=1\0,0&lt;=r&lt;=1<br>\end{cases}<br>$$</p><h4 id="指数函数和多项式函数的增速"><a href="#指数函数和多项式函数的增速" class="headerlink" title="指数函数和多项式函数的增速"></a>指数函数和多项式函数的增速</h4><p>一般来讲,设$u$为一个多项式型函数,设$t$为一大的,正的多项式型函数,设$v$为一个常数,那么</p><p>$$\lim_{x\to\infty}\frac{u}{v^t}=0$$</p><p>具体的证明需要使用后面的<strong>洛必达法则</strong>,但是这个还是很好理解的(至少对于OIER来讲是这样子的)</p><p><strong>例题:考虑极限</strong>$\lim_{x\to-\infty}(x^5+3)^{101}e^x$</p><p>设$t=-x$,那么</p><p>$\lim_{x\to-\infty}(x^5+3)^{101}e^x=\lim_{t\to\infty}\frac{(-t^5+3)^{101}}{e^t}=0$</p><h3 id="对数函数在正无穷附近的行为"><a href="#对数函数在正无穷附近的行为" class="headerlink" title="对数函数在正无穷附近的行为"></a>对数函数在正无穷附近的行为</h3><p>因为我们不能够对一个负数取对数,因此不需要研究在负无穷处的对数函数的行为</p><p>因为对于任意正数N,令$x=e^N$,则$ln(x)=N$,由于N可以无穷大,那么$\ln(x)$也可以无穷大.因此就有</p><p>$$\lim_{x\to\infty}\ln(x)=\infty$$</p><h4 id="对数函数的增速"><a href="#对数函数的增速" class="headerlink" title="对数函数的增速"></a>对数函数的增速</h4><p>实际上对数函数增长的十分缓慢,比如说$e^{1000}$,它比宇宙中的原子数目都要大,但它的对数仅仅有1000…</p><p>更详细的说:</p><p>$$\forall a\in(0,\infty],\lim_{x\to\infty}\frac{log_b(x)}{x^a}=0$$</p><h3 id="对数函数在0附近的行为"><a href="#对数函数在0附近的行为" class="headerlink" title="对数函数在0附近的行为"></a>对数函数在0附近的行为</h3><p>根据图像,我们有</p><p>$$\lim_{x\to 0^+}\ln(x)=-\infty$$</p><p><strong>例题:考虑极限</strong>$\lim_{x\to 0^+}x\ln(x)$</p><p>为了利用上面的结论,设$t=\frac{1}{x}$,则:</p><p>$\lim_{x\to 0^+}x\ln(x)=\lim_{t\to \infty}\frac{\ln(\frac{1}{t})}{t}$</p><p>根据上面的结论,你可以把$\ln(\frac{1}{t})$看做一个常数,于是</p><p>$$\lim_{x\to 0^+}x\ln(x)=0$$</p><p>本题中我们用到了一个用$\frac{1}{t}$来代替$x$的技巧,这样就使得我们做出了本题,并且还可以引出另外一个结论:</p><p>$$\forall a\in(0,\infty],\lim_{x\to 0^+}x^a\log_b(x)=0$$</p><h2 id="取对数求导法"><a href="#取对数求导法" class="headerlink" title="取对数求导法"></a>取对数求导法</h2><p>先来看一个例子:求$\frac{d}{dx}x^{sin(x)}$</p><p>看似无从下手,实际上我们可以利用指对数法则解决指数的问题:</p><p>设$y=x^{sin(x)}$</p><p>则</p><p>$$\ln(y)=\ln(x^{sin(x)})=sin(x)\ln(x)$$</p><p>隐函数求导得到</p><p>$$\frac{d}{dx}\ln(y)=\frac{d}{dx}sin(x)\ln(x)$$</p><p>$$\frac{1}{y}\frac{dy}{dx}=cos(x)\ln(x)+sin(x)\frac{1}{x}$$</p><p>$$\frac{dy}{dx}=ycos(x)\ln(x)+sin(x)\frac{y}{x}$$</p><p>将$y=x^{sin(x)}$代入得到</p><p>$$\frac{dy}{dx}=x^{sin(x)}cos(x)\ln(x)+sin(x)\frac{x^{sin(x)}}{x}$$</p><p>因此</p><p>$$\frac{dy}{dx}=x^{sin(x)}(cos(x)\ln(x)+\frac{sin(x)}{x})$$</p><p>这种方法叫做<strong>取对数求导法</strong>,本质是利用对数法则解决指数函数求导问题</p><p>具体的步骤总结如下:</p><p>设要对函数$y=f(x)^{g(x)}$求导,那么</p><ol><li>对等号两边取自然对数,得到$\ln(y)=g(x)\ln(f(x))$</li><li>对等号两边隐函数求导,得到$\frac{1}{y}\frac{dy}{dx}=和x有关的东西$</li><li>同时乘以y,可以得到单独的$\frac{dy}{dx}$这一项,然后用原来的表达式$f(x)^{g(x)}$换掉$y$,就得到了答案</li></ol><p><strong>例题:求</strong>$\frac{d}{dx}((1+x^2)^{\frac{1}{x^3}})$</p><p>设$y=(1+x^2)^{\frac{1}{x^3}}$</p><p>于是</p><p>$$\ln(y)=\ln((1+x^2)^{\frac{1}{x^3}})=x^{-3}\ln(1+x^2)$$</p><p>$$\frac{dy}{dx}\ln(y)=\frac{d}{dx}(x^{-3}\ln(1+x^2))$$</p><p>$$\frac{dy}{dx}\frac{1}{y}=-3x^{-4}\ln(1+x^2)+x^{-3}\frac{d}{dx}\ln(1+x^2)$$</p><p>$$\frac{dy}{dx}=-3yx^{-4}\ln(1+x^2)+yx^{-3}(\frac{d\ln(1+x^2)}{d(1+x^2)}\frac{d(1+x^2)}{dx})$$</p><p>$$\frac{dy}{dx}=-3yx^{-4}\ln(1+x^2)+yx^{-3}(\frac{1}{1+x^2}(2x))$$</p><p>$$\frac{dy}{dx}=\frac{-3y\ln(1+x^2)}{x^4}+\frac{y(\frac{1}{1+x^2}(2x))}{x^3}=y(\frac{2x^2-3(1+x^2)\ln(1+x^2)}{(1+x^2)x^4})$$</p><p>最后</p><p>$$\frac{dy}{dx}=(\frac{2x^2-3(1+x^2)\ln(1+x^2)}{x^4(1+x^2)^{1-\frac{1}{x^3}}})$$</p><p><strong>另外一道例题 求证:</strong></p><p>$$\frac{d}{dx}\frac{(x^2-3)^{100}3^{sec(x)}}{2x^5(log_7(x)+cot(x))^9}=$$</p><p>$$(\frac{200x}{x^2-3}+\ln(3)sec(x)tan(x)-\frac{5}{x}+\frac{9}{log_7(x)+cot(x)}(csc^2(x)-\frac{1}{x\ln(7)}))\\times \frac{(x^2-3)^{100}3^{sec(x)}}{2x^5(log_7(x)+cot(x))^9}$$</p><p>这就留作练习吧~~~</p><h3 id="取对数求导法的另外一个应用"><a href="#取对数求导法的另外一个应用" class="headerlink" title="取对数求导法的另外一个应用"></a>取对数求导法的另外一个应用</h3><p>结合上<strong>复数</strong>可以证明</p><p>$$\forall x\in Z,\frac{d}{dx}(x^a)=ax^{a-1}$$</p><h2 id="指数增长和指数衰变"><a href="#指数增长和指数衰变" class="headerlink" title="指数增长和指数衰变"></a>指数增长和指数衰变</h2><p><strong>一个重要结论:</strong> 设$\frac{dy}{dx}=ky$,那么$y=Ae^{kx}$,其中k为某个常数</p><p>这个结论的证明暂时不提供,这是在第30章才会讨论的东西,但是这个东西很有意思! <strong>一个量的变化量和它自身的大小有关系!</strong> 这其实就是指数增长和衰变的本质了.</p><h3 id="指数增长"><a href="#指数增长" class="headerlink" title="指数增长"></a>指数增长</h3><p>假设有一群兔子,我们设$P(t)$为$t$时刻的种群中兔子的数量,那么根据前面的指数变化的结论,我们将变量稍微换一下就有下面的式子:</p><p>$$P(t)=P_0e^{kt}$$</p><p>接下来讲一下我们是怎么得到这个式子的:</p><p>根据上面的式子:$P(t)=Ae^{kt}$,因此$P(0)=A\times e^{0}=A$</p><p>因此将$A$换成$P(0)$得到上式</p><p>于是我们就有了一个经典的<strong>指数增长方程</strong>如上所示,其中那个比较特殊的变量k是指<strong>增长常数</strong>.(不难发现,兔子们的xing致越高,k越大..<del>马克思列宁主义要求我刹车,好吧..</del>)</p><p><strong>一个例题:</strong></p><p>假设三年前的兔子有1000只,现在增长至64000只,那么从现在算起,一年之后兔子的总数会是多少呢?此外,总数从1000增长到4e5(4后面跟上5个0)需要多长时间呢?</p><p>已知$P_0=1000$,于是$P(t)=1000e^{kt}$</p><p>接下来就需要求出增长常数了</p><p>因为$P(3)=64000$,于是不难求出增长常数为</p><p>$k=2\ln(2)$</p><p>于是就解出了指数增长方程</p><p>$$P(t)=1000e^{2\ln(2)t}$$</p><p>于是接下来的问题就只有初中难度了,第一问的答案是$256000$,第二问的答案是$t=2+\frac{\ln(5)}{\ln(2)}$</p><p>这时不妨感性理解一下:从上面的计算得出,大概要4年才能够有二十五万六千只兔子,但再过大约三个半月左右,就可以有四十万只兔崽子了,这就是指数增长,增长的真的是越来越快</p><h3 id="指数衰变"><a href="#指数衰变" class="headerlink" title="指数衰变"></a>指数衰变</h3><p>众所周知,铀会逐渐衰变成铅元素.假设你有一块铀元素,再假设铀元素在任意的七年周期内衰变的概率是0.5,那么7年后,这块”铀”实际上只有一半是真正的铀原子了,在此基础上再过7年,就只有一半的一半铀原子,也即是0.25的铀原子,在过7年,0.125……它会衰变的越来越慢.</p><p>因此,设$P(t)$是铀原子在时刻$t$时候时的存余量,根据指数变化的本质(在自身基础上的变化)那么就可以建立方程:</p><p>$$\frac{dP}{dt}=-kP$$</p><blockquote><p>2019年11月13日21:11:21:说实话我觉着这里没有怎么解释清楚这个方程的来历,但是有了这个方程,以及本节开头那个<strong>重要结论</strong>,后面的东西都还是比较合理的</p></blockquote><p>这里的负号意思是说P是以一个和P成正比例的速率衰变的.你拥有的原子越多,衰变的越快,这和上面的例子是一致的.</p><p>因此,重复上面的推理过程,将$P(t)$代入,不难得到方程</p><p>$$P(t)=P_0e^{-kt}$$</p><p>这时我们把$-k$叫做衰变常数</p><p>我们一般还把某些原子数量减半的时间长度叫做<strong>半衰期</strong>,每过一个半衰期,$P$就要乘一个0.5</p><p>在上面的铀元素的例子中,我们可以尝试求出衰变常数:设$t=7$,于是有$P(7)=\frac{1}{2}P_0$,于是有方程</p><p>$\frac{1}{2}P_0=P_0e^{-7k}$</p><p>$\frac{1}{2}=e^{-7k}$</p><p>取对数得到$\ln(\frac{1}{2})=-7k$</p><p>于是$k=\frac{\ln(2)}{7}$</p><p>于是就得出了衰变方程</p><p>$$P(t)=P_0e^{-t(\frac{\ln(2)}{7})}$$</p><p>用同样的推理方式可以得到一个<strong>通用公式</strong>:</p><p>设半衰期为$t_1$,则</p><p>$$P(t)=P_0e^{-\frac{\ln(2)}{t_1}t}$$</p><p><strong>一个例题:</strong></p><p>假设有50t铀矿,半衰期仍然是7年,那么10年后铀矿中还剩多少铀原子呢?且需要多久,铀矿中会只剩1t铀原子呢?</p><p>正如我们之前所见,衰变方程是</p><p>$$P(t)=P_0e^{-t(\frac{\ln(2)}{7})}$$</p><p>由于$P_0=50$,则$P(t)=50e^{-t(\frac{\ln(2)}{7})}$</p><p>因此将$t=10$代入,可以得到一个近似值$18.4t$</p><p>第二问中,将$P(t)=1$代入,取一次对数,然后得到了$t=\frac{7\ln(50)}{\ln(2)}$</p><p>带入一个近似值得到$39$年</p><h2 id="双曲函数"><a href="#双曲函数" class="headerlink" title="双曲函数"></a>双曲函数</h2><p>定义<strong>双曲余弦函数</strong>和<strong>双曲正弦函数</strong> 为</p><p>$$cosh(x)=\frac{e^x+e^{-x}}{2}$$</p><p>$$sinh(x)=\frac{e^x-e^{-x}}{2}$$</p><p>这和三角函数在定义上并没有什么太大关系对吧</p><p>但是,$cosh^2(x)-sinh^2(x)=\frac{e^{2x}+2e^0+e^{-2x}}{4}-\frac{e^{2x}-2e^0+e^{-2x}}{4}=\frac{2+2}{4}=1$</p><p>除开那个减号,其他的就和三角函数有点像了对吧</p><p>接下来对双曲函数求导试试看:</p><p>$\frac{d}{dx}sinh(x)=\frac{d}{dx}(\frac{e^x-e^{-x}}{2})=\frac{e^x}{2}+\frac{e^{-x}}{2}=cosh(x)$</p><p>另外一方面,$\frac{d}{dx}cosh(x)=\frac{d}{dx}(\frac{e^x}{2}+\frac{e^{-x}}{2})=\frac{e^x-e^{-x}}{2}=sinh(x)$</p><p>这也就是说:</p><p>$$\frac{d}{dx}sinh(x)=cosh(x) \ , \ \frac{d}{dx}cosh(x)=sinh(x)$$</p><p>接下来就是各种其他的双曲线函数了,比如</p><p>$tanh^2(x)=\frac{sinh(x)}{cosh(x)},sech(x)=\frac{1}{cosh(x)},csch(x)=\frac{1}{sinh(x)},coth(x)=\frac{1}{tanh(x)}$</p><p>同样的,我们可以用求导法则求出如下结论:</p><p>$$\frac{d}{dx},tanh(x)=sech^2(x),\frac{d}{dx}sech(x)=-sech(x)tanh(x)$$</p><p>$$\frac{d}{dx}csch(x)=-csch(x)coth(x),\frac{d}{dx}coth(x)=-csch^2(x)$$</p><h1 id="Chapter-VIII-反函数和反三角函数"><a href="#Chapter-VIII-反函数和反三角函数" class="headerlink" title="Chapter VIII 反函数和反三角函数"></a>Chapter VIII 反函数和反三角函数</h1><p>暂时跳过</p><h1 id="Chapter-IX-导数和图像"><a href="#Chapter-IX-导数和图像" class="headerlink" title="Chapter IX 导数和图像"></a>Chapter IX 导数和图像</h1><h2 id="函数的极值"><a href="#函数的极值" class="headerlink" title="函数的极值"></a>函数的极值</h2><h3 id="全局极值和局部极值"><a href="#全局极值和局部极值" class="headerlink" title="全局极值和局部极值"></a>全局极值和局部极值</h3><p>极值,这个定义其实是很粗糙的,特别是当你看了下面的定义后:</p><p>定义:</p><p>当$x=a$的时候,$f(a)$是函数$f$整个<strong>定义域</strong>里面的极值,我们就叫它为<strong>全局极值(绝对极值)</strong></p><p>在包含$a$的一小段区间内,如果在$x=a$处,$f(a)$有最大值,我们就把这点称作<strong>局部极值</strong>,或者是<strong>相对极值</strong></p><p>很明显,每一个全局极值一定是某些局部的极值,且以上两个极值个数可能不止一个</p><h3 id="极值定理"><a href="#极值定理" class="headerlink" title="极值定理"></a>极值定理</h3><p>前面章节里,我们提到过一个<strong>最大值最小值定理</strong>,也就是,<strong>连续函数</strong>在一个闭区间$[a,b]$内一定有一个全局极值.当然如果函数不是连续的,或者说区间是一个开区间,那么可能就没有极值</p><p>但是上面这个有点粗糙的定理并没有告诉我们极值的位置.</p><p>但是联系上导数仔细一想,我们发现在极值处导数为0或者不存在!于是就引出了极值定理:</p><p><strong>极值定理:</strong> 假设函数$f$定义在<strong>开区间</strong>$(a,b)$内,并且点$c$在$(a,b)$区间内,如果点$c$为函数的局部最大值或最小值,那么$f’(c)=0$或不存在</p><p><strong>注意:</strong> 这个命题正着说是正确的,但是反过来就不对了.也就是说<strong>导数值为0或不存在的点(不妨叫做临界点)一定是局部最大值或最小值</strong>就不一定成立</p><p>上述定理仅适用于开区间,具体原因可以利用函数$f(x)=x^3$来思考</p><p>那么如果非要考虑闭区间又怎么办呢?那就需要多考虑一下两个端点的函数值了(如果你仔细想过$x^3$这个例子你就会明白的)</p><h3 id="求全局最大值和最小值"><a href="#求全局最大值和最小值" class="headerlink" title="求全局最大值和最小值"></a>求全局最大值和最小值</h3><p>有了极值定理,求函数的最大值和最小值就易如反掌了(只要你会求导并且会分析函数)</p><p>因为每一个全局极值就是局部极值,局部极值只可能出现在导数为0或不存在的临界点,于是找出临界点并求出对应的函数值,其中最大的就是全局最大值,最小的就是全局最小值.</p><p>用步骤来描述就是:</p><ol><li>找出$f’(x)$,并且列出在$(a,b)$中的临界点</li><li>将所有的临界点和端点$x=a$,$x=b$的函数值全部求出来</li><li>在这些值中间找个处极值即可</li></ol><p><strong>例题</strong>:</p><p>求证:$f(x)=12x^5+15x^4-40x^3+1,x\in[-1,2],$则$f(x)\in[-12,305]$</p><p><strong>注意:当函数的定义域没有什么限制的时候,列表里可能会有正负无穷这一临界点.这个时候如果正负无穷对应的极限值为极值,那么函数就可以认为没有极值</strong></p><h2 id="罗尔定理"><a href="#罗尔定理" class="headerlink" title="罗尔定理"></a>罗尔定理</h2><p><strong>罗尔定理</strong>: 假设函数$f$在闭区间$[a,b]$内连续,且在开区间$(a,b)$内可导,如果$f(a)=f(b)$,那么在开区间$(a,b)$内至少存在一点$c$,使得$f’(c)=0$</p><p>这其实很好理解的,举个生动的例子:你开着飞船从地球出发飞到了冥王星,我在地球上看着你起飞.让我们假设你的轨道只能是直线,如果多年后我再次看见你的飞船出现在地球上,那么我可以断言,在这段时间内的某一个时刻,你的飞船的速度为0.</p><p>因为你的轨道是直线,因此你如果想要回来的话,你一定需要刹车,然后掉头,或者说倒着开回来.那么在这个过程中你的飞船一定会有一个时候是静止的.</p><p><strong>例题:</strong></p><p>假设函数$f$的二阶导数处处存在,且对于所有的实数x,$f’’(x)&gt;0$,求证函数和x轴至多有两个交点</p><h2 id="中值定理"><a href="#中值定理" class="headerlink" title="中值定理"></a>中值定理</h2><p><strong>中值定理</strong>: 假设函数$f$在闭区间$[a,b]$内连续,且在开区间$(a,b)$内可导,如果$f(a)=f(b)$,那么在开区间$(a,b)$内至少存在一点$c$,使得$f’(c)=\frac{f(b)-f(a)}{b-a}$</p><p>再次举一个例子理解这个问题:</p><p>设$f(t)$是你在时刻$t$的位移,你开始和结束运动的时刻分别为$a$和$b$,那么你的平均速度就可以表示为$\frac{f(b)-f(a)}{b-a}$,而$f’(c)$就是你在时刻c的瞬时速度.由于你在这个过程中一定会由一个比均速低的速度加速到比均速高的速度,因此在某个时刻你的速度一定会等于平均速度</p><p><strong>练习:</strong> </p><ul><li><p>利用中值定理推导出罗尔定理</p></li><li><p>证明方程$2xe^{x^2}-e+1=0$有解(可以使用介值定理和中值定理)</p></li></ul><p><strong>中值定理证明本题的方法(本质是构造法):</strong></p><p><img src="https://img-blog.csdnimg.cn/20191114115029366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>有函数$f(x)$满足对于所有的实数x处处可导且$f’(x)&gt;4$,试证明此函数的图像和线性函数$y=3x-2$最多只有一个交点</li></ul><h3 id="中值定理的几个推论"><a href="#中值定理的几个推论" class="headerlink" title="中值定理的几个推论"></a>中值定理的几个推论</h3><p><strong>1.如果一个函数在区间内任意一点处的导数都为0,那么这个函数一定是一个常数函数</strong></p><p>证明:</p><p>固定一点a,则对于任意的b,有</p><p>由中值定理可得:$f’(t)=\frac{f(a)-f(b)}{a-b},t\in(a,b)$</p><p>将导数为0代入则有$f(a)-f(b)=0$,也就是$f(a)=f(b)$</p><p>函数值处处相等,这就是常数函数嘛</p><p>得证</p><p><strong>2.如果对于任意实数x都有</strong> $f’(x)=g’(x)$, <strong>那么</strong> $f(x)=g(x)+C,C$ <strong>是常数</strong></p><p>证明:</p><p>由于$f’(x)=g’(x)$,则$f’(x)-g’(x)=0$,如果设$h(x)=f(x)-g(x)$,那么$h’(x)=0$</p><p>正如前面的所说的一样,$h(x)$是一个常数函数,不妨设为$C$</p><p>那么就有$C=h(x)-g(x)$,得证</p><p><strong>2.如果函数的导函数始终为正,那么函数为增函数</strong></p><p>证明:</p><p>设$a&gt;b$</p><p>则有$f’(t)=\frac{f(a)-f(b)}{a-b}$</p><p>因为$a-b&gt;0$,所以$f(a)-f(b)&gt;0,f(a)&gt;f(b)$</p><p>由于对于任意的$a&gt;b$都有$f(a)&gt;f(b)$,函数是增函数</p><p>(导数为负也可以用同样的思路证明的)</p><h2 id="二阶导数和图像"><a href="#二阶导数和图像" class="headerlink" title="二阶导数和图像"></a>二阶导数和图像</h2><p>二阶导数实际上可以告诉我们很多关于图像的信息</p><p>假设对于区间$x\in(a,b),f’’(x)&gt;0$,那么就可以得到结论,在这个区间内导函数$f’(x)$始终是增函数</p><p>为什么呢?不妨把导函数看做一个函数,那么二阶导就是这个函数的一阶导,而由于前面中值定理的推论,一个函数在一个区间内如果导数为正,那么这个函数是一个增函数</p><p>好了,既然是一个增函数,那么在区间$(a,b)$中,函数的斜率始终在增加,于是我们定义这种情况为<strong>凹向上函数</strong>,就像这样:</p><p><img src="https://img-blog.csdnimg.cn/20191114160747384.png" alt="在这里插入图片描述"></p><p>当二阶导为负的时候,情况就反了过来,这时我们把这种情况定义为<strong>凹向下</strong>,就像这样:</p><p><img src="https://img-blog.csdnimg.cn/20191114160910853.png" alt="在这里插入图片描述"></p><p>最后我们定义一个东西,<strong>拐点</strong></p><p>拐点左侧的函数的凹性和右侧的凹性不同</p><p>当然了,<strong>只要拐点处存在二阶导,那么它一定等于0,而如果二阶导等于0,此处不一定是拐点</strong></p><p>拐点有一个典型的特征:拐点一边的曲线一定在切线之上,另一边在切线之下,就像这样:</p><p><img src="https://img-blog.csdnimg.cn/20191114161717507.png" alt="在这里插入图片描述"></p><h2 id="对导数为零的点的分类"><a href="#对导数为零的点的分类" class="headerlink" title="对导数为零的点的分类"></a>对导数为零的点的分类</h2><p>假设有一个函数以及一个常数c使得$f’(c)=0$,那么这个点到底有什么特殊呢?</p><p>首先可以很确定的说,$c$是函数$f$的临界点</p><p>其次呢,可能$x=c$是局部最最大值,或是最小值,还可能是水平拐点.画出来大概就这几种情况</p><p><img src="https://img-blog.csdnimg.cn/201911141628515.png" alt="在这里插入图片描述"></p><p>但具体是哪个情况呢?这时我们可以使用导数(一次导数和二次导数)来解决这个分类问题</p><h3 id="使用一次导数"><a href="#使用一次导数" class="headerlink" title="使用一次导数"></a>使用一次导数</h3><p>假设$f’(c)=0$,这时有:</p><ul><li>如果从左往右通过c点,一次导数的符号由正变负,那么c点为局部最大值</li><li>如果从左往右通过c点,一次导数的符号由负变正,那么c为局部最小值</li><li>如果从左往右通过c点,一次导数的符号不发生变化,那么c点位水平拐点</li></ul><p>画一下图像就可以很好的理解这个问题了</p><h3 id="使用二阶导数"><a href="#使用二阶导数" class="headerlink" title="使用二阶导数"></a>使用二阶导数</h3><p>假设$f’(c)=0$,则:</p><ul><li>如果$f’’(c)&lt;0$,那么$x=c$为局部最大值</li><li>如果$f’’(c)&gt;0$,那么$x=c$为局部最小值</li><li>如果$f’’(c)=0$,那么对不起,你不能够判断发生了什么,你需要使用一阶导来解决这个问题</li></ul><p>画一下图像就可以明白这个的意思了</p><h1 id="Chapter-X-绘制函数图像"><a href="#Chapter-X-绘制函数图像" class="headerlink" title="Chapter X 绘制函数图像"></a>Chapter X 绘制函数图像</h1><p>暂时跳过</p><h1 id="Chapter-XI-最优化和线性化"><a href="#Chapter-XI-最优化和线性化" class="headerlink" title="Chapter XI 最优化和线性化"></a>Chapter XI 最优化和线性化</h1><p>(2020,2,22:我回来啦!!<del>为什么这天的数字这么二啊</del>)最优化和线性化是微积分的两个实际应用,具体有多实际呢,看了就知道了哈.</p><h2 id="最优化"><a href="#最优化" class="headerlink" title="最优化"></a>最优化</h2><p>最优化是什么意思,很简单,就是让一件事情尽可能的好,具体怎么好呢,这要看你的评价标准了.但是无论如何,这个最优一定可以**表现为一个数量的最大或最小,**因此我们接下来要讨论其实是最大化和最小化</p><h3 id="一个最优化的一科四暗牧破-example"><a href="#一个最优化的一科四暗牧破-example" class="headerlink" title="一个最优化的一科四暗牧破(example)"></a>一个最优化的一科四暗牧破(example)</h3><p>很简单,求$f(x)=x(10-x),x\in [2,8]$的最大值</p><p>根据前面讲到的方法,我们列出潜在最大值点有x=2,8,5.</p><p>2,8是因为其作为端点,5是因为这里的导数值为0</p><p>然后代值得到最大值存在于当x=5时,此时我们分析的问题有最优解</p><h3 id="最优化的一般方法"><a href="#最优化的一般方法" class="headerlink" title="最优化的一般方法"></a>最优化的一般方法</h3><p>由上面的简单试探我们可以归纳出一般方法:</p><p>首先要得到一个只和一个变量有关的函数关系</p><p>然后对其求导,得出临界点</p><p>之后再代入值,得到最优解</p><h2 id="线性化"><a href="#线性化" class="headerlink" title="线性化"></a>线性化</h2><p>线性化就是使用导数去估算特定的量,很巧妙的一种方法</p><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>让我们来估算$\sqrt 11$吧</p><p>一般来讲,我们会用代值法计算,但这里提供一种不一样的方法</p><p><img src="https://i.loli.net/2020/02/22/cHYPiwI3tkzAnQ1.png" alt="无标题.png"></p><p>看图中的那条直线,这是函数在点(9,3)的切线.发现没有,这条直线在9~11这片区域和函数很接近,几乎可以说是一样的,因此我们如果把这个切线的方程求出来后代入x=11就可以得到一个很好的近似了.</p><p>经过计算,这条直线的方程为$y-3=\frac{1}{6}(x-9)$,代入11得到$\sqrt 11$约等于$3\frac{1}{3}$,也就约为3.317,是一个比较精确的答案</p><h1 id="Chapter-XII-洛必达法则和极限问题总结"><a href="#Chapter-XII-洛必达法则和极限问题总结" class="headerlink" title="Chapter XII 洛必达法则和极限问题总结"></a>Chapter XII 洛必达法则和极限问题总结</h1><p>暂时跳过</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数学 </category>
          
          <category> 微积分 </category>
          
          <category> 普林斯顿微积分读本阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一届CSP-S复赛复习</title>
      <link href="/2019/11/10/%E7%AC%AC%E4%B8%80%E5%B1%8ACSP-S%E5%A4%8D%E8%B5%9B%E5%A4%8D%E4%B9%A0/"/>
      <url>/2019/11/10/%E7%AC%AC%E4%B8%80%E5%B1%8ACSP-S%E5%A4%8D%E8%B5%9B%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>是不是有点晚了?管那么多呢!</p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=260 src="//music.163.com/outchain/player?type=0&id=3072955366&auto=1&height=430"></iframe><blockquote><p>2019年11月11日15:34:08 鉴于今天上午考试爆炸,我提前开始写这篇博客.</p></blockquote><p>复习什么呢?板子!当然更重要的是:遇到一题的时候的思维模式</p><h1 id="一些语法"><a href="#一些语法" class="headerlink" title="一些语法"></a>一些语法</h1><h1 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">lowbit</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">=</span>a<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://blog.csdn.net/weixin_43907802/article/details/99999518">原理分析</a></p><h1 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h1><h2 id="模拟退火"><a href="#模拟退火" class="headerlink" title="模拟退火"></a>模拟退火</h2><p><a href="https://blog.csdn.net/weixin_43907802/article/details/86685666">板子</a></p><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">loop</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1000000</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>ll data<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lazy<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>q<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span>ll rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span>ll rt<span class="token punctuation">,</span>ll len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    lazy<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>    lazy<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>    sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">buildtree</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">buildtree</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">buildtree</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll nl<span class="token punctuation">,</span>ll nr<span class="token punctuation">,</span>ll rt<span class="token punctuation">,</span>ll num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>nl<span class="token operator">&amp;&amp;</span>nr<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">+=</span>num<span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>nr<span class="token operator">-</span>nl<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>num<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span>nr<span class="token operator">-</span>nl<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token punctuation">(</span>nl<span class="token operator">+</span>nr<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">>=</span>l<span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>nl<span class="token punctuation">,</span>m<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">query</span><span class="token punctuation">(</span>ll l<span class="token punctuation">,</span>ll r<span class="token punctuation">,</span>ll nl<span class="token punctuation">,</span>ll nr<span class="token punctuation">,</span>ll rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>nl<span class="token operator">&amp;&amp;</span>nr<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span>nr<span class="token operator">-</span>nl<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll m<span class="token operator">=</span><span class="token punctuation">(</span>nl<span class="token operator">+</span>nr<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>ans<span class="token operator">+=</span><span class="token function">query</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>ans<span class="token operator">+=</span><span class="token function">query</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>nl<span class="token punctuation">,</span>m<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//freopen("datain.txt","r",stdin);</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">buildtree</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> op<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            ll l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            ll a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">query</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exgcd-扩展欧几里得算法"><a href="#exgcd-扩展欧几里得算法" class="headerlink" title="exgcd 扩展欧几里得算法"></a>exgcd 扩展欧几里得算法</h2><p><strong>模版</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89789729">板子</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ll <span class="token function">exgcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">,</span>ll <span class="token operator">&amp;</span>x<span class="token punctuation">,</span>ll <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> g<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token operator">=</span>y<span class="token punctuation">;</span>    y<span class="token operator">=</span>x<span class="token operator">-</span>a<span class="token operator">/</span>b<span class="token operator">*</span>y<span class="token punctuation">;</span>    x<span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token keyword">return</span> g<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h2><p><a href="https://blog.csdn.net/weixin_43907802/article/details/89415360">链接</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">loop</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">anti_loop</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">>=</span>end<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clean</span><span class="token expression"><span class="token punctuation">(</span>arry<span class="token punctuation">,</span>num<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span>num<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arry<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">max</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">min</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>root<span class="token punctuation">,</span>mod<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> e<span class="token punctuation">;</span><span class="token keyword">int</span> nxt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>edge<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dep<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>son<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>siz<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//x的深度，重儿子，子树点个数，父节点</span><span class="token keyword">int</span> top<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>rev<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//x的重链头，在线段树中的位置，rev[x]指线段树中位置x对应的点</span>ll sum<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lazy<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>T neg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>r<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>neg<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>r<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    x<span class="token operator">*=</span>neg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lazy<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">,</span>lazy<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//等价于lazy[rt]*(mid-l+1)</span>        sum<span class="token punctuation">[</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//等价于lazy[rt]*(r-(mid+1)+1)</span>        <span class="token comment">//这里注意加括号，否则优先级不正确代价很大</span>        lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">=</span>num<span class="token punctuation">[</span>rev<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意大小于符号的方向！</span>    <span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> nl<span class="token punctuation">,</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">int</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>nl<span class="token operator">&amp;&amp;</span>nr<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>nl<span class="token operator">+</span>nr<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    ll _sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>l<span class="token punctuation">)</span>_sum<span class="token operator">+=</span><span class="token function">query</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>_sum<span class="token operator">+=</span><span class="token function">query</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> _sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> nl<span class="token punctuation">,</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>nl<span class="token operator">&amp;&amp;</span>nr<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">+=</span>w<span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>nr<span class="token operator">-</span>nl<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>w<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">pushdown</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>nl<span class="token operator">+</span>nr<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>l<span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pushup</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//第二个dfs维护出seg，rev，top三个数组</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//一定要先维护重儿子的标记，使得在线段树区间内重链连续排列</span>        seg<span class="token punctuation">[</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        rev<span class="token punctuation">[</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>        top<span class="token punctuation">[</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>top<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs2</span><span class="token punctuation">(</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//维护完重儿子后再维护轻儿子</span>        <span class="token keyword">int</span> v<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>top<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//排除掉重儿子和父节点</span>            seg<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            rev<span class="token punctuation">[</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span>            top<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span>            <span class="token function">dfs2</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> f<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//第一次dfs维护出fa，dep，siz，son四个数组</span>    fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">;</span>    dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>dep<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    siz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> v<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">dfs1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        siz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+=</span>siz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>siz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">></span>siz<span class="token punctuation">[</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span>v<span class="token operator">:</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addl</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token operator">=</span>v<span class="token punctuation">;</span>    edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//回答函数</span>    <span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> op<span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">read</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">read</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> fx<span class="token operator">=</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>fy<span class="token operator">=</span>top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>fx<span class="token operator">!=</span>fy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token operator">&lt;</span>dep<span class="token punctuation">[</span>fy<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>fx<span class="token punctuation">,</span>fy<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">update</span><span class="token punctuation">(</span>seg<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>                x<span class="token operator">=</span>fa<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token punctuation">,</span>fx<span class="token operator">=</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">></span>dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">update</span><span class="token punctuation">(</span>seg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">read</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> fx<span class="token operator">=</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>fy<span class="token operator">=</span>top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>fx<span class="token operator">!=</span>fy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token operator">&lt;</span>dep<span class="token punctuation">[</span>fy<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>fx<span class="token punctuation">,</span>fy<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token operator">+=</span><span class="token function">query</span><span class="token punctuation">(</span>seg<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token operator">%=</span>mod<span class="token punctuation">;</span>                x<span class="token operator">=</span>fa<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token punctuation">,</span>fx<span class="token operator">=</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">></span>dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token operator">+=</span><span class="token function">query</span><span class="token punctuation">(</span>seg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>res<span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x<span class="token punctuation">,</span>z<span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">read</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">update</span><span class="token punctuation">(</span>seg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>siz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span>seg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>siz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"datain.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token function">clean</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clean</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clean</span><span class="token punctuation">(</span>siz<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clean</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clean</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clean</span><span class="token punctuation">(</span>lazy<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">read</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">read</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">read</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ui<span class="token punctuation">,</span>vi<span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span>ui<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">read</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addl</span><span class="token punctuation">(</span>ui<span class="token punctuation">,</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addl</span><span class="token punctuation">(</span>vi<span class="token punctuation">,</span>ui<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs1</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    top<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span>root<span class="token punctuation">,</span>seg<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>rev<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>root<span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//由于dfs2中无法对根节点赋值，因此要在dfs2以前将根的三个参数全部赋值完毕</span>    <span class="token comment">//seg[0]代表线段树中的点的个数</span>    <span class="token function">dfs2</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> prime<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//v[i]意思就是i的最小质因子</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">shai</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">clean</span><span class="token punctuation">(</span>prime<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clean</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//若i是质数,记录</span>prime<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">loop</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//对i乘上一个质因子prime[j],要保证这个质因子是i*prime[j]的最小质因子</span><span class="token comment">//(其实就是尝试用i和prime[j]组合成一个数)</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>n<span class="token operator">||</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//如果i的最小质因子比prime[j]小,那么就不用再乘了</span>v<span class="token punctuation">[</span>i<span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//否则记录</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h2><h3 id="手写版本"><a href="#手写版本" class="headerlink" title="手写版本"></a>手写版本</h3><p>(<a href="https://blog.csdn.net/weixin_43907802/article/details/87476686">感觉已经来不及复习了,而且性价比太低了</a>)</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">loop</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">100000</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>T neg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">></span><span class="token string">'9'</span><span class="token operator">||</span>r<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>neg<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>r<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    x<span class="token operator">*=</span>neg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> f<span class="token punctuation">;</span>    <span class="token keyword">int</span> siz<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span>    <span class="token keyword">int</span> son<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>tree<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> numofp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>root<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">getpos</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">=</span>tree<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">+</span>tree<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">+</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Ro</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> f<span class="token operator">=</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span><span class="token keyword">int</span> ff<span class="token operator">=</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token operator">=</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token function">getpos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> posx<span class="token operator">=</span><span class="token function">getpos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> posf<span class="token operator">=</span><span class="token function">getpos</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>posx<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>f<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>ff<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>posf<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>ff<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>posx<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">;</span>    tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token comment">//same!</span>    <span class="token function">update</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">update</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Splay</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> to<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">!=</span>to<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> f<span class="token operator">=</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">,</span>ff<span class="token operator">=</span>tree<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ff<span class="token operator">!=</span>to<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getpos</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">getpos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">Ro</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">Ro</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">Ro</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>root<span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> _p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> cur<span class="token operator">=</span>root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">&amp;&amp;</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">!=</span>w<span class="token punctuation">)</span>_p<span class="token operator">=</span>cur<span class="token punctuation">,</span>cur<span class="token operator">=</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>w<span class="token operator">></span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        cur<span class="token operator">=</span><span class="token operator">++</span>numofp<span class="token punctuation">;</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">=</span>w<span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>tree<span class="token punctuation">[</span>numofp<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token operator">=</span>_p<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>_p<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>_p<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>w<span class="token operator">></span>tree<span class="token punctuation">[</span>_p<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">]</span><span class="token operator">=</span>cur<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">Splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">_find</span><span class="token punctuation">(</span><span class="token keyword">int</span> _w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span>root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">!=</span>_w<span class="token operator">&amp;&amp;</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">&lt;</span>_w<span class="token punctuation">]</span><span class="token punctuation">)</span>cur<span class="token operator">=</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">&lt;</span>_w<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">getrank</span><span class="token punctuation">(</span><span class="token keyword">int</span> _w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">_find</span><span class="token punctuation">(</span>_w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">&lt;</span>_w<span class="token punctuation">)</span><span class="token keyword">return</span> tree<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">+</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> tree<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">_findKth</span><span class="token punctuation">(</span><span class="token keyword">int</span> _x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span>root<span class="token punctuation">;</span>    <span class="token keyword">int</span> _rank<span class="token operator">=</span>_x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>_rank<span class="token operator">&lt;=</span>tree<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">)</span>cur<span class="token operator">=</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>_rank<span class="token operator">&lt;=</span>tree<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">+</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">)</span><span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token keyword">else</span> _rank<span class="token operator">-=</span>tree<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">+</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">,</span>cur<span class="token operator">=</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token keyword">int</span> _w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">_find</span><span class="token punctuation">(</span>_w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">&lt;</span>_w<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cur<span class="token operator">=</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">bac</span><span class="token punctuation">(</span><span class="token keyword">int</span> _w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">_find</span><span class="token punctuation">(</span>_w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">></span>_w<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token operator">=</span>tree<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cur<span class="token operator">=</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> _w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fr<span class="token operator">=</span><span class="token function">pre</span><span class="token punctuation">(</span>_w<span class="token punctuation">)</span><span class="token punctuation">,</span>ba<span class="token operator">=</span><span class="token function">bac</span><span class="token punctuation">(</span>_w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Splay</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Splay</span><span class="token punctuation">(</span>ba<span class="token punctuation">,</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> _del<span class="token operator">=</span>tree<span class="token punctuation">[</span>ba<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>_del<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">--</span>tree<span class="token punctuation">[</span>_del<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">,</span><span class="token function">Splay</span><span class="token punctuation">(</span>_del<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> tree<span class="token punctuation">[</span>ba<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">register</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">register</span> <span class="token keyword">int</span> opt<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    <span class="token function">in</span><span class="token punctuation">(</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">in</span><span class="token punctuation">(</span><span class="token operator">-</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">read</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">in</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">del</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">getrank</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token function">_findKth</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token function">pre</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token function">bac</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="STL版本"><a href="#STL版本" class="headerlink" title="STL版本"></a>STL版本</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">loop</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">anti_loop</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">>=</span>end<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clean</span><span class="token expression"><span class="token punctuation">(</span>arry<span class="token punctuation">,</span>num<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span>num<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arry<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">max</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">min</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>T neg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">></span><span class="token string">'9'</span><span class="token operator">||</span>r<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>neg<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>r<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    x<span class="token operator">*=</span>neg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">register</span> <span class="token keyword">int</span> op<span class="token punctuation">,</span>x<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>vec<span class="token punctuation">;</span><span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    vec<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            vec<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>vec<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>vec<span class="token punctuation">[</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>vec<span class="token punctuation">[</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">-</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LIS-LCS"><a href="#LIS-LCS" class="headerlink" title="LIS,LCS"></a>LIS,LCS</h2><p><a href="https://blog.csdn.net/weixin_43907802/article/details/96433490">记得<strong>看看</strong>!</a></p><h1 id="小学奥数题-amp-思维题"><a href="#小学奥数题-amp-思维题" class="headerlink" title="小学奥数题&amp;思维题"></a>小学奥数题&amp;思维题</h1><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88910217">noip 2012 D1T1 luogu P1079 Vigenère 密码</a></p><p>不要去傻傻的打表,去发现这个大表里面的公式.(当然如果降智降得厉害,打表也不是不行)</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86617154">noip 2017 Day1 T1 小凯的疑惑</a></p><p>这题真的是…..一言难尽,尝试打表吧,证明不出来的</p><h1 id="不-基础算法"><a href="#不-基础算法" class="headerlink" title="(不)基础算法"></a>(不)基础算法</h1><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/87875516">【noip 2015 D1T1】P2615 神奇的幻方</a></p><p>模拟即可</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86616019">noip 2017 Day1 T2 时间复杂度</a></p><p>大模拟..</p><h2 id="随机化"><a href="#随机化" class="headerlink" title="随机化"></a>随机化</h2><p>这是个好东西,但是慎用</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88926984">luogu P2210 Haywire</a></p><p><strong>模拟退火!</strong>,记得<strong>看一下</strong>,骗分利器!</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86700146">JSOI2004 平衡点 / 吊打XXX</a></p><p><strong>模拟退火模版题</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88914313">noip 2012 Day2 T2 P1080 国王游戏</a></p><p>根本不会猜贪心的蒟蒻只能够用随机化了,能够水60分呢</p><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88599380">MZOJ P1420 ABCDEF</a></p><p>记得<strong>复习</strong>!</p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100010412">POJ2676/3074 Sudoku</a></p><p>数独,让人自闭的码农题,不想说了</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/99988172">luogu P1731 [NOI1999]生日蛋糕</a></p><p>关键是剪枝,<strong>使用了放缩法剪枝!</strong>(感觉自己一辈子都用不来的东西)</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/99984684">luogu P1120 小木棍 ［数据加强版］</a></p><p>搜索+剪枝</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/90740234">luogu P1074 靶形数独</a></p><p>爆搜啊</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/90112945">luogu P1118 [USACO06FEB]数字三角形Backward Digit Su…</a></p><p>杨辉三角(组合数)加速搜索</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/90110694">luogu P3956 棋盘</a></p><p>记忆化搜索</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/87871754">【noip 2015 Day1 T3】luogu P2668 斗地主</a></p><p>这搜索是真的煎熬..</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86747656">Luogu P1141 01迷宫</a></p><p>BFS染色</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86635872">[USACO08FEB]流星雨Meteor Shower</a></p><p>BFS搜索即可</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86632665">mzoj 1345 英雄 hero</a></p><p>宽搜,注意对弹簧的判断</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86631446">mzoj P1344 工作依赖</a></p><p>思路很简单,可以<strong>看看</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86763012">Luogu P1092 虫食算</a></p><p>注意搜索顺序</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86649598">Luogu P1189 SEARCH</a></p><p>这题输入非常鬼畜</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86642731">vijos P1159 打水</a></p><p><strong>迭代加深</strong>,这是个好东西,记得<strong>复习</strong>!</p><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100122917">UVA11090 Going in Cycle!!</a></p><p>关键是发现其中的单调性.其实大部分的二分都是这样</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/87535596">codevs 1021 玛丽卡</a></p><p>可以用分层图解决,但是也可以二分套spfa,是一个经典模型了</p><h3 id="01分数规划"><a href="#01分数规划" class="headerlink" title="01分数规划"></a>01分数规划</h3><p><a href="https://andrew82106.github.io/2019/09/06/01%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92%E7%9A%84%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/#more">模型在这里了</a></p><p>一般遇到题就想办法去抽象出这个模型就可以了.而且一般来讲,这种算法只能够求<strong>最优比率</strong></p><p>最好在考前手推一下这些个题</p><p><strong>例题</strong>们:</p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100829241">luogu P3199 [HNOI2009]最小圈</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100629553">luogu P4377 [USACO18OPEN]Talent Show</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100592814">luogu P2868 [USACO07DEC]观光奶牛Sightseeing Cows</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100587262">POJ P2728 Desert King</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100585150">POJ 2976 Dropping tests</a></p><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86708353">luogu P1438 无聊的数列</a></p><p><strong>一阶差分</strong>+线段树</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/87116403">luogu P4231 三步必杀</a></p><p><strong>二阶差分!</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/96493802">LOJ #10131. 「一本通 4.4 例 2」暗的连锁</a></p><p>树上差分好题一枚.将每条主要边的权值定义为经过它的附加边的条数,这样一来就可以枚举每一条主要边然后得解了</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88355926">luogu P3128 [USACO15DEC]最大流Max Flow(树上差分之点差分板子题)</a></p><p>树上差分<strong>模版</strong>,点差分</p><h1 id="DP-动态规划"><a href="#DP-动态规划" class="headerlink" title="DP(动态规划)"></a>DP(动态规划)</h1><p><a href="https://blog.csdn.net/weixin_43907802/article/details/89844820">某一次DP测试(有时间就<strong>看看</strong>也行)</a></p><h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><p><strong>NOIP2018道路铺设</strong>:</p><p>对于第i个坑,要么被前面的一起填掉,要么自己还要新开一个坑,于是设高度d,分类讨论:</p><p>$$<br>f[i]=\begin{cases}<br>f[i-1] \ (d[i-1]&lt;=d[i])\f[i-1]+d[i-1]-d<a href="d%5Bi-1%5D%3Ed%5Bi%5D">i</a><br>\end{cases}<br>$$</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/97685226">「一本通 6.2 练习 2」[USACO08DEC] Patting Heads 轻拍牛头</a></p><p>这题关键是要注意到能够被整除的数之间的关系</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89604421">luogu P1025 数的划分</a></p><p>这题还比较值得研究,其中的<strong>划分形DP</strong>和<strong>去重</strong>的处理都很有借鉴意义</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88765021">luogu P1164 小A点菜</a></p><p>状态设计来自于答案,考虑转移的时候尝试考虑决策或”考虑最后一步”即可找出方程然后AC</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88762479">luogu P2062 分队问题</a></p><p>一个有效的经验:<strong>数组无序的时候,进行等效的排序</strong>,状态设计仍然来自于答案,考虑转移的时候仍然尝试考虑决策</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88757320">luogu P1541 乌龟棋</a></p><p>很简单的暴力DP,状态设计仍然来自于答案…(省略几个字)..但是暴力DP现在luogu上不能拿满分了</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88718680">luogu P1977 出租车拼车</a></p><p>仍然秉承上面的原则就可以做出这题</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88650927">luogu P2066 机器分配</a></p><p>继续秉承上面的原则就可以做出这题</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88620761">luogu P3399 丝绸之路</a></p><p>仍然继续秉承上面的原则就可以做出这题</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88756954">luogu P1439 【模板】最长公共子序列——【LIS的nlogn解法详解】</a></p><p>是一个很好的利用离散化的例子,可以<strong>复习</strong>一下</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86681834">120718 测试 NOIP 模拟题 T3 最大数列</a></p><p>比较经典的模型:<strong>求一个序列中两个不相交连续的子序列的最大和</strong>,利用了前缀和和后缀和思想解题</p><h2 id="棋盘DP"><a href="#棋盘DP" class="headerlink" title="棋盘DP"></a>棋盘DP</h2><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86679406">120718 测试 NOIP 模拟题 T2迷宫</a></p><p>棋盘DP,统计最短路条数</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86661262">noip 2008 T3 luogu P1006 传纸条</a></p><p>棋盘DP,可以<strong>复习</strong>一下</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86633874">noip 2000 Day2 T6 方格取数</a></p><p>好像是和前面这题神似呢</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86651376">noip 2002 普及组 T4 过河卒</a></p><p>有时候有一些题看上去可以用搜索,但实际上只能够使用棋盘DP来解决,这里列出来的棋盘DP大都是这个样子</p><h2 id="数位DP"><a href="#数位DP" class="headerlink" title="数位DP"></a>数位DP</h2><p>这个考试遇到了只有狗带的份</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/91491843">luogu P2602 [ZJOI2010]数字计数</a></p><h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><p><a href="https://blog.csdn.net/weixin_43907802/article/details/97169456">两道区间DP</a></p><h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><p><a href="https://blog.csdn.net/weixin_43907802/article/details/85221550">总结过的博客</a></p><p><del>但是树形DP还是学的巨水无比</del></p><h2 id="状态压缩DP"><a href="#状态压缩DP" class="headerlink" title="状态压缩DP"></a>状态压缩DP</h2><p>二进制状压一般用作表示集合中元素的选取情况,使用条件(特征)是$2^n$比较小(考到3进制状压算我倒霉好吧)</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86659376">[SCOI2005]互不侵犯 Luogu P1896</a></p><p>状压DP入门之一</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88743835">luogu P2704 [NOI2001]炮兵阵地</a></p><p>一道经典状压DP,注意状态的设计和很多细节</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86655828">[SCOI2007]排列 luogu P4163</a></p><p>一道不错的状压题目,核心仍然是利用状态压缩在表示集合的选取然后进行DP</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/102329473">luogu P4363 [九省联考2018]一双木棋chess</a></p><p>这是我做到的比较好的一题了.这题的关键是想到<strong>可以用一条从左下到右上的对角线来表示当前棋盘的状态</strong></p><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/96029101">luogu P1064 金明的预算方案</a></p><p>这题依赖的物品数比较少,因此可以用分组背包来解决,就懒得去打一个树形DP了</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/95970148">信息学奥赛一本通P1271：【例9.15】潜水员</a></p><p>二维费用背包<strong>模版</strong>题(都快忘了,记得<strong>复习</strong>)</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/95727268">luogu P2918 [USACO08NOV]买干草Buying Hay</a></p><p>完全背包(非<strong>模版</strong>)+估计上限</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/95726674">luoguP1833 樱花</a></p><p>二进制拆分对混合背包非常有效!</p><p>资料:<a href="https://blog.csdn.net/weixin_43907802/article/details/95520385">背包问题详解!</a></p><h2 id="树形DP-1"><a href="#树形DP-1" class="headerlink" title="树形DP"></a>树形DP</h2><p><a href="https://blog.csdn.net/weixin_43907802/article/details/90577361">luogu P2986 [USACO10MAR]伟大的奶牛聚集Great Cow Gat…</a></p><p>树的重心,重点,记得<strong>复习</strong>!</p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/90548307">这一篇的T3</a></p><p>树的重心和最小生成树的综合</p><h1 id="字符串算法"><a href="#字符串算法" class="headerlink" title="字符串算法"></a>字符串算法</h1><p>这个考到了基本上$CSP$就没了</p><h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88763447">luogu P1481 魔族密码</a></p><p>巧妙的使用字典树避免了DP的各种煞笔细节(字典树还是可以<strong>看一下</strong>的)</p><h2 id="manacher算法"><a href="#manacher算法" class="headerlink" title="manacher算法"></a>manacher算法</h2><p><a href="https://blog.csdn.net/weixin_43907802/article/details/88381256">luogu P3805 【模板】manacher算法</a></p><p>有时间就去看下吧(估计也不会去看~~)</p><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p><a href="https://blog.csdn.net/weixin_43907802/article/details/85527041">链接</a></p><p>就这样了,不敢再说什么了</p><h2 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h2><p><a href="https://blog.csdn.net/weixin_43907802/article/details/84869366">链接</a></p><p>不要去想了~~</p><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="强连通分量SCC"><a href="#强连通分量SCC" class="headerlink" title="强连通分量SCC"></a>强连通分量SCC</h2><p>一般来讲,考scc的题都是要分析联通性和scc里面的某些特殊性质的</p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/90577982">总结过的博客</a></p><p><strong>模版</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/90312358">luogu P3387 【模板】缩点</a></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100546826">luogu P1726 上白泽慧音</a></p><p>认真读题后发现是个<strong>模版</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100074179">UVA - 247 Calling Circles</a></p><p>认真读题后也发现是个<strong>模版</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/90512295">loj #10094. 「一本通 3.5 练习 2」消息的传递</a></p><p>裸<strong>模版</strong>题</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/90293444">luogu P2341 [HAOI2006]受欢迎的牛</a></p><p>关键是要分析出来连接关系</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100536036">P2921 [USACO08DEC]在农场万圣节Trick or Treat on the Farm</a></p><p>这题乍一看不是很简单,实际上分析出scc里面的性质:<strong>一个奶牛获得的糖果数等于其所在scc的点的糖果总数</strong>,就是一道<strong>模版</strong>题罢了</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/90344986">loj #10095 P1262 间谍网络</a></p><p>tarjan+贪心</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/99627441">luogu P2515 [HAOI2010]软件安装</a></p><p>缩点后树形DP(树形DP学的太菜,走了~~)</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/90511940">luogu P2746 #10093. [USACO5.3]校园网Network of Schools</a></p><p>需要稍加分析,得出结论<strong>答案为入度和出度的差</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/90519005">loj #10092 luogu P2272 [ZJOI2007]最大半连通子图</a></p><p>这题主要是太多数学符号了,看得人眼花缭乱的.其实不算特别难</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/90513997">loj #10096 luogu P3627 [APIO2009]抢掠计划</a></p><p>tarjan+spfa/拓扑排序,收集在我的luogu题库里面的一道<strong>模版</strong>题</p><h2 id="MST问题-最小生成树"><a href="#MST问题-最小生成树" class="headerlink" title="MST问题(最小生成树)"></a>MST问题(最小生成树)</h2><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/87626762">luogu P2330 [SCOI2005]繁忙的都市</a></p><p>稍加分析后可以发现本题就是求一个MST</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86776811">luogu P1340 兽径管理</a></p><p>不断加边的kruskal</p><h2 id="树链剖分-1"><a href="#树链剖分-1" class="headerlink" title="树链剖分"></a>树链剖分</h2><p>这个东西,板子还比较熟练,但是做过的题少有比较好的呢</p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/95212971">总结过的链接</a></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89420871">luogu P3178 [HAOI2015]树上操作</a></p><p>模版</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89429854">luogu P3833 [SHOI2012]魔法树</a></p><p>模版</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89601964">luogu P3038 [USACO11DEC]牧草种植Grass Planting</a></p><p>边权转点权的树链剖分</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89555455">luogu P3950 部落冲突</a></p><p>边权转点权的树链剖分</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89531056">luogu P2146 [NOI2015]软件包管理器</a></p><p>这是一个比较好的树链剖分题了.要分析出依赖关系从而得到操作的本质和树链剖分支持的操作的关系</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89431159">P3258 [JLOI2014]松鼠的新家</a></p><p>可以用树上差分做,同时可以用树剖.</p><h3 id="树链剖分求lca"><a href="#树链剖分求lca" class="headerlink" title="树链剖分求lca"></a>树链剖分求lca</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88542197">luogu P3398 仓鼠找sugar</a> </p><p>关键是一个很好的性质:<strong>某一条路径起点和终点的LCA被包含在另外一条路径上</strong>,可反证证明</p><h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100822052">luogu P4943 密室</a></p><p>关键是<strong>意识到两个角色的等价性以及拥有大力分类讨论的意识</strong>,入手点为<strong>考虑路径可能经过的点的情况</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100547417">luogu P2384 最短路</a></p><p>关键是能够知道<strong>出现了乘法,我们可以用对数来将其转化为加法</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100116038">UVA10537 The Toll! Revisited</a></p><p>秉承<strong>正难则反</strong>的原则,反向跑最短路,再加一点分类讨论即可</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100083952">It’s not a Bug, it’s a Feature! UVA - 658</a></p><p>用状态压缩来表示bug的有无（0没有，1有),然后就可以把每个bug的状态表示的数看做点，然后就可以从（11111…111）开始，枚举每一个补丁(lrj大佬说这叫做隐式图搜索)，判断并且进行状态转移</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/99684510">P2176 [USACO14FEB]路障Roadblock</a></p><p>暴力即可</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/97623556">luogu P1608 路径统计</a></p><p>最短路计数,经典问题了.不要忘了怎么转移数量的!最好考前<strong>看看</strong>(<a href="https://blog.csdn.net/weixin_43907802/article/details/87539372">最短路计数<strong>模版</strong></a>)</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89597876">luogu P1280 尼克的任务</a></p><p>本是DP,但是是可以转化为图论模型的,值得借鉴的一个思路</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/87389323">luogu P1339 [USACO09OCT]热浪Heat Wave</a></p><p>模版</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/87345208">P2850 [USACO06DEC]虫洞Wormholes</a></p><p>spfa判负环,<a href="https://blog.csdn.net/weixin_43907802/article/details/87343303">模版</a>记得<strong>复习</strong>!</p><h3 id="分层图最短路"><a href="#分层图最短路" class="headerlink" title="分层图最短路"></a>分层图最短路</h3><p><a href="https://www.cnblogs.com/andrew82/p/11377712.html">系统整理过的博客~~</a></p><p><strong>例题</strong>们:</p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100085337">UVA11374 Airport Express</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100043897">luogu P4011 孤岛营救问题 #10073. 「一本通 3.2 例 2」拯救大兵瑞恩</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/99730390">luogu P3831 [SHOI2012]回家的路</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/99655897">luogu P4568 [JLOI2011]飞行路线</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/99650287">luogu P3119 [USACO15JAN]草鉴定Grass Cownoisseur</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/87603968">MZOJ 行动！行动!</a></p><h3 id="最短路树-图"><a href="#最短路树-图" class="headerlink" title="最短路树(图)"></a>最短路树(图)</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100106518">UVA1416 Warfare And Logistics</a></p><p>利用最短路图优化的暴力,因为<strong>删除的边如果不在最短路图上,那么整个图中不会有某个点的最短路数组dis[i]被改变</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100107552">UVA10917 Walk Through the Forest</a></p><p>可以从最短路图的角度去理解,还可以直接暴力理解~~</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100112012">CF1005F Berland and the Shortest Paths</a></p><p>最短路(图)树有很多很好的性质,其中之一就体现在这个题里面.<del>我们也许可以尝试去往题里面套算法?</del>,利用反证法可以得出最短路图就是本题的最优答案</p><h3 id="差分约束"><a href="#差分约束" class="headerlink" title="差分约束"></a>差分约束</h3><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100185233">差分约束算法原理博客</a></p><p><a href="https://www.cnblogs.com/andrew82/p/11444839.html">系统的整理过题型的博客</a></p><p>考前好好<strong>看看</strong></p><p><strong>例题</strong>们:</p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100160414">「一本通 3.4 例 1」 POJ 1201-Intervals</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100334772">luogu P4878 [USACO05DEC] 布局</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100177816">luogu P1993 小K的农场</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100308865">poj1275 「一本通 3.4 例 2」出纳员问题</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100205441">luogu P3084 [USACO13OPEN]照片Photo</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100177864">luogu P3275 [SCOI2011]糖果</a></p><p><a href="https://blog.csdn.net/weixin_43907802/article/details/100184160">UVA11478 Halum</a></p><h3 id="次短路"><a href="#次短路" class="headerlink" title="次短路"></a>次短路</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100546826">luogu P2865 [USACO06NOV]路障Roadblocks</a></p><p>重要模型!考前看一看其中的分类讨论</p><h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">loop</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>        <span class="token function">loop</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这三行代码就是这个算法的核心,其中第一行代码可以<strong>大改</strong></p><h3 id="传递闭包"><a href="#传递闭包" class="headerlink" title="传递闭包"></a>传递闭包</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100525274">POJ 1094_Sorting It All Out</a></p><p><del>这是一道实现起来很恶心的题</del>.关键是<strong>把不等关系转化为一个二维数组,利用传递闭包来得到关系长度大于1的点之间的关系</strong></p><h3 id="最短路-amp-最长路"><a href="#最短路-amp-最长路" class="headerlink" title="最短路&amp;最长路"></a>最短路&amp;最长路</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100165283">luogu P1522 牛的旅行 Cow Tours</a></p><p>入手点和前面那道<strong>密室</strong>有点像,都是对最后的答案——在这里就是添加的那条边引起的变化——大力讨论(其实这题讨论不算大力),然后得到相应的答案</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100163069">luogu P1119 灾后重建</a></p><p>关键是:<strong>动态又具有一定单调性限制的最短路就要考虑Floyd</strong>,这时我们是通过修改Floyd最外层的循环得到解的</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/87200112">P2888 [USACO07NOV]牛栏Cow Hurdles</a></p><p>稍微改一下方程即可</p><h3 id="Floyd和矩阵快速幂"><a href="#Floyd和矩阵快速幂" class="headerlink" title="Floyd和矩阵快速幂"></a>Floyd和矩阵快速幂</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100067761">poj3613 ACwing 345：Cow Relays–牛站</a></p><p><del>Floyd和矩阵有着千丝万缕的联系,而矩阵又和快速幂有着说不清道不明的关系,于是Floyd和矩阵快速幂就有千丝万缕的说不清道不明的关系了</del></p><p>关键是推导出这个<strong>广义的矩阵乘法</strong>满足分配率,于是就可以把矩阵乘法替换成”广义矩阵乘法”</p><h3 id="Floyd求无向图最小环"><a href="#Floyd求无向图最小环" class="headerlink" title="Floyd求无向图最小环"></a>Floyd求无向图最小环</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/100034570">一本通 3.2 例 1 Sightseeing Trip</a></p><p><strong>枚举一个k和和它相邻的两个点，看这三个点能否构成一个最小环</strong>,具体实现看代码</p><h2 id="建图技巧"><a href="#建图技巧" class="headerlink" title="建图技巧"></a>建图技巧</h2><h3 id="虚点连边"><a href="#虚点连边" class="headerlink" title="虚点连边"></a>虚点连边</h3><p>虚点连边是一种很有效的优化建边复杂度的方式</p><p><strong>Part1</strong></p><p>我们可能会遇见这样一种题，给你几个点，其他的点离这些给出的点的最近距离是多少。</p><p>我们可以对于每一个点进行最短路，但似乎这样并不是很好操作。</p><p>我们可以自己给出一个点，然后向每个被标记的点连一条单向边，这样就只需要进行一次最短路就可以了。</p><p>举个例子，橙色为标记点，数字为最近距离。</p><p><img src="https://z4a.net/images/2019/02/25/k1ef821096fa7bd112.png"></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/102488361">luogu P3393 逃离僵尸岛</a></p><p><strong>Part2</strong></p><p>如果对于两个点集A和B，你需要对A中的每一个点向B中的每一个点都建一条边，如果直接操作，复杂度很明显是 $O(n^2)$的，有没有更快的方法呢？</p><p>我们可以建一个虚点P，然后对A里的每一个点向P连一条单向边边，然后对P向B中的每一个点建一条单向边，这样只需要$O(2n)$ 的复杂度就可以完成了。</p><p><img src="https://z4a.net/images/2019/02/25/k3.png"></p><h2 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h2><p><a href="https://blog.csdn.net/weixin_43907802/article/details/84705855">链接</a></p><p>没得搞,不会.</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>一类题:<a href="https://www.cnblogs.com/andrew82/p/11372305.html">并查集求连通块</a></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/87875642">【noip 2015 D1T2】luogu P2661 信息传递</a></p><p>并查集求最小环!经典模型,记得<strong>复习</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86596024">noip2017 Day2 T1——cheese</a></p><p>也可以搜索,但是用并查集实现会更加简单</p><h2 id="单调数据结构"><a href="#单调数据结构" class="headerlink" title="单调数据结构"></a>单调数据结构</h2><p>有了单调性,我们就可以很容易的(一般是$O(1)$)的取出某个集合里的最值</p><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/88602295">mzojP1419 浇水</a></p><p>单调栈的<strong>模版</strong>题(但是我都快忘了!),<strong>复习</strong>.</p><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86660762">luogu P1886 滑动窗口</a></p><p>经典的<strong>模版</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/101388148">luogu P1440 求m区间内的最小值</a></p><p>单调队列<strong>模版</strong>,滑动窗口的形式化描述.</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/102329947">luogu P2827 [NOIP 2016] 蚯蚓</a></p><p>这一题的关键是发现:<strong>先被切的蚯蚓中的相应段总是比后被切的蚯蚓中的相应段长</strong>这一单调性.</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/101385664">acwing135. 最大子序和</a></p><p>本题十分经典,求长度不超过m的最大子序列和.<a href="https://blog.csdn.net/qq_30277239/article/details/90017084">关键</a>是<strong>把最大子序和用前缀和的形式表达出来,然后对于每一个位置找前面的最小的前缀和</strong>,从而转化成单调队列的<strong>模版</strong>题.</p><h4 id="单调队列优化DP"><a href="#单调队列优化DP" class="headerlink" title="单调队列优化DP"></a>单调队列优化DP</h4><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/101509908">POJ 1821 Fence</a></p><p>单调队列优化DP使用的条件是:</p><ol><li>最优化(min,max等)</li><li>对象变量的取值范围单向变化(上下界一起向上或向下)</li></ol><p>一般的分析步骤:</p><ol><li>分析对象变量的取值范围</li><li>分析单调队列中的决策的单调性</li></ol><p>具体见上面的链接+<a href="https://blog.csdn.net/weixin_43907802/article/details/101388861">这个链接</a></p><h2 id="带根号的数据结构"><a href="#带根号的数据结构" class="headerlink" title="带根号的数据结构"></a>带根号的数据结构</h2><h3 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h3><p>这可是号称可以解决任何区间问题的算法!优美的暴力,为了骗分最好还是<strong>看一下</strong>!</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89053097">luogu P2709 小B的询问</a></p><p>莫队<strong>模版</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86773471">luogu P1972 [SDOI2009] HH的项链</a></p><p>奇偶优化<strong>模版</strong>(当然现在在luogu上也过不了了)</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86771386">luogu P3901 数列找不同</a></p><h2 id="带对数的数据结构"><a href="#带对数的数据结构" class="headerlink" title="带对数的数据结构"></a>带对数的数据结构</h2><h3 id="线段树-1"><a href="#线段树-1" class="headerlink" title="线段树"></a>线段树</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86702018">luogu P5097 [USACO2004OPEN]Cave Cows 2 洞穴里的牛之二</a></p><p><strong>模版</strong>题</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/102328281">luogu P2824 [HEOI2016/TJOI2016]排序</a></p><p>这题主要是要发现<strong>对一个01序列的排序可以用log级别的线段树来操作</strong>,也就是统计区间的和,然后把前面的赋值为0,后面的赋值为1就行了,本质上是一个区间修改+单点查询的线段树</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/97022865">luogu P2023 [AHOI2009]维护序列</a></p><p>经典的乘法线段树,记得<strong>看看</strong>!</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/96755644">UVA10587 Mayor’s posters</a></p><p>好题一枚!关键是<strong>离散化</strong>和<strong>考虑维护的值</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89815319">luogu P2184 贪婪大陆</a></p><p>关键是发现:<strong>一个区间的结尾必定对应一个在其前面的开头</strong>.若我们查询到这个询问的右界的左边[0,R]有x个地雷区间的开头，左界的左边[0,L-1]有y个地雷区间的结束，由于一个区间的结尾必定对应一个在其前面的开头，故区间[L,R]中颜色的个数就等于x-y，类似于差分的思想</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89785337">luogu P2574 XOR的艺术 P3870 [TJOI2009]开关</a></p><p>和异或相关的位运算.由于异或的封闭性,考虑用lazy标记来保存一个区间被异或的情况.由于一个区间里面的0和1的个数是可以用区间和求出来的,因此这个题就可以只维护一个区间和,也就是一个区间修改和查询的线段树,只是lazy标记有点不一样</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/87807211">luogu P1198 [JSOI2008]最大数</a></p><p>看似要动态开点,实际上可以预先开够空间,然后直接加就行</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/86699856">noip 2012 提高组 Day2 T2 LuoguP1083 借教室</a></p><p>按照时间来建线段树(有一丢丢线段树分治的味道)</p><h4 id="线段树分治"><a href="#线段树分治" class="headerlink" title="线段树分治"></a>线段树分治</h4><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/101373828">「雅礼集训 2018 Day10」贪玩蓝月</a></p><p>基本思想就是:<strong>离线询问,按照时间顺序建线段树,每个节点要保存影响,然后最后一遍dfs求出所有询问</strong>,(但是感觉考场上想得出来也不一定打得出来~~)</p><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/96285856">luogu P2286 [HNOI2004]宠物收养场</a></p><p><strong>模版</strong>题..</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/96175831">luogu P2234 [HNOI2002]营业额统计</a></p><p>稍加分析就知道是一道<strong>模版</strong>题</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/95458075">luogu P1486 [NOI2004]郁闷的出纳员</a></p><p>乍一看以为要写一个区间修改,但实际上只需要保存一个全局变量表记录工资变化量,之后的员工就直接加上这个变化量就可以了</p><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/99543065">约数之和(在这篇文章的后面)</a></p><p>关键是要知道<strong>唯一分解定理及其推论</strong>,然后可以了解一下<strong>分治求等比数列</strong>,这个题可以好好<strong>康康</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/97815154">「一本通 6.4 例 4」曹冲养猪</a></p><p><strong>中国剩余定理</strong>模版****,考前记得<strong>复习</strong>!</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/97792804">「一本通 6.2 练习 5」luoguP1445 [Violet]樱花</a></p><p><del>这是一道狗粮题</del>.关键是会推式子!这个题的推导过程比较有意思,可以<strong>看看</strong>(好像链接里的推导有一点点不影响结果的小错误)</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/97683317">「一本通 6.2 例 1」 UVA10140 Prime Distance[线性筛]</a></p><p>基本思想是<strong>变相打表</strong>,也就是不把所有的表打完,而只打一部分,利用这一部分来取得我们需要的另外一部分</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/97662515">「一本通 6.3 例 1」luogu P1463 [POI2002][HAOI2007]反素数</a></p><p><strong>答案肯定是在小于n里面的因数个数最大的数中最小的一个</strong>,因此根据唯一分解定理,爆搜即可,数据范围有保障的</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/97630183">「一本通 6.4 例 1」 luogu P1516 青蛙的约会</a></p><p><strong>可以把两只青蛙的位置转化为同余意义下的式子,因此可以列出等式从而求解</strong></p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/97618692">UVA756 Biorhythms</a></p><p>中国剩余定理的<strong>模版</strong>,记得<strong>看看</strong>!</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/97614587">luogu P3811 【模板】乘法逆元</a></p><p>乘法逆元的<strong>模版</strong>,这个比较熟了</p><p><strong>资料:</strong><a href="https://blog.csdn.net/weixin_43907802/article/details/97294953">数论锦集!</a></p><h2 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h2><p>这个考到了只有持矢</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/89048090">P2742 【模板】二维凸包 / [USACO5.1]圈奶牛Fencing the Cows</a></p><p>二维凸包$CSP$可能会考吗?估计不会,反正考到只有凉凉</p><p><strong>例题</strong>:<a href="">luogu P1452 Beauty Contest</a><a href="https://blog.csdn.net/weixin_43907802/article/details/89071224">https://blog.csdn.net/weixin_43907802/article/details/89071224</a></p><p>话说这是另外一个叫做$Andrew$的大佬发明的算法,叫做$Andrew$算法呢</p><h2 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h2><p>*<em><strong>模版</strong>:</em>*<a href="https://blog.csdn.net/weixin_43907802/article/details/89840961">luogu P3812 【模板】线性基</a></p><p><del>这个还是和xyx一起学的,但我敢保证我们两个现在都忘了这东西怎么实现了</del></p><h2 id="初级线性代数"><a href="#初级线性代数" class="headerlink" title="初级线性代数"></a>初级线性代数</h2><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/101165247">noip模拟 矩阵加速递推 数学老师的报复</a></p><p>矩阵加速递推式,主要是要会<a href="https://andrew82106.github.io/2019/09/21/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E5%8A%A0%E9%80%9F%E9%80%92%E6%8E%A8%E5%BC%8F%E8%AE%A1%E7%AE%97/#more">构造矩阵</a>.会构造转置矩阵后,使用矩阵快速幂就可以解决问题了(矩阵乘法完美满足结合律!)</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>ll n<span class="token punctuation">,</span>mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>ll k<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">100</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">martix</span><span class="token punctuation">&#123;</span>ll m<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>e<span class="token punctuation">;</span><span class="token keyword">inline</span> ll <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>r<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span>r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>      ans<span class="token operator">=</span>ans<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>r<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>      r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>martix <span class="token function">datasetting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>martix x<span class="token punctuation">;</span>n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      x<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>martix <span class="token function">mut</span><span class="token punctuation">(</span>martix a<span class="token punctuation">,</span>martix b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>martix ans<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>m<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span>   ans<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>ans<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token operator">+</span>a<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">.</span>m<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">printans</span><span class="token punctuation">(</span>martix x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">fastpower</span><span class="token punctuation">(</span>martix x<span class="token punctuation">,</span>ll t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>martix wei<span class="token operator">=</span>x<span class="token punctuation">;</span>martix res<span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token function">mut</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>wei<span class="token punctuation">)</span><span class="token punctuation">;</span>wei<span class="token operator">=</span><span class="token function">mut</span><span class="token punctuation">(</span>wei<span class="token punctuation">,</span>wei<span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printans</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   martix xx<span class="token operator">=</span><span class="token function">datasetting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      e<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token function">fastpower</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/********************************************************************   ID:Andrew_82   LANG:C++   PROG:fast power********************************************************************/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="概率期望"><a href="#概率期望" class="headerlink" title="概率期望"></a>概率期望</h2><p>期望的定义是$\sum P_i\times W_i$</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/101307554">luogu P4316 绿豆蛙的归宿</a></p><p>根据定义dfs,记录距离和概率,最后相加就行</p><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/101204833">「雅礼集训 2018 Day10」足球大战</a></p><p>这题有两个难点:<strong>根据组合数公式列出主队赢球的概率式子</strong>,<strong>发现这个式子是可以O(n)递推的</strong></p><h3 id="期望DP"><a href="#期望DP" class="headerlink" title="期望DP"></a>期望DP</h3><p><strong>例题</strong>:<a href="https://blog.csdn.net/weixin_43907802/article/details/101292760">luoguP1850 NOIP2016 换教室</a></p><p>需要知道<strong>期望的线性性</strong>,也就是期望是可以掰开递推的.具体看博客吧(DP方程太长不好搬运).<del>至于如何掰开,就是强行掰开啊!!</del></p><h1 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h1><blockquote><p>update 2019年12月1日12:00:14</p></blockquote><p>以上的复习内容基本没有压中这次CSP-S的考点,因此,显而易见的,Andrew光荣的省三退役了(虽然成绩还没有出来,但结果是可以预料的)</p><p>这几天的常规学习日子真是不好过啊,毕竟要2个月学完一学期的课程,这工作量不是开玩笑的.</p><p>对了,前几天看到一个同学写的退役记,我觉得写的很有水平呢 <a href="https://blog.csdn.net/qq_25845753/article/details/103080408">这里是传送门!</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 复赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网址小赏</title>
      <link href="/2019/11/09/%E7%BD%91%E5%9D%80%E5%A4%A7%E8%B5%8F/"/>
      <url>/2019/11/09/%E7%BD%91%E5%9D%80%E5%A4%A7%E8%B5%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="OI篇"><a href="#OI篇" class="headerlink" title="OI篇"></a>OI篇</h1><h2 id="ONLINE-JUDGEMENT"><a href="#ONLINE-JUDGEMENT" class="headerlink" title="ONLINE JUDGEMENT"></a>ONLINE JUDGEMENT</h2><p><a href="https://www.luogu.org/">luogu</a>:一个题量中等偏上的刷题网站+一个活跃的讨论社区+一群被机房惨案了的小学生+一群神级管理员=luogu</p><p><img src="https://img-blog.csdnimg.cn/20191109155141593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>(<del>不要在意那么多蒟蒻的细节</del>)</p><p><a href="https://www.nowcoder.com/">牛客网</a>:提供技术类求职备考、社群交流、企业招聘等服务.本质是程序员聚集地</p><p><img src="https://img-blog.csdnimg.cn/20191109155415548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="http://poj.org/">POJ(北京大学在线评测系统)</a>:较为古老的题库,但题目很全很经典,有很多巨佬都在上面刷题和<del>盖楼(评论)</del></p><p><img src="https://img-blog.csdnimg.cn/20191109155448995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://codeforces.com/">codeforces</a>:为数不多的能够被机房电脑访问到的国外OJ.这个俄罗斯 OJ始于 2010 年,创始人是$Mike \ Mirzayanov$,有多种系列的比赛，你也可以出题并申请组织比赛（题目质量高,<del>我每次去打比赛都爆零</del>）</p><p><img src="https://img-blog.csdnimg.cn/20191109155611575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>(右下角的<strong>Top rated</strong>中的top1长期被那个叫<strong>tourist</strong>的大佬占据,但上图中居然被另一位大佬反超)</p><p><a href="https://www.lydsy.com/JudgeOnline/">BZOJ</a>:因原属衡阳八中而得简称(八中OJ)，汇聚多种习题和真题，题目质量高，<del>但很多题需要使用权限</del></p><p><img src="https://img-blog.csdnimg.cn/20191109155112914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><a href="loj.ac">Libreoj</a>:域名吉利(loj.<strong>ac</strong>)并且非常有良心的一个OJ,测试数据随意下载!但是曾经被鸽过一次(好像是被hack了)</p><p><img src="https://img-blog.csdnimg.cn/20191109160201259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><a href="https://www.cometoj.com/">cometoj</a>:比赛比较多,但没怎么在上面做过题</p><p><img src="https://img-blog.csdnimg.cn/2019110916030113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><a href="https://www.acwing.com/">AcWing</a>:北京大学yxc大佬创始的OJ,题目的数据比较水,但是可以系统的刷到<strong>算法竞赛进阶指南</strong>的大部分题,还有一些很有意思的功能,比如知识框图(<strong>AC Saber</strong>)</p><p><img src="https://img-blog.csdnimg.cn/2019110916052251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191109160723485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><a href="https://vjudge.net/">vjudge</a>:超好用的爬虫OJ,它自己并不提供任何题目,但是它搜集其他的大部分OJ的题目,比如<strong>Uva(一个西班牙的OJ)</strong>,<strong>POJ</strong>等,弥补了内地难以翻越万里长城的问题,而且还有很多<del>新手</del><strong>ACM</strong>大学生在上面出一些比赛(<del>作为一个弱鸡高中生,在比赛里完虐比自己更弱的大学生是一件很有成就感的事情</del>)</p><p><img src="https://img-blog.csdnimg.cn/20191109164317967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="http://61.139.95.227:82/">MZOJ</a>:绵阳中学在线评测系统,自家的在线评测系统,也被称为<del>妹子OJ</del>,由于2019年暑假机房事故更新过一次(原来的截图已经找不到了)有很多巨佬在里面出一些奇奇怪怪的题,有很多比赛,很多模版.作为一个$MZ-CSP_{ER}$,我对$MZOI$的未来还是很抱希望的!</p><p><img src="https://img-blog.csdnimg.cn/20191109161432189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="https://oi-wiki.org/">OI-wiki</a>:可以在这里获取关于 编程竞赛知识,这个网站准备了竞赛中的基础知识、常见题型、解题思路以及常用工具等内容，帮助$OIER$(信息学竞赛选手)更快速深入地学习编程竞赛</p><p><img src="https://img-blog.csdnimg.cn/20191109162457713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><a href="https://www.mina.moe/">MiNa!</a>:“MiNa!” 是 “Remmina” 的一个后缀，在日语发音里是 “大家” 的意思.这个网站本质是一个写博客的平台,里面的博客虽然很少,但是内容都很经典</p><p><img src="https://img-blog.csdnimg.cn/20191109162814150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><a href="https://www.csdn.net/">CSDN</a>:一个程序员聚集地,也是一个博客平台,不过里面的博客大多和IT有关(当然里面也有一个叫做<strong>不上清北不改名</strong>的巨佬,从OI(信息学竞赛)退役后就在CSDN上面写常规学习博客)</p><p><img src="https://img-blog.csdnimg.cn/20191109163057511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><a href="https://www.cnblogs.com/">cnblogs</a>:另外一个程序员聚集地和博客平台,相比起CSDN来讲要更加自由一些,博客的各项参数可以自己调,甚至可以自己写代码维护,因此很多人选择用界面老旧的cnblogs而非CSDN</p><p><img src="https://img-blog.csdnimg.cn/20191109163211306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><a href="http://bytew.net/OIer/">OIerDb</a>:一个神奇的爬虫网站,拥有几乎所有参加过比赛的$OIER$和学校的信息,如果感兴趣还可以去GitHub上找到这个网页的源码,将这个网页改装成为任何一个学科竞赛获奖的数据库</p><p><img src="https://img-blog.csdnimg.cn/20191109164202768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191109164221808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><a href="https://visualgo.net/zh">VisuAlgo</a>:一个数据结构和算法动态可视化网站,可视化的讲解数据结构和算法</p><p><img src="https://img-blog.csdnimg.cn/20191109164555779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h1><p><a href="https://www.desmos.com/calculator">desmos</a>:一个在线的坐标系,我在自学微积分时经常用到</p><p><img src="https://img-blog.csdnimg.cn/20191109165210188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://csacademy.com/app/graph_editor/">csacademy</a>:一个图论画图工具,输入数据就可以得到对应的图,研究图论的时候会用到,但有时候连接不稳定</p><p><img src="https://img-blog.csdnimg.cn/20191109165329848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://paste.ubuntu.com/">ubuntu</a>:一个代码中继器,可以保存你的文本文件并且形成一个链接便于分享</p><p><img src="https://img-blog.csdnimg.cn/20191109165656390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="http://oeis.org/">OEIS</a>:输入数列的前几项,你会得到这个数列的通项公式!</p><p><img src="https://img-blog.csdnimg.cn/20191112120010273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="一些好玩的网站"><a href="#一些好玩的网站" class="headerlink" title="一些好玩的网站"></a>一些好玩的网站</h1><p><a href="https://www.allhistory.com/">全历史</a>:顾名思义,就是一个讲述历史的网站,但它能够做的还不止于此.它还可以梳理历史人物的关系!而且还有一个在地图上显示历史的有趣功能</p><p><img src="https://img-blog.csdnimg.cn/20191109165737412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2019110916593759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>(看来列宁和斯大林的关系并不是那么好啊)</p><p><img src="https://img-blog.csdnimg.cn/20191109170026531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/201911091700534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191109170133120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://www.wolframalpha.com/">wolframalpha</a>:WolframAlpha能根据问题直接给出答案,用户在搜索框键入需要查询的问题后，该搜索引擎将直接向用户返回答案，而不是返回一大堆网页链接.而且据说使用恰当的话,这东西可以解决大部分的数学题</p><p><img src="https://img-blog.csdnimg.cn/20191109170534950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191109170709440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><a href="https://brilliant.org/">brilliant</a>:一个全球性的理科学习网站,你可以在里面学各种理科,和全球的人讨论问题,网站还提供每日一题,可能涉及到多方面知识,它会先讲解再提问.里面聚集了很多国际数学和物理竞赛的大佬</p><p><img src="https://img-blog.csdnimg.cn/20191109171116990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191109171332574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 实用网址集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用网址集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左,右</title>
      <link href="/2019/11/06/%E5%B7%A6%E5%92%8C%E5%8F%B3/"/>
      <url>/2019/11/06/%E5%B7%A6%E5%92%8C%E5%8F%B3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8a964e6456c4760fe335c6a2cff202c4135bf6c33a2aef38c98f480d5dcf9a3d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 政治知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 政治术语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普林斯顿微积分读本-阅读笔记</title>
      <link href="/2019/10/24/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E5%BE%AE%E7%A7%AF%E5%88%86%E8%AF%BB%E6%9C%AC-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/10/24/%E6%99%AE%E6%9E%97%E6%96%AF%E9%A1%BF%E5%BE%AE%E7%A7%AF%E5%88%86%E8%AF%BB%E6%9C%AC-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=290 src="//music.163.com/outchain/player?type=1&id=34751245&auto=1&height=430"></iframe><blockquote><p>《普林斯顿微积分读本》特点：是任何单变量微积分教科书的好伙伴：洋溢着非正式的、娱乐性的但非强求的对话语境风格；丰富的在线视频；大量精选例题（从简单到复杂）提供了一步一步的推理过程；定理和方法的证明以及相关应用的说明实现理论应用于实践的目标；详细探讨了诸如无穷级数这样的难点问题。这样的一本经典著作将易用性与可读性以及内容的深度与数学的严谨完美地结合在一起。对于每一个想要掌握微积分的学生来说，《普林斯顿微积分读本》都是极好的资源。当然，非数学专业的学生也将大大受益。-baidu</p></blockquote><span id="more"></span><p><del>各位的饭后笑料来了!</del></p><p>(2019年10月24日21:37:30)虽然我今天什么都不会写,但是我就是想今天新建这篇文章哈哈,毕竟我现在连定积分和不定积分都还没有读到呢.当然,想下载电子版又不想在网上到处找这本书的pdf版本的同志可以私聊!</p><p>话说今天艺术节可真好看,对吧森木同学</p><h1 id="Chapter-I-极限导论"><a href="#Chapter-I-极限导论" class="headerlink" title="Chapter I 极限导论"></a>Chapter I 极限导论</h1><blockquote><p>2019年10月30日09:44:19</p></blockquote><p>这本书的前两章是高中一年级常规内容(函数基础,三角函数基础),因此不做冗余介绍</p><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><p>第一小节是引入<strong>极限</strong>这一概念</p><p>假设有函数$f(x)=x+1 \ (x!=2)$,也就是函数在$x=2$上没有定义,但当x非常接近2的时候,函数的值会非常接近3,于是我们把这个东西写成:</p><p>$\lim_{x\to 2}f(x)=3$,读作:当x趋近2,$f(x)$的极限等于3</p><p>但需要注意的是,这时$f(x)$极限和原来的函数值没有任何关系.也就是说,假如把上面函数改成分段函数(当$x=2$的时候定义函数值为10213,其他的时候为$x+1$),$\lim_{x\to 2}f(x)$还是等于3</p><h2 id="双侧极限-左极限和右极限"><a href="#双侧极限-左极限和右极限" class="headerlink" title="双侧极限,左极限和右极限"></a>双侧极限,左极限和右极限</h2><p><img src="https://i.loli.net/2019/10/30/MIZc1NW2dauvGHU.png" alt="left limits and right limits.PNG"></p><p>考虑上图这样一个分段函数,假设你就是图中那个小人,你从左向右走,在无限接近$x=2$的地方,你的函数值会无限接近1,这个时候我们就定义函数$f(x)$在$x=2$的左极限为1.同理,从右边走过来,函数值会无限接近-2,因此我们定义函数在2处的右极限为-2,写作:</p><p>$$\lim_{x\to 2^-}f(x)=1 \ \ \  \  \  \lim_{x\to 2^+}f(x)=-2$$</p><p>2后面带一个减号就叫做左极限,2后面带一个加号就叫做右极限,而我们上面定义的那种没有带加减号的那种极限叫做双侧极限.</p><p>当左极限和右极限相等的时候才有双侧极限.</p><h2 id="关于极限的存在性"><a href="#关于极限的存在性" class="headerlink" title="关于极限的存在性"></a>关于极限的存在性</h2><p>双侧极限:当且仅当左右极限都存在且相等时双侧极限存在</p><p>左右极限:根据图像判断是否存在(如函数$f(x)=sin(\frac{1}{x})$在趋近0的时候函数值剧烈的在[$0,1$]之间震动,因此这个函数在趋近于0的时候没有左极限和右极限)</p><p>$f(x)=sin(\frac{1}{x})$:</p><p><img src="https://i.loli.net/2019/10/30/IbnKC5YSpeWGocr.png" alt="sinx.PNG"></p><h2 id="无穷处的极限"><a href="#无穷处的极限" class="headerlink" title="无穷处的极限"></a>无穷处的极限</h2><p>除了像上面的那些点的极限外,还有一类很重要的极限:函数在正,负无穷处的极限</p><p>这时的极限就不存在什么左右极限之分了,它就可以直接理解为双侧极限.</p><p>比如上面的函数$f(x)=sin(\frac{1}{x})$,当x趋近于正无穷的时候,$\frac{1}{x}$趋近于0,因此$sin(\frac{1}{x})$趋近于0(三角函数基础!),当然由上面的图像也可以看出来是这样的.同时,$f(x)$是一个奇函数,因此在负无穷处的极限也是趋近于0的,这是可以把函数的极限写成:</p><p>$$\lim_{x\to \infty}sin(\frac{1}{x})=0$$</p><p>$$\lim_{x\to -\infty}sin(\frac{1}{x})=0$$</p><h3 id="极限中的大数和小数"><a href="#极限中的大数和小数" class="headerlink" title="极限中的大数和小数"></a>极限中的大数和小数</h3><blockquote><p>2019年10月30日19:13:29 说实话我现在还没搞明白这一小节是来干什么的..</p></blockquote><p>定义<strong>大数</strong>为绝对值大的数,<strong>小数</strong>为绝对值无限接近0的数.</p><h2 id="由原极限产生新极限"><a href="#由原极限产生新极限" class="headerlink" title="由原极限产生新极限"></a>由原极限产生新极限</h2><p>$\lim_{x\to a}f(x)+\lim_{x\to a}g(x)=\lim_{x\to a}(f(x)+g(x))$</p><p>$\lim_{x\to a}f(x)-\lim_{x\to a}g(x)=\lim_{x\to a}(f(x)-g(x))$</p><p>(<strong>注:仅当极限不为正负无穷的时候极限的加法法则和减法法则有效</strong>)</p><p>$\lim_{x\to a}f(x)\times\lim_{x\to a}g(x)=\lim_{x\to a}(f(x)g(x))$</p><p>$\frac{\lim_{x\to a}f(x)}{\lim_{x\to a}g(x)}=\lim_{x\to a}(\frac{f(x)}{g(x)})$</p><h2 id="渐近线"><a href="#渐近线" class="headerlink" title="渐近线"></a>渐近线</h2><blockquote><p>曲线上一点M沿曲线无限远离原点或无限接近间断点时，如果M到一条直线的距离无限趋近于零，那么这条直线称为这条曲线的渐近线 –baidu</p></blockquote><p>当$\lim_{x\to \infty}f(x)=L$的时候,函数就有一条$y=L$的水平渐近线</p><p>当</p><p>$\lim_{x\to a^+}f(x)=+\infty$</p><p>$\lim_{x\to a^-}f(x)=+\infty$</p><p>$\lim_{x\to a^+}f(x)=-\infty$</p><p>$\lim_{x\to a^-}f(x)=-\infty$</p><p>4个条件中有任何一个条件满足的时候,函数就有一条$x=a$的水平渐近线</p><ul><li>关于渐近线的常见误解(下面的是正确理解)</li></ul><ol><li>一个函数左右两边不一定要有对应的渐进线</li><li>一个函数的渐近线最少0条,最多2条</li><li>函数可以和其渐近线相交,比如$y=\frac{sin(x)}{x}$</li></ol><p>$y=\frac{sin(x)}{x}$和其渐近线:</p><p><img src="https://i.loli.net/2019/10/30/ITgn7JDlUzevFCa.png" alt="sinxDx.PNG"></p><h2 id="Squeeze-Theorem-夹逼定理"><a href="#Squeeze-Theorem-夹逼定理" class="headerlink" title="Squeeze Theorem 夹逼定理"></a>Squeeze Theorem 夹逼定理</h2><p>抛开一切感性因素,我们来谈谈这个定理的内容(算了,后面叫它<strong>三明治定理</strong>):</p><p>三明治定理:</p><p>若$\lim_{x\to x_0}F(x)=\lim_{x\to x_0}G(x)=A$,且若有函数$f(x)$在$x_0$的某邻域(邻近区间)内恒有$F(x)≤f(x)≤G(x)$</p><p>则$\lim_{x\to x_0}f(x)=A$</p><p>说白了就是函数A&gt;B,函数B&gt;C，函数A的极限是X，函数C的极限也是X ，那么函数B的极限就一定是X</p><p>对于单侧极限来讲也差不多的,只是这个时候的不等式成立的区间就只需要考虑$x_0$某一边的邻域了</p><h3 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h3><ul><li> $f(x)=xsin(\frac{1}{x})$,求$\lim_{x\to 0^+}f(x)$</li></ul><p>因为$sin(\frac{1}{x})\in [-1,1]$,因此$xsin(\frac{1}{x})\in[-x,x]$,因此有不等式$-x&lt;=f(x)&lt;=x$</p><p>注意到$\lim_{x\to0+}x=\lim_{x\to0+}-x=0$</p><p>故$\lim_{x\to 0^+}f(x)=0$</p><ul><li>求$\lim_{x\to \infty}\frac{sin(x)}{x}$</li></ul><p>$∵sin(x)\in[-1,1] $</p><p>$∴\frac{sin(x)}{x}\in [-\frac{1}{x},\frac{1}{x}]$</p><p>$∵\lim_{x\to \infty}\frac{1}{x}=\lim_{x\to \infty}-\frac{1}{x}=0$</p><p>$∴\lim_{x\to \infty}\frac{sin(x)}{x}=0$</p><h1 id="Chapter-II-多项式的极限问题"><a href="#Chapter-II-多项式的极限问题" class="headerlink" title="Chapter II 多项式的极限问题"></a>Chapter II 多项式的极限问题</h1><p>本章探究多项式的极限问题,简单来讲,就是做一些练习</p><h2 id="x趋近于a时有理函数的极限"><a href="#x趋近于a时有理函数的极限" class="headerlink" title="x趋近于a时有理函数的极限"></a>x趋近于a时有理函数的极限</h2><p>有理函数:两个多项式之比,形如$\frac{p(x)}{q(x)}$</p><p>试求$\lim_{x\to a}\frac{p(x)}{q(x)}$</p><h3 id="方法一-代入法"><a href="#方法一-代入法" class="headerlink" title="方法一 代入法"></a>方法一 代入法</h3><p>当把a代入有理函数后函数分母不为0,根据连续性,就可以直接把代入得到的值作为极限来使用</p><ul><li>求$\lim_{x\to -1}\frac{x^2-3x+2}{x-2}$</li></ul><p>当x=-1的时候,原多项式值为-2,故$\lim_{x\to -1}\frac{x^2-3x+2}{x-2}=-2$</p><h3 id="方法二-因式分解-代入法"><a href="#方法二-因式分解-代入法" class="headerlink" title="方法二 因式分解+代入法"></a>方法二 因式分解+代入法</h3><p>有时候将a代入有理函数会使得分子分母都为0,这个时候的极限就有很多情况,因此应该使用因式分解将有理函数转化后代值.这里需要使用相关公式和技巧进行因式分解</p><ul><li>求$\lim_{x\to 2}\frac{x^2-3x+2}{x-2}$</li></ul><p> $\lim_{x\to 2}\frac{x^2-3x+2}{x-2}=\lim_{x\to 2}\frac{(x-2)(x-1)}{x-2}=\lim_{x\to 2}(x-1)=1$</p><ul><li>求$\lim_{x\to 3}\frac{x^3-27}{x^4-5x^3+6x^2}$</li></ul><p>注意使用立方差公式:$a^3-b^3=(a-b)(a^2+ab+b^2)$</p><p> $\lim_{x\to 3}\frac{x^3-27}{x^4-5x^3+6x^2}=\lim_{x\to 3}\frac{(x-3)(x^2+3x+9)}{x^2(x^2-5x+6)}$</p><p> $=\lim_{x\to 3}\frac{(x-3)(x^2+3x+9)}{x^2(x-3)(x-2)}=\lim_{x\to 3}\frac{(x^2+3x+9)}{x^2(x-2)}$</p><p>使用代入法得$\lim_{x\to 3}\frac{x^3-27}{x^4-5x^3+6x^2}=\frac{27}{9}=3$</p><h3 id="方法三-微调法"><a href="#方法三-微调法" class="headerlink" title="方法三 微调法"></a>方法三 微调法</h3><p>当使用代入法,分母为0但分子不为0,这个时候在待求点一定有一条垂直渐进线(具体为什么我不知道):</p><p><img src="https://i.loli.net/2019/11/01/DG3N1CThA8OaSzI.png" alt="limitts.PNG"></p><p>(DNE表示没有定义)</p><p>因此如果遇到这种情况,就将自变量值在a附近微调,观察函数值的变化趋势,从而得出结论</p><ul><li>求$\lim_{x\to 1}\frac{2x^2-x-6}{x(x-1)^3}$</li></ul><p>(我一开始的解答..得到了和答案完全相反的结果)</p><p>代入得到$\frac{-5}{0}$,故令$f(x)=\frac{2x^2-x-6}{x(x-1)^3}$</p><p>当x=3时,$f(x)=\frac{18-3-6}{3\times8}=\frac{3}{8}=0.375$</p><p>当x=4时,$f(x)=\frac{32-10}{4\times 27}=\frac{11}{54}=0.2037…$,</p><p>故$f(3)&gt;f(4)$,因此$\lim_{x\to 1^+}\frac{2x^2-x-6}{x(x-1)^3}=+\infty$</p><p>当x=-1时,$f(x)=\frac{2+1-6}{1\times8}=-\frac{3}{8}=-0.375$</p><p>当x=-2时,$f(x)=\frac{8+2-6}{2\times 27}=\frac{2}{27}=$$0.0740…$,</p><p>故$f(-2)&gt;f(-1)$,因此$\lim_{x\to 1^-}\frac{2x^2-x-6}{x(x-1)^3}=-\infty$</p><p>由于左极限和右极限不相等,故$\lim_{x\to 1}\frac{2x^2-x-6}{x(x-1)^3}=DNE$</p><blockquote><p>错误原因:代入的值不够小,不能够保证反应出函数在极限附近的变化规律</p></blockquote><p>代入得到$\frac{-5}{0}$,故令$f(x)=\frac{2x^2-x-6}{x(x-1)^3}$</p><p>分析这个函数在x=1附近的行为</p><p>当x=1的时候,分子为负,当x在1附近时,分子仍然为负;</p><p>而分母中因式x当x在1附近时为正,而因式$(x-1)^3$当x稍稍大于1的时候为正,稍稍小于1的时候为负</p><p>故综合考虑得到:当x略大于1的时候函数值小于0,略小于1的时候函数值大于0,参考图中发现只有第3个图中的图像满足要求,故</p><p>$\lim_{x\to 1+}\frac{2x^2-x-6}{x(x-1)^3}=-\infty$</p><p>$\lim_{x\to 1-}\frac{2x^2-x-6}{x(x-1)^3}=+\infty$</p><p>$\lim_{x\to 1}\frac{2x^2-x-6}{x(x-1)^3}=DNE$</p><ul><li>求$\lim_{x\to 1}\frac{2x^2-x-6}{x(x-1)^2}$</li></ul><p>当x接近1时,分母大于0,分子小于0(略大于1和略小于1都是),故</p><p>$\lim_{x\to 1^+}\frac{2x^2-x-6}{x(x-1)^2}=\lim_{x\to 1^-}\frac{2x^2-x-6}{x(x-1)^2}=\lim_{x\to 1}\frac{2x^2-x-6}{x(x-1)^2}=-\infty$</p><h2 id="x趋近于a时带平方根函数的极限"><a href="#x趋近于a时带平方根函数的极限" class="headerlink" title="x趋近于a时带平方根函数的极限"></a>x趋近于a时带平方根函数的极限</h2><h3 id="技巧-共轭表达式"><a href="#技巧-共轭表达式" class="headerlink" title="技巧 共轭表达式"></a>技巧 共轭表达式</h3><p>共轭表达式:$a+b$的共轭表达式是$a-b$,反之亦然</p><p>本质上是利用平方差公式做分子分母有理化</p><ul><li>求$\lim_{x\to 5}\frac{\sqrt{x^2-9}-4}{x-5}$</li></ul><p>$\lim_{x\to 5}\frac{\sqrt{x^2-9}-4}{x-5}$</p><p>$=\lim_{x\to 5}\frac{\sqrt{x^2-9}-4}{x-5}\times \frac{\sqrt{x^2-9}+4}{\sqrt{x^2-9}+4}$</p><p>$=\lim_{x\to 5}\frac{x^2-25}{(x-5)\times(\sqrt{x^2-9}+4)}$</p><p>$=\lim_{x\to 5}\frac{x+5}{\sqrt{x^2-9}+4}$</p><p>代入5得到$\lim_{x\to 5}\frac{\sqrt{x^2-9}-4}{x-5}=\frac{10}{8}=\frac{5}{4}$</p><h2 id="x趋近于正无穷时带平方根函数的极限"><a href="#x趋近于正无穷时带平方根函数的极限" class="headerlink" title="x趋近于正无穷时带平方根函数的极限"></a>x趋近于正无穷时带平方根函数的极限</h2><h3 id="最高次项决定极限"><a href="#最高次项决定极限" class="headerlink" title="最高次项决定极限"></a>最高次项决定极限</h3><p>令$p’(x)$为多项式$p(x)$的最高次项,则有</p><p>$\lim_{x\to \infty}\frac{p’(x)}{p(x)}=1$</p><p>这个可以简单理解为:非最高次项在$x\to +\infty$的时候的大小和最高次项比起来就像地球大小和一个人的大小一样.正因为我们在估计地球的大小的时候没有考虑一个人的大小,我们在考虑$x\to +\infty$的时候多项式$p(x)$的大小时不会考虑非最高次项的大小,故最高次项就约等于是原多项式了</p><h3 id="简单分式极限"><a href="#简单分式极限" class="headerlink" title="简单分式极限"></a>简单分式极限</h3><p>对于任意的n&gt;0,有</p><p>$\lim_{x\to +\infty}\frac{C}{x^n}=0,C$是常数</p><p>因为分母无限变大,原分式无限接近0</p><h3 id="方法-等效提取法"><a href="#方法-等效提取法" class="headerlink" title="方法 等效提取法"></a>方法 等效提取法</h3><p>当遇到一个多项式的项数多于1项时,将其除以其最高次项再乘其最高次项,然后用简单分式极限中提到的式子来化简即可</p><p>注意:这里不能够直接用最高次项去代替这种方法,因为这种方法会考虑到极限前可能存在的常数,至少常数可以决定符号嘛,而用最高次项直接代替就不能够考虑到这个问题</p><ul><li>求$\lim_{x\to +\infty}\frac{x-8x^4}{7x^4+5x^3+2000x^2-6}$</li></ul><p>$\lim_{x\to +\infty}\frac{x-8x^4}{7x^4+5x^3+2000x^2-6}$</p><p>$=\lim_{x\to +\infty}\frac{\frac{x-8x^4}{-8x^4}\times -8x^4}{\frac{7x^4+5x^3+2000x^2-6}{7x^4}\times 7x^4}$</p><p>$=\lim_{x\to +\infty}\frac{\frac{x-8x^4}{-8x^4}\times -8x^4}{\frac{7x^4+5x^3+2000x^2-6}{7x^4}\times 7x^4}$</p><p>$=\lim_{x\to +\infty}\frac{(\frac{1}{-8x^3}+1)\times -8x^4}{(1+\frac{5}{7x}+\frac{2000}{7x^2}-\frac{6}{7x^4})\times 7x^4}$</p><p>根据$\lim_{x\to +\infty}\frac{C}{x^n}=0$,原式化为</p><p>$=\lim_{x\to +\infty}\frac{(0+1)\times -8x^4}{(1+0+0-0)\times 7x^4}=-\frac{8}{7}$</p><ul><li>求$\lim_{x\to +\infty}\frac{(x^4+3x-99)(2-x^5)}{(18x^7+9x^6-3x^2-1)(x+1)}$</li></ul><p>$\lim_{x\to +\infty}\frac{(x^4+3x-99)(2-x^5)}{(18x^7+9x^6-3x^2-1)(x+1)}$</p><p>$=\lim_{x\to +\infty}\frac{\frac{(x^4+3x-99)}{x^4}\times x^4\times \frac{(2-x^5)}{-x^5}\times-x^5}{\frac{(18x^7+9x^6-3x^2-1)}{x^7}\times x^7\times \frac{(x+1)}{x}\times x}$</p><p>$=\lim_{x\to +\infty}\frac{(1+0+0)\times x^4\times (0+1)\times-x^5}{(18+0-0-0)\times x^7\times (1+0)\times x}$</p><p>$=\lim_{x\to +\infty}-\frac{x^4\times x^5}{18x^8}=-\frac{x}{18}=-\infty$</p><ul><li>求$\lim_{x\to \infty}\frac{2x+3}{x^2-7}$</li></ul><p>$\lim_{x\to \infty}\frac{2x+3}{x^2-7}$</p><p>$=\lim_{x\to \infty}\frac{\frac{2x+3}{2x}\times 2x}{\frac{x^2-7}{x^2}\times x^2}=(\frac{1+0}{1-0})\lim_{x\to \infty}\frac{2}{x}=0$</p><h2 id="x趋近正无穷时多项式型函数的极限"><a href="#x趋近正无穷时多项式型函数的极限" class="headerlink" title="x趋近正无穷时多项式型函数的极限"></a>x趋近正无穷时多项式型函数的极限</h2><p>这里的麻烦点在于可能会出现根号,这使得最高次项不是那么明显,但是操作方式还是差不多,具体来讲就是把根号下的最高次项开方后再进行操作</p><ul><li>求$\lim_{x\to \infty}\frac{\sqrt{16x^4+8}+3x}{2x^2+6x+1}$</li></ul><p>$\lim_{x\to \infty}\frac{\sqrt{16x^4+8}+3x}{2x^2+6x+1}$</p><p>$=\lim_{x\to \infty}\frac{\frac{\sqrt{16x^4+8}+3x}{4x^2}\times4x^2}{\frac{2x^2+6x+1}{2x^2}\times 2x^2}$</p><p>$=\lim_{x\to \infty}\frac{(\sqrt{\frac{16x^4+8}{16x^4}}+\frac{3x}{4x^2})\times 4x^2}{(1+0+0)\times 2x^2}$</p><p>$=\lim_{x\to \infty}\frac{(\sqrt{1+0}+0)\times 4x^2}{(1+0+0)\times 2x^2}$</p><p>$=\lim_{x\to \infty}\frac{4x^2}{2x^2}=2$</p><ul><li>求 $\lim_{x\to \infty}\frac{\sqrt{16x^4+8}+3x^3}{2x^2+6x+1}$</li></ul><p>$\lim_{x\to \infty}\frac{\sqrt{16x^4+8}+3x^3}{2x^2+6x+1}$</p><p>$=\lim_{x\to \infty}\frac{\frac{\sqrt{16x^4+8}}{3x^3}\times3x^3+3x^3}{\frac{2x^2+6x+1}{2x^2}\times 2x^2}$</p><p>$=\lim_{x\to \infty}\frac{\sqrt{\frac{16x^4+8}{9x^6}}\times3x^3+3x^3}{(1+0+0)\times 2x^2}$</p><p>$=\lim_{x\to \infty}\frac{3x^3}{(1+0+0)\times 2x^2}$</p><p>$=\lim_{x\to \infty}\frac{3x^3}{2x^2}=\frac{3}{2}x=\infty$</p><ul><li>求$\lim_{x\to \infty}\frac{\sqrt{4x^6-5x^5}-2x^3}{\sqrt[3]{27x^6+8x}}$</li></ul><p>$\lim_{x\to \infty}\frac{\sqrt{4x^6-5x^5}-2x^3}{\sqrt[3]{27x^6+8x}}$</p><p>$=\lim_{x\to \infty}\frac{\frac{\sqrt{4x^6-5x^5}}{2x^3}\times 2x^3-2x^3}{\frac{\sqrt[3]{27x^6+8x}}{3x^2}\times 3x^2}$</p><p>$=\lim_{x\to \infty}\frac{({\sqrt{\frac{4x^6-5x^5}{4x^6}}})\times 2x^3-2x^3}{\sqrt[3]{\frac{27x^6+8x}{27x^2}}\times 3x^2}$</p><p>$=\lim_{x\to \infty}\frac{(1+0)\times 2x^3-2x^3}{\sqrt[3]{\frac{27x^6+8x}{27x^2}}\times 3x^2}=\frac{0-0}{\sqrt[3]{\frac{27x^6+8x}{27x^2}}\times 3x^2}=0$</p><blockquote><p>错误原因:当两个多项式的最高次项相同的时候,如果这个时候把两个多项式的值直接看成最高次项的值,那么这两个多项式的差就等于0,但实际上这两个多项式的非最高次项不同,故当值趋于正无穷的时候,这两个多项式的差不会等于0.</p></blockquote><p>为了避免分子抵消成0,我们使用共轭表达式的技巧处理这个问题</p><p>$\lim_{x\to \infty}\frac{\sqrt{4x^6-5x^5}-2x^3}{\sqrt[3]{27x^6+8x}}$</p><p>$=\lim_{x\to \infty}\frac{4x^6-5x^5-4x^6}{\sqrt[3]{27x^6+8x}\times(\sqrt{4x^6-5x^5}+2x^3)}$</p><p>$=\lim_{x\to \infty}\frac{-5x^5}{\sqrt[3]{\frac{27x^6+8x}{27x^6}\times 27x^6}\times(\sqrt{\frac{4x^6-5x^5}{4x^6}\times 4x^6}+2x^3)}$</p><p>$=\lim_{x\to \infty}\frac{-5x^5}{3x^2\times(2x^3+2x^3)}=\frac{-5x^5}{12x^5}=-\frac{5}{12}$</p><h2 id="x趋近负无穷时有理函数的极限"><a href="#x趋近负无穷时有理函数的极限" class="headerlink" title="x趋近负无穷时有理函数的极限"></a>x趋近负无穷时有理函数的极限</h2><p>处理方法和上面趋于正无穷的一样,但是有些许要点</p><ul><li><p>$\lim_{x\to -\infty}\frac{C}{x^n}=0,n&gt;=1$</p></li><li><p>$\lim_{x\to -\infty} Cx=-\infty$</p></li><li><p>对于任意偶数n,在替换出根号的时候都要按照负数的规则:$\sqrt[n]{x^n}=-x$</p></li><li><p>扩展第三要点得到:如果x小于0(趋近负无穷),并且想写$\sqrt[n]{x^{某次幂}}=x^m$,那么当且仅当n是偶数且m是奇数的时候$x^m$的前面要加一个负号</p></li></ul><p>**例题:**求证$\lim_{x\to -\infty}\frac{\sqrt{4x^6+8}}{2x^3+6x+1}=-1$</p><h2 id="包含绝对值的极限"><a href="#包含绝对值的极限" class="headerlink" title="包含绝对值的极限"></a>包含绝对值的极限</h2><p>这种极限就根据绝对值内部的符号,考虑两个或更多个不同的x的区间,通过考虑左右极限来得到解</p><p>**例题:**求证$\lim_{x\to 0}\frac{|x|}{x}=\lim_{x\to 0}\frac{|x+2|}{x+2}=DNE$</p><p><strong>求多项式的极限除了上面这些方法外,还有一个重要的方法:三明治定理!</strong></p><h1 id="Chapter-III-连续性和可导性"><a href="#Chapter-III-连续性和可导性" class="headerlink" title="Chapter III 连续性和可导性"></a>Chapter III 连续性和可导性</h1><h2 id="连续性"><a href="#连续性" class="headerlink" title="连续性"></a>连续性</h2><h3 id="在一点处连续"><a href="#在一点处连续" class="headerlink" title="在一点处连续"></a>在一点处连续</h3><p>思考这样一个过程:函数图像上有一点(x,f(x)),在画函数图像的时候如果想要在画这个点的时候不提起笔,那么就应该在画这个点附近的函数图像的时候不提起笔.但有多<strong>附近</strong>呢?要多附近就多附近!这就是极限嘛,故:</p><p>$$如果\lim_{x\to a}f(x)=f(a),函数在点x=a处连续$$</p><p>细化来讲,函数在点x=a处连续,要满足以下条件:</p><ul><li><p>双侧极限$\lim_{x\to a}f(x)存在且有限$</p></li><li><p>函数在点$x=a$处有定义,即f(a)存在</p></li><li><p>$\lim_{x\to a}f(x)=f(a)$</p></li></ul><h3 id="在区间上连续"><a href="#在区间上连续" class="headerlink" title="在区间上连续"></a>在区间上连续</h3><ul><li><p>对于开区间$(a,b)$,函数在区间上连续相当于在区间内所有点连续</p></li><li><p>对于闭区间$[a,b]$,函数在区间上连续相当于:1.在$(a,b)$内函数连续 2.函数在x=a处右连续($\lim_{x\to a^+}f(x)=f(a)$) 3.函数在x=b处左连续($\lim_{x\to b^-}f(x)=f(a)$)</p></li></ul><h3 id="连续函数运算"><a href="#连续函数运算" class="headerlink" title="连续函数运算"></a>连续函数运算</h3><p>对于两个连续函数做加减乘除,甚至将其复合,都会得到另外一个连续函数</p><ul><li>常见的连续函数:x的任意次幂,所有的指数和对数函数,所有的三角函数(除了在渐近线上)</li></ul><p><strong>练习:</strong></p><ul><li>证明函数</li></ul><p>$$g(x)=<br>\begin{cases}<br>xsin(\frac{1}{x}),x!=0\0,x=0<br>\end{cases}<br>$$</p><p>在0处连续</p><p>$∵sin(\frac{1}{x})\in[-1,1]$</p><p>$∴xsin(\frac{1}{x})\in[-x,x]$</p><p>$设k(x)=x,z(x)=-x,f(x)=xsin(\frac{1}{x})$</p><p>$则有z(x)&lt;=f(x)&lt;=k(x),x\in Z$</p><p>$∵\lim_{x\to 0}z(x)=\lim_{x\to 0}k(x)=0$</p><p>$∴\lim_{x\to 0}f(x)=0$(三明治定理)</p><p>$∵g(0)=0,\lim_{x\to 0}g(x)=\lim_{x\to 0}f(x)=0$</p><p>$∴\lim_{x\to 0}g(x)=g(0)$,函数在0处连续</p><ul><li>证明函数$f(x)=\frac{x^2-3x+2}{x-2}$在$x=-1$处连续</li></ul><p><del>(这题有点sb)</del></p><p>$∵x的任意次幂是连续的$</p><p>$∴g(x)=x^2-3x+2,k(x)=x-2是连续的$</p><p>$∴f(x)=\frac{x^2-3x+2}{x-2}在除x=2外的其他点都是连续的$</p><p>$∴f(x)=\frac{x^2-3x+2}{x-2}在x=-1处连续$</p><h3 id="介值定理"><a href="#介值定理" class="headerlink" title="介值定理"></a>介值定理</h3><p>内容:如果$f$在$[a,b]$上连续,且$f(a)&lt;0$且$f(b)&gt;0$,那么在区间$(a,b)$上至少有一点c,使得$f(c)=0$(当然如果条件是$f(a)&gt;0,f(b)&lt;0$也成立)</p><p>扩展:如果 $f在[a,b]上连续,且f(a)&lt;k且f(b)&gt;k,那么在区间(a,b)上至少有一点c,使得f(c)=k$ (当然如果条件是 $f(a)&gt;k,f(b)&lt;k$ 也成立)</p><p>练习:</p><ul><li><p>证明多项式$p(x)=-x^5+x^4+3x+1$在$x=1$和$x=2$之间有一个x轴截距</p></li><li><p>证明方程$x=cos(x)$有一个解</p></li><li><p>证明任意的奇数次多项式至少有一个根(提示:利用$\lim_{x\to \infty}\frac{p(x)}{a_nx^n}=\lim_{x\to -\infty}\frac{p(x)}{a_nx^n}=1$)</p></li></ul><h3 id="最大值最小值定理"><a href="#最大值最小值定理" class="headerlink" title="最大值最小值定理"></a>最大值最小值定理</h3><p>如果$f$在$[a,b]$上连续,那么函数在$[a,b]$上至少有一个最大值和一个最小值</p><h2 id="可导性"><a href="#可导性" class="headerlink" title="可导性"></a>可导性</h2><h3 id="运动学和导数"><a href="#运动学和导数" class="headerlink" title="运动学和导数"></a>运动学和导数</h3><p>运动学和微积分有着千丝万缕的关系.据说微积分的灵感之一就来自于人们研究运动速度的过程.因此这里会从不同于高中物理的角度讨论一些高中物理中的运动学问题</p><h4 id="平均速率"><a href="#平均速率" class="headerlink" title="平均速率"></a>平均速率</h4><p>这是最粗糙的描述物体运动状态的物理量了,相关量的公式是:$速率=\frac{距离}{时间}$</p><p>准确来讲,等号左边的速率应该叫做<strong>平均速率</strong>,因为分母上的时间是一段时间</p><h4 id="平均速度"><a href="#平均速度" class="headerlink" title="平均速度"></a>平均速度</h4><p>上面的公式中,用位移代替距离,我们得到一个稍微精准一点的物理量:平均速度</p><p>$平均速度=\frac{位移}{时间}$</p><h4 id="瞬时速度"><a href="#瞬时速度" class="headerlink" title="瞬时速度"></a>瞬时速度</h4><p>如果令$v_{t\to u}$指汽车在开始于时刻t终止于时刻u这一时间段上的平均速度,那么</p><p>$时刻t的瞬时速度=\lim_{u\to t}v_{t\to u}$</p><p>更进一步,如果令$f(t)$为汽车在时刻t的位置,那么</p><p>$v_{t\to u}=\frac{f(u)-f(t)}{u-t}$</p><p>按照这种方式来表示的话,时刻t的瞬时速度就可以表示为</p><p>$\lim_{u\to t}\frac{f(u)-f(t)}{u-t}$</p><p>当然,如果定义$h=u-t$,那么时刻t的瞬时速度还可以表示为</p><p>$\lim_{h\to 0}\frac{f(t+h)-f(t)}{h}$</p><p>两种表示方法本质一样</p><p><strong>例题:求瞬时速度:</strong></p><blockquote><p>一辆静止状态的汽车从7公里标志处向右开始加速,这个时候的时刻为t=0小时.汽车在时刻t时的位置是$f(t)=15t^2+7$,求时刻t汽车的速度</p></blockquote><p>虽然这题直接用高中物理$x=V_0t+\frac{1}{2}at^2$一代入就可知道答案,但是我们暂且不这样做,后面算出答案后会用这个方法验证的</p><p>根据上面对瞬时速度$v_t$的定义,我们可以列出如下式子:$v_t=\lim_{h\to 0}\frac{f(t+h)-f(t)}{h}$</p><p>因此我们要做的已经很明确,那就是求这个有理函数的极限.使用之前讲的方法:</p><p>$\lim_{h\to 0}\frac{f(t+h)-f(t)}{h}=\lim_{h\to 0}\frac{15(t+h)^2+7-15t^2-7}{h}=\lim_{h\to 0}\frac{15(t^2+2th+h^2)-15t^2}{h}$</p><p>$=\lim_{h\to 0}\frac{30th+15h^2}{h}=30t+15h=30t$</p><p>也就是说,汽车在任意时刻t的瞬时速度为$30t$.我们这时用$x=V_0t+\frac{1}{2}at^2$来看看:</p><p>$0t+15t^2=V_0t+\frac{1}{2}at^2\rightarrow 15=\frac{1}{2}a\rightarrow a=30$</p><p>加速度是$30m/s^2$,那么速率就是$at=30t$</p><h4 id="速度的图像解释"><a href="#速度的图像解释" class="headerlink" title="速度的图像解释"></a>速度的图像解释</h4><p>我们将位移和时间图像画出来,如下图所示(y就是位移):</p><p><img src="https://img-blog.csdnimg.cn/20191102154100444.png" alt="ToChange!"></p><p>根据平均速度的定义式$v_{t\to u}=\frac{f(u)-f(t)}{u-t}$,我们发现$v_{t\to u}$就是图中虚线的斜率</p><p>而根据瞬时速度是$\lim_{u\to t}\frac{f(u)-f(t)}{u-t}$,我们发现瞬时速度就等于过点$(t,f(t))$的切线的斜率</p><p><strong>因此导出函数f在t点斜率</strong> $f’(t)$ <strong>的公式:</strong> $f’(t)\lim_{u\to t}\frac{f(u)-f(t)}{u-t}$</p><p><strong>更进一步的说,我们一般把这个斜率叫做f的导数</strong></p><h3 id="导函数"><a href="#导函数" class="headerlink" title="导函数"></a>导函数</h3><p>定义:通过$(x,f(x))$的切线的斜率是x的一个函数,我们把这个函数叫做f的导数,写作$f’$</p><p>一般说,对$f$关于变量$x$求导得到函数$f’$</p><p>如果极限存在的话,有</p><p>$f’(x)=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}$</p><p>这个时候,函数$f$在$x$点可导,如果对于某个$x$,上面的极限不存在,那么$x$的值就不在导函数$f’$的定义域里,即$f$在$x$点不可导</p><p><strong>练习</strong>:对于$f(x)=x^2$,求证$f’(x)=2x$</p><h3 id="作为极限比的导数"><a href="#作为极限比的导数" class="headerlink" title="作为极限比的导数"></a>作为极限比的导数</h3><blockquote><p>2019年11月2日16:50:34  <del>也许老外写书就是会写一些很奇怪的章节吧.这个章节我也没有搞懂它作为一个章节存在的意义</del></p></blockquote><p>导数$f’(x)$的不同写法:</p><ul><li>$f’(x)=\lim_{\triangle x\to 0}\frac{\triangle y}{\triangle x}$</li></ul><p>这种写法代表的是<strong>x中的一个小的变化产生了大约</strong>$f’(x)$<strong>倍的y中的变化</strong></p><ul><li>$令y=f(x),则f’(x)=\frac{dy}{dx}$</li></ul><p>这种写法中,$\frac{dy}{dx}$等价于分数$\frac{\triangle y}{\triangle x}$在$\triangle x$无限趋近于0时的极限,也就是$\lim_{\triangle x\to 0}\frac{\triangle y}{\triangle x}$</p><h3 id="线性函数和常数函数的导数"><a href="#线性函数和常数函数的导数" class="headerlink" title="线性函数和常数函数的导数"></a>线性函数和常数函数的导数</h3><ul><li><p>对于线性函数$f(x)=mx+b$,$f’(x)=m$</p></li><li><p>对于常数函数$f(x)=c$,$f’(x)=0$</p></li></ul><p>可自行证明</p><h3 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h3><p>我们还可以更近一步:从一个函数$f$出发,求一次导得到新的函数$f’$,然后继续对$f’$求导,得到$f’’$…基本上你可以求一大串导数,前提是你愿意.</p><p>特别的,对于n阶导,除开$f^{n个’}$外,还有如下几种有效的表达方式:</p><p>$f^{n个’}=\frac{d^ny}{dx^n}=\frac{d^n(y)}{dx^n}=\frac{d^n}{dx^n}(y)=f^{(n)}$</p><h3 id="导数的存在性"><a href="#导数的存在性" class="headerlink" title="导数的存在性"></a>导数的存在性</h3><p>定义右导数和左导数分别为:</p><p>$\lim_{h\to 0^+}\frac{f(x+h)-f(x)}{h}$</p><p>$\lim_{h\to 0^-}\frac{f(x+h)-f(x)}{h}$</p><p>如果在某一点左右导数相等,那么此点可导,导数值为左右导数值</p><h3 id="可导性和连续性"><a href="#可导性和连续性" class="headerlink" title="可导性和连续性"></a>可导性和连续性</h3><p><strong>如果一个函数f在x上可导,那么它在x上连续</strong>(这个定理好像很重要诶)</p><p>证明:</p><p>若函数$f(x)$可导,那么式子$\frac{f(x+h)-f(x)}{h}$中的任何一项都存在,且导数$f(x)’=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}$</p><p>这时构造另外一个极限:$\lim_{h\to 0}(\frac{f(x+h)-f(x)}{h}\times h)$,把极限拆开得到$\lim_{h\to 0}(\frac{f(x+h)-f(x)}{h}\times h)=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}\times \lim_{h\to 0}h=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}\times 0=0$</p><p>由于$\lim_{h\to 0}(\frac{f(x+h)-f(x)}{h}\times h)=\lim_{h\to 0}f(x+h)-f(x)=0$,也就是$\lim_{h\to 0}f(x+h)=f(x)$</p><p>根据前面的知识,若函数$f(x)$连续,那么$\forall x,\lim_{h\to 0}f(h+x)=f(x)$</p><p>这两个式子一模一样好吧!</p><p>但是一定要注意:<strong>连续函数不一定可导</strong></p><h1 id="Chapter-IV-求解微分问题"><a href="#Chapter-IV-求解微分问题" class="headerlink" title="Chapter IV 求解微分问题"></a>Chapter IV 求解微分问题</h1><h2 id="使用定义求导"><a href="#使用定义求导" class="headerlink" title="使用定义求导"></a>使用定义求导</h2><p>顾标题思义,使用定义对函数求导</p><ul><li>对$f(x)=\frac{1}{x}$求导:</li></ul><p>$f(x)’=\lim_{h\to 0}\frac{\frac{1}{x+h}-\frac{1}{x}}{h}=\lim_{h\to 0}\frac{\frac{-h}{x^2+hx}}{h}=\lim_{h\to 0}\frac{-1}{x^2+hx}=-\frac{1}{x^2}$</p><ul><li>对$f(x)=\sqrt x$求导:</li></ul><p>$f(x)’=\lim_{h\to 0}\frac{\sqrt{x+h}-\sqrt x}{h}=\lim_{h\to 0}\frac{h}{h(\sqrt{x+h}+\sqrt x)}=\lim_{h\to 0}\frac{1}{\sqrt{x+h}+\sqrt x}=\frac{1}{2\sqrt x}$</p><ul><li>对$f(x)=\sqrt x+\frac{1}{x}$求导</li></ul><p>$f(x)=\lim_{h\to 0}\frac{(\sqrt {x+h}+\frac{1}{x+h}-\sqrt x+\frac{1}{x})}{h}=\lim_{h\to 0} \frac{\sqrt{x+h}-\sqrt x}{h}+\lim_{h\to 0}\frac{\frac{1}{x+h}-\frac{1}{x}}{h}$</p><p>接下来的求导过程就是上面两道题的综合,过程略,答案为$f’(x)=-\frac{1}{x^2}+\frac{1}{2\sqrt{x}}$,正好是上面两个导数的和(后面会提到,这就是导数的加法法则了)</p><ul><li>对$f(x)=x^n$求导</li></ul><p>前置芝士:<strong>二项式定理</strong></p><p>二项式定理:$(x+y)^n=\sum_{k=0}^n(_n^k)x^{n-k}y^{k}$</p><p>$f’(x)=\lim_{h\to 0}\frac{(x+h)^n-x^n}{h}$</p><p>根据二项式定理把$(x+h)^n$展开得到</p><p>$=\lim_{h\to 0}\frac{x^n+nx^{n-1}h+(_n^2)x^{n-2}h^2+……-x^n}{h}$</p><p>$=\lim_{h\to 0}\frac{nx^{n-1}h+(_n^2)x^{n-2}h^2+….}{h}$</p><p>$=\lim_{h\to 0}nx^{n-1}+(_n^2)x^{n-2}h+….$</p><p>由于省略号里的项都带有$k$个$h \ (k&gt;1)$,因此取极限把它们去掉得</p><p>$f’(x)=nx^{n-1}$</p><p>事实上,上面这个式子里面的$n$可以属于任意实数</p><p>不得不注意到一个很好的事情:当我们有了这个式子后,任何次幂函数的导数就可以直接求了诶!</p><p>比如,利用这个式子,我们可以证明:</p><p>若$f(x)=C,C$为常数,$f’(x)=0$</p><p>若$f(x)=ax,a$为常数,$f’(x)=a$(导数在原函数乘以常数倍后也要乘以常数倍)</p><p>若$f(x)=ax^2,a$为常数,$f’(x)=2ax$</p><p>$……$</p><h2 id="求导法则"><a href="#求导法则" class="headerlink" title="求导法则"></a>求导法则</h2><p>这一小节,我们会尝试使用一些规则使得求导更加便捷</p><h3 id="函数的常数倍"><a href="#函数的常数倍" class="headerlink" title="函数的常数倍"></a>函数的常数倍</h3><p>一句话来讲,就是<strong>导数在原函数乘以常数倍后也要乘以常数倍</strong></p><p>简单证明:</p><p>明确问题:令$g(x)=af(x)$,求证$g’(x)=af’(x)$</p><p>$g’(x)=\lim_{h\to 0}\frac{g(x+h)-g(x)}{h}=\lim_{h\to 0}\frac{af(x+h)-af(x)}{h}=a\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}=af(x)’$</p><p>得证</p><p>当然也可以用可视化的方法来证明,即构造一个矩形,这在后面会提到,相关的证明可以上B站去看,链接在后面给出</p><h3 id="函数和与差"><a href="#函数和与差" class="headerlink" title="函数和与差"></a>函数和与差</h3><p><strong>两个函数相加减得到的新函数的导数等于原函数的导数的和或差</strong></p><p>简单证明:</p><p>明确问题:令$g(x)=k(x)+f(x)$,求证$g’(x)=k’(x)+f’(x)$</p><p>(只要加法成立,取个负号减法就成立了,故不再过多讨论减法)</p><p>$g’(x)=\lim_{h\to 0}\frac{g(x+h)-g(x)}{h}=\lim_{h\to 0}\frac{k(x+h)+f(x+h)-k(x)-f(x)}{h}$</p><p>$=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}+\lim_{h\to 0}\frac{k(x+h)-k(x)}{h}=f’(x)+k’(x)$</p><p>得证</p><p>还有一种证法,利用了可视化的思想,上图意会一下:</p><p><img src="https://img-blog.csdnimg.cn/20191106194548241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="函数的乘积"><a href="#函数的乘积" class="headerlink" title="函数的乘积"></a>函数的乘积</h3><p>若函数$g(x)=f(x)\times k(x)$,则$g’(x)=f(x)k’(x)+f’(x)k(x)$,可以简单记为<strong>左乘右导,右乘左导(left d right,right d left)</strong></p><p>证明:</p><p>这个定理的证明要抓住一点:<strong>函数的导数本质上是函数在自变量有微小变化下函数值的变化大小</strong>,这一点从导数的定义式也能够看出来:$\frac{dy}{dx}$,<strong>单位自变量导致的函数变化大小</strong></p><h4 id="一-本书附录中给出的证明"><a href="#一-本书附录中给出的证明" class="headerlink" title="一:本书附录中给出的证明"></a>一:本书附录中给出的证明</h4><p>有函数$y=uv$</p><p>则函数变化量$\triangle y=(u+\triangle u)(v+\triangle v)-uv$</p><p>$=uv+\triangle uv+\triangle vu+\triangle u\triangle v-uv=\triangle uv+\triangle vu-\triangle u\triangle v$</p><p>在等式两边全部除以一个$\triangle x$得到</p><p>$\frac{\triangle y}{\triangle x}=\frac{\triangle u}{\triangle x}v+\frac{\triangle v}{\triangle x}u-\frac{\triangle u\triangle v}{\triangle x^2}\times \triangle x$</p><p>注意最后一项被多除了一个$\triangle x$之后乘了一个$\triangle x$</p><p>当对式子取极限后,<strong>由于最后一项有一个</strong>$\triangle x$<strong>因子会趋于0</strong>,故最后一项趋于0,其他项趋于对应的导数,即</p><p>$\frac{dy}{dx}=\frac{du}{dx}v+\frac{dv}{dx}u$</p><p>得证</p><p>但是个人觉得这个证明有一点不严谨,不能够让我信服,因为我可以在任意一项上面乘一个$\triangle x$然后再除去,这样的话我就可以宣告这一项趋于0,如果这样的话就太荒唐了..也许是我太菜了,如果哪个正在看这篇文章的大佬可以解答这个问题的话,蒟蒻感激不尽</p><h4 id="二-本书中的另外一个证明方法"><a href="#二-本书中的另外一个证明方法" class="headerlink" title="二:本书中的另外一个证明方法"></a>二:本书中的另外一个证明方法</h4><p>这种可视化的证明方法和我初三的时候在<a href="https://www.bilibili.com/video/av10435213/?spm_id_from=333.788.videocard.0">bilibili</a>上看到的那种一模一样!</p><p>考虑构造这样一个矩形:它的长由函数$g(x)$决定,宽由函数$k(x)$决定,那么它的面积就是$g(x)\times k(x)$,不妨设为$f(x)$</p><p><img src="https://img-blog.csdnimg.cn/20191106193328762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>当x发生微小变化dx的时候,这个图变成了这个样子:</p><p><img src="https://img-blog.csdnimg.cn/20191106193826303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>区域$I,II,III,IV$的面积分别是$k(dx)g(dx),k(dx)g(x),k(x)g(dx),k(x)g(x)$</p><p>从中间拿出面积的变化量:$k(dx)g(x)+g(dx)k(x)+g(dx)k(dx)$,显然,由于$dx$是一个非常小的量,$g(dx)k(dx)$可以<strong>忽略不计(safe to ignore)</strong></p><p>于是有$f’(x)=k(x)g’(x)+g(x)k’(x)$</p><h3 id="函数的复合"><a href="#函数的复合" class="headerlink" title="函数的复合"></a>函数的复合</h3><p>$f(x)=g(k(x))$,则$f’(x)=g’(k(x))k’(x)$</p><p>证明:</p><p>这其实也有可视化的证明方法,<del>但是我没怎么看懂</del>,还是先说书上的证明方法吧</p><p>$f’(x)=\lim_{h\to 0}\frac{f(x+h)-f(x)}{h}=\lim_{h\to 0}\frac{g(k(x+h))-g(k(x))}{h}$</p><hr><p>由于$k’(x)=\lim_{h\to 0}\frac{k(x+h)-k(x)}{h}$,而我们要构造出$k’(x)$,故我们需要在上面的式子中乘出来一个$\frac{k(x+h)-k(x)}{h}$</p><hr><p>$f’(x)=\lim_{h\to 0}\frac{g(k(x+h))-g(k(x))}{h}\times\frac{k(x+h)-k(x)}{k(x+h)-k(x)}=\lim_{h\to 0}\frac{g(k(x+h))-g(k(x))}{k(x+h)-k(x)}k’(x)$</p><p>设$\alpha=k(x+h)-k(x)$</p><p>$f’(x)=\lim_{h\to 0}\frac{g(k(x+h))-g(k(x))}{k(x+h)-k(x)}k’(x)=\lim_{h\to 0}\frac{g(\alpha+k(x))-g(k(x))}{\alpha}\times k’(x)$</p><p>由于$\lim_{h\to 0}\alpha=0$</p><p>$\lim_{h\to 0}\frac{g(\alpha+k(x))-g(k(x))}{\alpha}=\lim_{\alpha\to 0}\frac{g(\alpha+k(x))-g(k(x))}{\alpha}=g’(k(x))$</p><p>故$f’(x)=g’(k(x))k’(x)$</p><p>当然了,链式求导法则还有一种写法:$\frac{du}{dx}=\frac{du}{dy}\frac{dy}{dx}$,其中u是y的函数,y是x的函数</p><p>这个写法就更好理解了:由于导数$\frac{du}{dx}$表示的是<strong>当x有微小变化dx的时候u的微小变化大小</strong>,因此这个量应该就等于<strong>当x有微小变化dx的时候y的微小变化大小</strong>乘以<strong>当y有微小变化dy的时候u的微小变化大小</strong></p><h3 id="扩展求导法则"><a href="#扩展求导法则" class="headerlink" title="扩展求导法则"></a>扩展求导法则</h3><ul><li>除法法则:</li></ul><p>函数$f(x)=\frac{g(x)}{k(x)}$,则$f’(x)=\frac{g’(x)k(x)-g(x)k’(x)}{k(x)^2}$</p><p>证明方法:将除以一个函数看做乘以这个函数的倒数,将函数代入倒数函数$y=\frac{1}{x}$中使用乘法法则和链式法则求出即可</p><ul><li>多个函数相乘:</li></ul><p>函数$f(x)=\prod_{i=1}^ng_i(x)$,则$f’(x)=\sum_{i=1}^n\prod_{j=1}^n k(x)$</p><p>其中,</p><p>$$<br>k(x)=\begin{cases}<br>g_j(x),j!=i\g’_j(x),j=i<br>\end{cases}<br>$$</p><p>有一个比较好直观记忆这个公式的方法:<strong>将每个n个g函数的乘积加n次,然后在第i项中选取第i个g函数把它变成导数</strong></p><p>比如当$n=3$的时候:</p><p>$f(x)=g_1(x)g_2(x)g_3(x)$</p><p>$f’(x)=g’_1(x)g_2(x)g_3(x)+g_1(x)g’_2(x)g_3(x)+g_1(x)g_2(x)g’_3(x)$</p><p>证明也很简单,就直接把乘积法则使劲用就可以了~~</p><h2 id="一个巨麻烦的栗子"><a href="#一个巨麻烦的栗子" class="headerlink" title="一个巨麻烦的栗子"></a>一个巨麻烦的栗子</h2><p>对$f(x)=\frac{3x^7+x^4\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}}{6x^2-4}$,求出其$f’(x)$</p><p><del>鉴于本函数求导过程容易引起读者高度不适,因此隐藏在下面</del></p><p>$f(x)=\frac{3x^7+x^4\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}}{6x^2-4}$</p><p>令</p><p>$a(x)=2x^5+15x^{\frac{4}{3}}-23x+9,b(x)=6x^2-4$</p><p>$c(x)=\sqrt{x},k(x)=x^4,g(x)=3x^7$</p><p>则</p><p>$a’(x)=10x^4+5x^{\frac{1}{3}}-23,b’(x)=12x$</p><p>$c’(x)=\frac{1}{2}x^{-\frac{1}{2}},k’(x)=4x^3,g’(x)=21x^6$</p><p>$f(x)=\frac{g(x)+k(x)c(a(x))}{b(x)}$</p><p>则:</p><p>$(c(a(x)))’=c’(a(x))a’(x)$</p><p>$=\frac{1}{2}(2x^5+15x^{\frac{4}{3}}-23x+9)^{-\frac{1}{2}}(10x^4+5x^{\frac{1}{3}}-23)=\frac{10x^4+5x^{\frac{1}{3}}-23}{2\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}}$</p><p>$(k(x)c(a(x)))’=k(x)(c(a(x)))’+k’(x)c(a(x))$</p><p>$=\frac{x^4(10x^4+5x^{\frac{1}{3}}-23)}{2\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}}+4x^3 \sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}$</p><p>$(g(x)+k(x)c(a(x)))’=g’(x)+(k(x)c(a(x)))’$</p><p>$=21x^6+\frac{x^4(10x^4+5x^{\frac{1}{3}}-23)}{2\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}}+4x^3 \sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}$</p><p>令$z(x)=g(x)+k(x)c(a(x))$(分子)</p><p>则$z’(x)=21x^6+\frac{x^4(10x^4+5x^{\frac{1}{3}}-23)}{2\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}}+4x^3 \sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}$</p><p>$f’(x)=\frac{z’(x)b(x)-z(x)b’(x)}{b(x)^2}$</p><p>$=\frac{(21x^6+\frac{x^4(10x^4+5x^{\frac{1}{3}}-23)}{2\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}}+4x^3 \sqrt{2x^5+15x^{\frac{4}{3}}-23x+9})(6x^2-4)-12x(3x^7+x^4\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9})}{(6x^2-4)^2}$</p><p>$=\frac{(21x^6+\frac{x^4(10x^4+5x^{\frac{1}{3}}-23)}{2\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}}+4x^3 \sqrt{2x^5+15x^{\frac{4}{3}}-23x+9})(6x^2-4)}{(6x^2-4)^2}-\frac{12x(3x^7+x^4\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9})}{(6x^2-4)^2}$</p><p>为简化运算,令$\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}=t$</p><p>原式$=\frac{(21x^6+\frac{10x^8+5x^{\frac{13}{3}}-23x^4}{2t}+4x^3t)}{(6x^2-4)}-\frac{12x(3x^7+x^4t)}{(6x^2-4)^2}$</p><p>$=\frac{(21x^6+\frac{10x^8+5x^{\frac{13}{3}}-23x^4}{2t}+\frac{8x^3t^2}{2t})}{(6x^2-4)}-\frac{12x(3x^7+x^4t)}{(6x^2-4)^2}$</p><p>$=\frac{(21x^6+\frac{10x^8+5x^{\frac{13}{3}}-23x^4+8x^3(2x^5+15x^{\frac{4}{3}}-23x+9)}{2t})}{(6x^2-4)}-\frac{12x(3x^7+x^4t)}{(6x^2-4)^2}$</p><p>$=\frac{(21x^6+\frac{10x^8+5x^{\frac{13}{3}}-23x^4+16x^8+120x^{\frac{13}{3}}-184x^4+72x^3}{2t})}{(6x^2-4)}-\frac{12x(3x^7+x^4t)}{(6x^2-4)^2}$</p><p>$=\frac{(21x^6+\frac{26x^8+140x^{\frac{13}{3}}-207x^4+72x^3}{2t})}{(6x^2-4)}-\frac{12x(3x^7+x^4t)}{(6x^2-4)^2}$</p><p>$=\frac{(21x^6+\frac{26x^8+140x^{\frac{13}{3}}-207x^4+72x^3}{2\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9}})}{(6x^2-4)}-\frac{12x(3x^7+x^4\sqrt{2x^5+15x^{\frac{4}{3}}-23x+9})}{(6x^2-4)^2}$</p><p>这样就得到了书上给出的答案!(<del>算了大半天…</del>)</p><h2 id="求导的应用"><a href="#求导的应用" class="headerlink" title="求导的应用"></a>求导的应用</h2><h3 id="求切线方程"><a href="#求切线方程" class="headerlink" title="求切线方程"></a>求切线方程</h3><p>求导的用处之一便是求切线的方程</p><p>假设有一函数$f(x)$,并且要求求出函数在点$(x,f(x))$上的切线.</p><p>我们首先明确,点$(x,f(x))$一定在函数上.因此,我们先求出函数的导数,然后将给出的$x$值代入函数得到此处切线的斜率,利用点斜式方程,就可以得到点$(x,f(x))$处的切线方程了</p><h3 id="描述运动物理量"><a href="#描述运动物理量" class="headerlink" title="描述运动物理量"></a>描述运动物理量</h3><p>这里作者班纳先生用了比较长的篇幅详细讲解了关于微分(求导)在运动学上的应用,但实际上作为<del>中国的高中生</del>,我们已经学过了运动学,因此我们只需要理解以下两点:</p><ul><li><p>速度描述位移的瞬时变化量,加速度描述速度的瞬时变化量</p></li><li><p>从导数的角度来讲,速度就是位移的一阶导数,加速度就是位移的二阶导,加速度也是速度的一阶导</p></li></ul><h3 id="导数伪装的极限"><a href="#导数伪装的极限" class="headerlink" title="导数伪装的极限"></a>导数伪装的极限</h3><p>有很多的极限具有导数的形式,因此我们可以利用求导来求出这些极限</p><p>这种方法的使用特征是:<strong>极限可以化简为虚拟变量单独在分子或分母上且另外一边是相加减的形式</strong></p><ul><li>求极限$\lim_{h\to 0}\frac{\sqrt[5]{32+h}-2}{h}$</li></ul><p>$\lim_{h\to 0}\frac{\sqrt[5]{32+h}-2}{h}=\lim_{h\to 0}\frac{\sqrt[5]{32+h}-\sqrt[5]{32}}{h}$</p><p>不难发现,原式是函数$f(x)=\sqrt[5] x$在($32,f(32)$)处的切线的斜率,故</p><p>$\lim_{h\to 0}\frac{\sqrt[5]{32+h}-2}{h}=f’(32)=\frac{1}{5}(32)^{-\frac{4}{5}}=\frac{1}{80}$</p><ul><li>求极限$\lim_{h\to 0}\frac{\sqrt{(4+h)^3-7(4+h)}-6}{h}$</li></ul><p>令$x=4$</p><p>原式$=\lim_{h\to 0}\frac{\sqrt{(x+h)^3-7(x+h)}-\sqrt{36}}{h}=\lim_{h\to 0}\frac{\sqrt{(x+h)^3-7(x+h)}-\sqrt{x^3-7\times x}}{h}$</p><p>设$f(x)=\sqrt{x^3-7x}$,则$f’(x)=\frac{3x^2-7}{2\sqrt{x^3-7x}}$,则原极限就是函数在$x=4$处的切线斜率,代入整理得原极限$=\frac{41}{12}$</p><ul><li>求极限$\lim_{h\to 0}\frac{h}{(x+h)^6-x^6}$</li></ul><p>先将极限取个倒数,这样的话就可以直接求导了:</p><p>$设f(x)=x^6,则f’(x)=6x^5$</p><p>$\lim_{h\to 0}\frac{(x+h)^6-x^6}{h}=f’(x)=6x^5$</p><p>$\lim_{h\to 0}\frac{h}{(x+h)^6-x^6}=\frac{1}{6x^5}$</p><h2 id="分段函数的导数"><a href="#分段函数的导数" class="headerlink" title="分段函数的导数"></a>分段函数的导数</h2><p>检验一个分段函数是否可导,关键是需要检验分段函数在连接点上是否可导.而检验在分段点上是否可导,就需要检验<strong>分段在连接点上相等</strong>以证明连续性,以及<strong>分段的导数在连接点上相等</strong>以证明可导性</p><p>**练习:**证明函数</p><p>$$<br>g(x)=\begin{cases}<br>|x^2-4|,x&lt;=1\-2x+5,x&gt;1<br>\end{cases}<br>$$</p><p>在$x=-2$上不可导,在$x=1$上可导</p><h2 id="如何直接画出导函数图像"><a href="#如何直接画出导函数图像" class="headerlink" title="如何直接画出导函数图像"></a>如何直接画出导函数图像</h2><blockquote><p>歪果仁的脑洞真大</p></blockquote><p>作者提出了一种非常好理解的方法,但字数过多,我将图片放上来供大家观赏:</p><p><img src="https://img-blog.csdnimg.cn/20191107171751658.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191107171815356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191107171834382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191107171903901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191107171930973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191107171946901.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191107172002566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191107172021998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2019110717204098.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191107172052547.png" alt="在这里插入图片描述"></p><h1 id="Chapter-V-三角函数的极限和导数"><a href="#Chapter-V-三角函数的极限和导数" class="headerlink" title="Chapter V 三角函数的极限和导数"></a>Chapter V 三角函数的极限和导数</h1><h2 id="三角函数的极限"><a href="#三角函数的极限" class="headerlink" title="三角函数的极限"></a>三角函数的极限</h2><p>对三角函数的极限.我们主要考虑两个方面:当三角函数内的自变量很小的情况和自变量很大的情况</p><h3 id="小数的情况"><a href="#小数的情况" class="headerlink" title="小数的情况"></a>小数的情况</h3><p>**1.sin:**根据正弦函数的图像,$sin(x)$在x趋近0的时候趋近于0,因此有</p><p>$$\lim_{x\to 0}\frac{sin(x)}{x}=1$$</p><p>当然,仅仅看图像是不能够使人信服的,因此作者在后面给出了一种比较有说服力的证明方法,大概思路如下:</p><p>在单位圆里面用线段表示$sin,tan$函数,根据面积的包含关系得到关于$\frac{sin(x)}{x}$的不等式,从而使用三明治定理证明上述极限的右极限为1,然后将左极限转化为右极限从而证得左极限也为1,从而得证</p><p>**2.cos:**根据余弦函数的图像,当x趋近于0的时候,$cos(x)$趋近于1,因此有</p><p>$$\lim_{x\to 0}cos(x)=1$$</p><p>而$\lim_{x\to 0}\frac{cos(x)}{x}$中,如果将$x=0$代入上式中,那么就有$\frac{1}{0}$,根据前面极限的知识,可以知道$f(x)=\frac{cos(x)}{x}$的图像在$x=0$处有一垂直渐近线,且函数行为和$g(x)=\frac{1}{x}$很相似,故</p><p>$$\lim_{x\to 0^+}\frac{cos(x)}{x}=\infty,\lim_{x\to 0^-}\frac{cos(x)}{x}=-\infty,\lim_{x\to 0}\frac{cos(x)}{x}=DNE$$</p><p>**3.tan:**根据$tan(x)=\frac{sin(x)}{cos(x)}$</p><p>则$\lim_{x\to 0}\frac{tan(x)}{x}=\lim_{x\to 0}\frac{sin(x)}{x}\times cos(x)=1\times(\frac{1}{1})=1$</p><p>故</p><p>$$\lim_{t\to 0}\frac{tan(x)}{x}=1$$</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><ul><li>求$\lim_{x\to 0}\frac{sin(x^2)}{x^2}$</li></ul><p>因为$\lim_{x\to 0}x^2=0$,又有$\lim_{x\to 0}\frac{sin(x)}{x}=1$,故</p><p>$$\lim_{x\to 0}\frac{sin(x^2)}{x^2}=1$$</p><p>**推广:**由于正弦函数和正切函数在小数的情况下非常相似,而余弦函数行为和前两者大相径庭,故有</p><p>$$\lim_{x\to 0}\frac{sin(a)}{a}=1,\lim_{x\to 0}\frac{tan(a)}{a}=1$$</p><p>$$\lim_{x\to 0}cos(a)=1$$</p><p>其中$a$是一个<strong>小数</strong>,即满足$\lim_{x\to 0}a=0$</p><p>这一条推广是本章解题的核心(当然有一些极限是不能够用这种方式解的,要用到一些更高级的知识如洛必达法则什么的)</p><ul><li>求$\lim_{x\to 0}\frac{sin(5x)}{x}$</li></ul><p>为了让$sin$中的<strong>自变量和分母的变量匹配</strong>,我们在分母乘一个5然后在外面乘一个5:</p><p>原极限$=\lim_{x\to 0}\frac{sin(5x)}{5x}\times 5=5\lim_{x\to 0}\frac{sin(5x)}{5x}=5$</p><ul><li>求$\lim_{x\to 0}\frac{sin^3(2x)cos(5x^{19})}{xtan(5x^2)}$</li></ul><p>用和上一题一样的方法:</p><p>$\lim_{x\to 0}\frac{sin^3(2x)cos(5x^{19})}{xtan(5x^2)}=\lim_{x\to 0}\frac{\frac{sin^3(2x)}{(2x)^3}\times(2x)^3\times cos(5x^{19})}{x\frac{tan(5x^2)}{5x^2}\times 5x^2}$</p><p>$=\lim_{x\to 0}\frac{(2x)^3}{5x^3}=\frac{2^3}{5}=\frac{8}{5}$</p><ul><li>求$\lim_{x\to \infty}xsin(\frac{5}{x})$</li></ul><p>$\lim_{x\to \infty}xsin(\frac{5}{x})=\lim_{x\to \infty}x\times \frac{sin(\frac{5}{x})}{\frac{5}{x}}\times \frac{5}{x}=\lim_{x\to \infty}5=5$</p><ul><li>求$\lim_{x\to 0}\frac{1-cos^2(x)}{x^3}$</li></ul><p>注意这里不能直接把$cos(x)$看成1,这两个量还是有区别的呢!<strong>当且仅当在乘积或商的情况下才能够采用前面这个观点</strong></p><p>因此这里使用高中课本里常见的一个技巧:$sin^2(x)+cos^2(x)=1$</p><p>$\lim_{x\to 0}\frac{1-cos^2(x)}{x^2}=\lim_{x\to 0}\frac{sin^2(x)+cos^2(x)-cos^2(x)}{x^3}=\lim_{x\to 0}\frac{sin^2(x)}{x^2}=\lim_{x\to 0}(\frac{sin(x)}{x})^2=1$</p><ul><li>求$\lim_{x\to 0}\frac{1-cos(x)}{x^2}$</li></ul><p>$\lim_{x\to 0}\frac{1-cos(x)}{x^2}=\lim_{x\to 0}\frac{1-cos(x)}{x^2}\times \frac{1+cos(x)}{1-cos(x)}=\lim_{x\to 0}\frac{sin^2(x)}{x^2}\times\frac{1}{1+cos(x)}=1\times\frac{1}{1+1}=\frac{1}{2}$</p><ul><li>求$\lim_{x\to 0}\frac{1-cos(x)}{x}$</li></ul><p>$\lim_{x\to 0}\frac{1-cos(x)}{x}=\lim_{x\to 0}\frac{1-cos^2(x)}{x(1+cos(x))}=\lim_{x\to 0}\frac{sin^2(x)}{x(1+cos(x))}=0$</p><p>这个极限在对正弦函数求导的时候会用到,很重要</p><h3 id="大数的情况"><a href="#大数的情况" class="headerlink" title="大数的情况"></a>大数的情况</h3><p><strong>1.sin(x)</strong></p><p>根据前面的三明治定理,容易有</p><p>$$\lim_{x\to \infty}\frac{sin(x)}{x}=0$$</p><p>且$\forall x,-1&lt;=sin(x)&lt;=1$(<del>这不是废话嘛</del>)</p><p><strong>2.cos(x)</strong></p><p>$\forall x,-1&lt;=cos(x)&lt;=1$(<del>这不是废话嘛+1</del>)</p><p><strong>3.tan(x)</strong></p><p>当x变大的时候,根据正切函数的图像,这个函数会有很多垂直渐近线,因此很难列出什么不等式来限制这家伙</p><h4 id="一个重要的结论"><a href="#一个重要的结论" class="headerlink" title="一个重要的结论"></a>一个重要的结论</h4><p><strong>对于任意的正指数</strong>$\alpha$,</p><p>$$lim_{x\to \infty}\frac{sin(anything)}{x^{\alpha}}=0$$</p><p><strong>(上面的式子中,用余弦替换正弦也会得到一样的结果)</strong></p><p>这个式子也很好理解的,因为正弦函数和余弦函数的行为在$\lim_{x\to \infty}x^{\alpha}$面前就像一个常数一样</p><p>因此还可以衍生出一个观点:在加减的前提下,可以将$sin(anything),cos(anything)$看做比x的任意正次幂次数要低</p><h5 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h5><ul><li>求$\lim_{x\to \infty}\frac{xsin(11x^7)-\frac{1}{2}}{2x^4}$</li></ul><p>在前面章节里面讲过<strong>三明治定理</strong>,而这个定理在这里可以用到,因此简单提一下这个定理的<strong>用法</strong></p><p>对于一个式子,先找一个核心部分列出不等式$g(x)&lt;=hexing(x)&lt;=f(x)$</p><p>然后根据不等式的性质,向核心部分加入项从而让核心部分变成要求的式子,这时候上面的$g(x)$和$f(x)$就是加载待求函数上下的函数了,这时再对它们求极限即可</p><p>$-1&lt;=sin(11x^7)&lt;=1$</p><p>$-x&lt;=xsin(11x^7)&lt;=x$</p><p>$-x-\frac{1}{2}&lt;=xsin(11x^7)-\frac{1}{2}&lt;=x-\frac{1}{2}$</p><p>$\frac{-x-\frac{1}{2}}{2x^4}&lt;=\frac{xsin(11x^7)-\frac{1}{2}}{2x^4}&lt;=\frac{x-\frac{1}{2}}{2x^4}$</p><p>因为$\lim_{x\to \infty}\frac{-x-\frac{1}{2}}{2x^4}=\lim_{x\to \infty}\frac{x-\frac{1}{2}}{2x^4}=0$</p><p>故$\lim_{x\to \infty}\frac{xsin(11x^7)-\frac{1}{2}}{2x^4}=0$</p><p>当然这个题好像可以使用上面的结论就可以直接得出答案</p><ul><li>求$\lim_{x\to \infty}\frac{3x^2+2x+5+sin(3000x^9)}{2x^2-1-cos(22x)}$</li></ul><p>$\lim_{x\to \infty}\frac{3x^2+2x+5+sin(3000x^9)}{2x^2-1-cos(22x)}=\lim_{x\to \infty}\frac{\frac{3x^2+2x+5+sin(3000x^9)}{3x^2}\times(3x^2)}{\frac{2x^2-1-cos(22x)}{2x^2}\times(2x^2)}$</p><p>$=\lim_{x\to \infty}\frac{1+\frac{2}{3x}+\frac{5}{3x^2}+\frac{sin(3000x^9)}{3x^2}}{1-\frac{1}{2x^2}-\frac{cos(22x)}{2x^2}}\times\frac{3x^2}{2x^2}=\lim_{x\to \infty}\frac{1+0+0+0}{1-0-0}\times\frac{3}{2}=\frac{3}{2}$</p><h2 id="三角函数的导数"><a href="#三角函数的导数" class="headerlink" title="三角函数的导数"></a>三角函数的导数</h2><h3 id="对三角函数求导"><a href="#对三角函数求导" class="headerlink" title="对三角函数求导"></a>对三角函数求导</h3><p><strong>sin(x):</strong></p><p>这里要用到两个极限:$\lim_{x\to 0}\frac{sin(x)}{x}=1,\lim_{x\to 0}\frac{1-cos(x)}{x}=0$</p><p>令$f(x)=sin(x)$,则</p><p>$f’(x)=\lim_{h\to 0}\frac{sin(x+h)+sin(x)}{h}=\lim_{h\to 0}\frac{sin(x)cos(h)+cos(x)sin(h)+sin(x)}{h}$</p><p>$=\lim_{h\to 0}\frac{sin(x)(cos(h)-1)+cos(x)sin(h)}{h}=\lim_{h\to 0}\frac{cos(h)-1}{h}\times sin(x)+\frac{sin(h)}{h}\times cos(x)=cos(x)$</p><p>故</p><p>$$\frac{d}{dx}sin(x)=cos(x)$$</p><p><strong>cos(x):</strong></p><p>令$f(x)=cos(x)$,则</p><p>$f’(x)=\lim_{h\to 0}\frac{cos(h+x)-cos(x)}{h}=\lim_{h\to 0}\frac{cos(h)cos(x)-sin(h)sin(x)-cos(x)}{h}$</p><p>$\lim_{h\to 0}\frac{cos(x)(cos(h)-1)-sin(h)sin(x)}{h}=\lim_{h\to 0}\frac{cos(x)(cos(h)-1)}{h}-\frac{sin(h)sin(x)}{h}=-sin(x)$</p><p>故</p><p>$$\frac{d}{dx}cos(x)=-sin(x)$$</p><p><strong>tan(x):</strong></p><p>令$f(x)=tan(x),g(x)=sin(x),k(x)=cos(x)$,由于$f(x)=\frac{g(x)}{k(x)}$</p><p>$f’(x)=\frac{g’(x)k(x)-g(x)k’(x)}{k^2(x)}=\frac{cos^2(x)+sin^2(x)}{cos^2(x)}=\frac{1}{cos^2(x)}$</p><p>故</p><p>$$\frac{d}{dx}tan(x)=\frac{1}{cos^2(x)}$$</p><p>当然还有有其他的三角函数如$sec(x),csc(x),cot(x)$,具体证明过程就不给出了,直接给结论:</p><p>(注:$sec(x)=\frac{1}{cos(x)},csc(x)=\frac{1}{sin(x)},cot(x)=\frac{1}{tan(x)}$)</p><p>$$\frac{d}{dx}sec(x)=sec(x)tan(x)$$</p><p>$$\frac{d}{dx}csc(x)=-csc(x)cot(x)$$</p><p>$$\frac{d}{dx}cot(x)=-csc^2(x)$$</p><p>有了上面的基本三角函数的导数,在遇到其他的三角函数求导的时候我们就可以直接利用求导法则求导了</p><p><strong>一些练习</strong>:</p><p>求证:</p><p>$\frac{d}{dx}(x^2sin(x))=sin(x)\times 2x+x^2cos(x)$</p><p>$\frac{d}{dx}(\frac{sec(x)}{x^5})=\frac{sec(x)(xtan(x)-5)}{x^6}$</p><p>$\frac{d}{dx}(cot(x^3))=-3x^2csc^2(x^3)$</p><h3 id="简谐运动"><a href="#简谐运动" class="headerlink" title="简谐运动"></a>简谐运动</h3><p>简谐运动,个人理解的就是:运动位移方程形式和$X=asin(bx)$类似的周期性运动</p><p>我们需要了解: 对于简谐运动,如果要求某一时刻的速度,那就对位移函数求一阶导,如果要求某一时刻的加速度,就对位移函数求二阶导,也就是对速度求一阶导,这就是上面三角函数求导的内容了</p><h3 id="一个本身可导但导数并不连续的函数"><a href="#一个本身可导但导数并不连续的函数" class="headerlink" title="一个本身可导但导数并不连续的函数"></a>一个本身可导但导数并不连续的函数</h3><p>可以尝试证明一下$f(x)=x^2sin(\frac{1}{x})$本身可导但导数并不连续</p><h1 id="Chapter-VI-隐函数求导和相关变化率"><a href="#Chapter-VI-隐函数求导和相关变化率" class="headerlink" title="Chapter VI 隐函数求导和相关变化率"></a>Chapter VI 隐函数求导和相关变化率</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先,什么是隐函数?我个人理解为<strong>隐藏在方程只中的函数</strong>,这种函数一般没有明确的自变量的函数值的关系,甚至有时候根本不能够叫做函数,因为它的图像可能是一个圆!比如下列隐函数函数$x^2+y^2=0,sin(x)y^2=x$</p><p>其次,考虑两个导数:</p><p>$\frac{d}{dx}(x^2),\frac{d}{dx}(y^2)$</p><p>首先第一个导数很简单,就等于$2x$,而第二个导数就不一样了.由于分母上写的是x,因此求的是<strong>当x有微小变化的时候y方的变化大小</strong>,因此第二个导数相当于是两个导数的复合,这时就应该使用链式法则求导了:</p><p>设$u=y^2$,则$\frac{d}{dx}y^2=\frac{du}{dx}=\frac{du}{dy}\frac{dy}{dx}$</p><p>就像前面讲的一样,这里的$\frac{dy}{dx}$是x有变化的时候y的变化大小,这个量乘上$\frac{du}{dy}$(y有变化的时候u的变化大小)就可以得到x有变化的时候u的变化大小,,也就是上面的导数了</p><p>因此$\frac{d}{dx}(y^2)=2y\frac{dy}{dx}$</p><p>(<strong>注:链式求导法则有两种写法</strong>,$f’(x)=g’(k(x))k’(x)$和$\frac{du}{dx}=\frac{du}{dy}\frac{dy}{dx}$)</p><h2 id="一些隐函数求导的例子"><a href="#一些隐函数求导的例子" class="headerlink" title="一些隐函数求导的例子"></a>一些隐函数求导的例子</h2><h3 id="隐函数求一阶导"><a href="#隐函数求一阶导" class="headerlink" title="隐函数求一阶导"></a>隐函数求一阶导</h3><p><strong>1.方程</strong>$x^2+y^2=4$</p><p>我们要对其求导,需要做的就是在等号两边添加一个$\frac{d}{dx}$:</p><p>$\frac{d}{dx}(x^2+y^2)=\frac{d}{dx}(4)$</p><p>$\frac{d}{dx}(x^2)+\frac{d}{dx}(y^2)=\frac{d}{dx}(4)$</p><p>$2x+2y\frac{dy}{dx}=0$</p><p>$\frac{dy}{dx}=-\frac{x}{y}$</p><p>因此,圆上一点($x,y$)的切线的斜率就是$-\frac{x}{y}$</p><p>这里有一个比较难以理解的问题:<strong>为什么要对等式两边同时求导,这意味着什么?</strong></p><p>首先安利一个视频(<a href="https://www.bilibili.com/video/av24325548?p=6">还是原来那个系列,真心讲得好!</a>),我一开始也不能够理解这么干是个什么鬼意思,在反复看了四五遍这个视频后终于搞懂了</p><p>设$S=x^2+y^2$,则$\frac{d}{dx}(x^2+y^2)$表示的是当x和y在平面内任意移动一段距离后S的变化大小.而如果要移动了这一步后仍然在圆上,那么就要满足的条件就是<strong>s的变化量为0</strong>,而对等式右边求导正好也就是求得了这个条件,这就是这样做的道理所在.(当然并不是什么时候都能够很好的直观理解对等式右边求导后得到的条件,我们只需知道要满足这个条件就可以了)</p><p><strong>2.方程</strong>$5sin(x)+3sec(y)=y-x^2+3$<strong>在原点处的切线方程</strong></p><p>($sec(x)=\frac{1}{cos(x)}$)</p><p>首先,很容易验证这个隐函数的图像过原点.然后求导:</p><p>$\frac{d}{dx}5sin(x)+\frac{d}{dx}3sec(y)=\frac{dy}{dx}-\frac{d}{dx}(x^2)+\frac{d}{dx}3$</p><p>$5cos(x)+\frac{d}{dx}3sec(y)=\frac{dy}{dx}-2x$</p><p>等号左边第二项稍显麻烦,于是设$u=3sec(y)$</p><p>$5cos(x)+\frac{du}{dx}=\frac{dy}{dx}-2x$</p><p>$5cos(x)+\frac{du}{dy}\frac{dy}{dx}=\frac{dy}{dx}-2x$</p><p>$5cos(x)+3sec(y)tan(y)\frac{dy}{dx}=\frac{dy}{dx}-2x$</p><p>$(3sec(y)tan(y)-1)\frac{dy}{dx}=-2x-5cos(x)$</p><p>$\frac{dy}{dx}=\frac{-2x-5cos(x)}{(3sec(y)tan(y)-1)}$</p><p>之后将$x=0,y=0$代入得到斜率为$5$,由于过原点,直线方程为$y=5x$</p><p>当然,由于我们是要求一个特定点的直线方程,我们在$5cos(x)+\frac{du}{dx}=\frac{dy}{dx}-2x$得到这个方程的时候就可以将$x=0,y=0$代入,直接得到斜率</p><p><strong>3.方程</strong>$ycot(x)=3csc(y)+x^7$</p><p>($csc(y)=\frac{1}{sin(y)},cot(x)=\frac{1}{tan(x)}$)</p><p>$\frac{d}{dx}(ycot(x))=\frac{d}{dx}3csc(y)+\frac{d}{dx}x^7$</p><p>根据乘积求导法则和链式求导法则</p><p>$y\frac{d}{dx}cot(x)+\frac{dy}{dx}cot(x)=\frac{d}{dx}3csc(y)+\frac{d}{dx}x^7$</p><p>$y(-csc^2(x))+\frac{dy}{dx}cot(x)=\frac{d}{dx}3csc(y)+\frac{d}{dx}x^7$</p><p>$y(-csc^2(x))+\frac{dy}{dx}cot(x)=3\frac{d(csc(y))}{dy}\frac{dy}{dx}+7x^6$</p><p>$y(-csc^2(x))+\frac{dy}{dx}cot(x)=-3csc(y)cot(y)\frac{dy}{dx}+7x^6$</p><p>$\frac{dy}{dx}(cot(x)+3csc(y)cot(y))=ycsc^2(x)+7x^6$</p><p>$\frac{dy}{dx}=\frac{ycsc^2(x)+7x^6}{(cot(x)+3csc(y)cot(y))}$</p><p><strong>4.方程</strong>$x-ycos(\frac{y}{x^4})=\pi+1$<strong>在(1,π)处的切线方程</strong></p><p>毋庸置疑,$(1,π)$在曲线上,求导:</p><p>$\frac{d}{dx}x-\frac{d}{dx}(ycos(\frac{y}{x^4}))=\frac{d}{dx}\pi+\frac{d}{dx}1$</p><p>$1-\frac{d}{dx}(ycos(\frac{y}{x^4}))=0$</p><p>$1-\frac{dy}{dx}cos(\frac{y}{x^4})-y\frac{d}{dx}cos(\frac{y}{x^4})=0$</p><p>把$\frac{d}{dx}cos(\frac{y}{x^4})$单独拿出计算:设$\frac{y}{x^4}=u$</p><p>根据链式求导法则</p><p>$\frac{d}{dx}cos(\frac{y}{x^4})=\frac{d}{dx}cos(u)=sin(u)\frac{d}{dx}u$</p><p>再把$\frac{d}{dx}u$单独拿出计算:</p><p>$\frac{d}{dx}(yx^{-4})=\frac{dy}{dx}x^{-4}-4yx^{-5}$</p><p>因此整理:</p><p>$1-\frac{dy}{dx}cos(\frac{y}{x^4})-ysin(\frac{y}{x^4})(\frac{dy}{dx}x^{-4}-4yx^{-5})=0$</p><p>$1-\frac{dy}{dx}cos(\frac{y}{x^4})-ysin(\frac{y}{x^4})\frac{dy}{dx}x^{-4}+ysin(\frac{y}{x^4})4yx^{-5}=0$</p><p>$1-\frac{dy}{dx}cos(\frac{y}{x^4})-yx^{-4}\frac{dy}{dx}sin(\frac{y}{x^4})+y^24x^{-5}sin(\frac{y}{x^4})=0$</p><p>$\frac{dy}{dx}(cos(\frac{y}{x^4})+yx^{-4}sin(\frac{y}{x^4}))=1+y^24x^{-5}sin(\frac{y}{x^4})$</p><p>$\frac{dy}{dx}=\frac{1+y^24x^{-5}sin(\frac{y}{x^4})}{(cos(\frac{y}{x^4})+yx^{-4}sin(\frac{y}{x^4}))}$</p><p>代入$(1,π)$,$\frac{dx}{dy}=\frac{1+4{\pi}^2sin(\pi)}{cos(\pi)+\pi sin(\pi)}=\frac{1}{-1}=-1$</p><p>利用点斜式得到斜率方程为$y=-x+\pi+1$</p><p>总结一下上面的方法:<strong>在原始方程中,对一切求导并且使用相对应的法则进行化简,最后整理可以得到</strong>$\frac{dy}{dx}$.</p><p><strong>如果要求的是曲线上某一个特定点的切线方程,可以先代入x和y的已知值,接着再来整理出</strong>$\frac{dy}{dx}$,<strong>这样的话计算会快很多</strong></p><h3 id="隐函数求二阶导"><a href="#隐函数求二阶导" class="headerlink" title="隐函数求二阶导"></a>隐函数求二阶导</h3><p>首先要明确,二阶导的意义是<strong>变化量的变化量</strong>,如果把变化量写作$\frac{dy}{dx}$,那么二阶导就是前式的变化量,即$\frac{d}{dx}(\frac{dy}{dx})$,简写做$\frac{d^2y}{dx}$</p><p><strong>例:</strong> 对$2y+sin(y)=\frac{x^2}{\pi}+1$求在点$(\pi,\frac{\pi}{2})$处的$\frac{d^2y}{dx^2}$</p><p>首先求一阶导,得到$2\frac{dy}{dx}+cos(y)\frac{dy}{dx}=\frac{2x}{\pi}$</p><p>故$\frac{dy}{dx}=\frac{2x}{\pi(2+cos(y))}$</p><p>再次求导:</p><p>$\frac{d}{dx}(2\frac{dy}{dx})+\frac{d}{dx}(cos(y)\frac{dy}{dx})=\frac{d}{dx}(\frac{2x}{\pi})$</p><p>$2\frac{d^2y}{dx^2}+\frac{d}{dx}(cos(y)\frac{dy}{dx})=\frac{2}{\pi}$</p><p>$2\frac{d^2y}{dx^2}+\frac{dy}{dx}\frac{d}{dx}cos(y)+cos(y)\frac{d^2y}{dx^2}=\frac{2}{\pi}$</p><p>$2\frac{d^2y}{dx^2}+\frac{dy}{dx}\frac{dcos(y)}{dy}\frac{dy}{dx}+cos(y)\frac{d^2y}{dx^2}=\frac{2}{\pi}$</p><p>$2\frac{d^2y}{dx^2}-(\frac{dy}{dx})^2sin(y)+cos(y)\frac{d^2y}{dx^2}=\frac{2}{\pi}$</p><p>这时,$\frac{d^2y}{dx^2}$的变化关系已经很明确了,因此我们可以代入$(\pi,\frac{\pi}{2})$:</p><p>$2\frac{d^2y}{dx^2}-(\frac{dy}{dx})^2=\frac{2}{\pi}$</p><p>根据前面的一阶导方程,我们代入点$(\pi,\frac{\pi}{2})$得到</p><p>$\frac{dy}{dx}=1$</p><p>因此$2\frac{d^2y}{dx^2}-1=\frac{2}{\pi}$</p><p>$\frac{d^2y}{dx^2}=\frac{1}{\pi}+\frac{1}{2}$</p><h2 id="相关变化率"><a href="#相关变化率" class="headerlink" title="相关变化率"></a>相关变化率</h2><p>当两个相互关联的量中一个量发生变化的时候,另外一个量会发生多少变化呢?这就是相关变化率问题</p><p>假设我们要探求某个量X关于时间的变化过程,我们应该自然而然的想到关于这个量对时间求导,也就是尝试求出$\frac{dX}{dt}$.一般来讲,我们通过求得这个量和其他量的关系,然后进行隐函数求导得到解.作者列出的相关步骤如下:</p><ol><li>读题,识别出待求相关变化率的量</li><li>写出关联所有量的方程(组)</li><li>对方程(组)关于时间t隐函数求导</li><li>把我们所知道的值代入所有方程中做替换,联立得到我们想要的变化率</li></ol><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><p>用打气筒给一个球体充气,空气以常数$12\pi$立方米每秒进入气球,当气球半径达到2米的时候,气球的半径变化率是多少?</p><p>根据几何知识:$V=\frac{4}{3}\pi r^3$</p><p>隐函数求导:$\frac{d}{t}(V)=\frac{d}{dt}(\frac{4}{3}\pi r^3)$</p><p>$\frac{dV}{dt}=\frac{4}{3}\pi \frac{dt^r}{dr}\frac{dr}{dt}=4\pi r^2\frac{dr}{dt}$</p><p>由于$\frac{dV}{dt}=12\pi$</p><p>则$12\pi=4\pi r^2\frac{dr}{dt}$</p><p>$\frac{dr}{dt}=\frac{3}{r^2}$</p><p>当$r=2$时,$\frac{dr}{dt}=\frac{3}{4}$</p><p>故当气球半径达到2米的时候,气球的半径变化率是$\frac{3}{4}$米每秒</p><h3 id="一个稍微难一点的例子"><a href="#一个稍微难一点的例子" class="headerlink" title="一个稍微难一点的例子"></a>一个稍微难一点的例子</h3><p>一辆汽车$A$在一条路上径直向北行驶远离你的大豪宅,另外一辆汽车$B$在另外一条路上径直向西行驶接近你的豪宅.汽车$A$以$55km/h$的速度行驶,而$B$以$45km/h$的速度行驶.当$A$到你家北面$21km$,$B$在你家东面28$km$时,两辆车之间的距离的变化率为多少?</p><p>俗话说,$talk \ is \ cheap, \ show \ me \ the \ graph$,我们来画个图怎么样:</p><p><img src="https://img-blog.csdnimg.cn/20191110154322111.png" alt="在这里插入图片描述"></p><p>设$a,b,c$意义如图中所示</p><p>那么这些量之间的关系就是$a^2+b^2=c^2$</p><p>求导:$\frac{da^2}{dt}+\frac{db^2}{dt}=\frac{dc^2}{dt}$</p><p>$\frac{da^2}{da}\frac{da}{dt}+\frac{db^2}{db}\frac{db}{dt}=\frac{dc^2}{dc}\frac{dc}{dt}$</p><p>$2a\frac{da}{dt}+2b\frac{db}{dt}=2c\frac{dc}{dt}$</p><p>由于$\frac{di}{dt}$就是$i$车的速度,我们写作$v_i$,那么原方程就可以写成</p><p>$2av_a+2bv_b=2cv_c$</p><p>我们要求的就是在$v_a=55,v_b=-45,a=21,b=28$时的$v_c$(<strong>注意这里的b的速度要代入负号,因为b的长度在减小</strong>),因此代入得到</p><p>$2\times 55\times 21-2\times 45\times 28=2cv_c$</p><p>解得$v_c=-3$,这也就意味着在我们研究的这一瞬间,c在以$3km/h$的速度减小</p><h3 id="一个更加难一点的例子"><a href="#一个更加难一点的例子" class="headerlink" title="一个更加难一点的例子"></a>一个更加难一点的例子</h3><p>有一个圆锥形水罐(锥尖在下方),圆锥的高是圆锥半径的两倍.如果水是以$8\pi \  m^3/s$的速度注入水罐,当水罐中的水的体积为$18\pi \ m^3$的时候,水位的变化率是多少?再设想水罐底部有一个小洞,使得水罐里每一立方米的水以一立方米每秒的速率流出(<strong>也就是有体积为V的水,每秒钟流水的速度就是V立方米每秒</strong>),这时当水罐中的水的体积为$18\pi \ m^3$的时候,水位的变化率是多少?</p><p>画个图大概长这样:</p><p><img src="https://img-blog.csdnimg.cn/20191110162151181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>还要知道一点,圆锥的体积公式是:$S=\frac{1}{3}\pi r^2h$,这之后就可以开始解题了:</p><p>根据相似三角形(三角函数也可以),图中圆锥的半径和水位的比值为$1:2$,因此不难整理出圆锥体积关于高(水位)的关系式:$V=\frac{\pi h^3}{12}$</p><p>对于两个问,都是要求水位的变化率(也就是$\frac{dh}{dt}$),于是隐函数求导:</p><p>$\frac{dV}{dt}=\frac{\pi}{12}\frac{dh^3}{dt}$</p><p>$\frac{dV}{dt}=\frac{\pi}{12}3h^2\frac{dh}{dt}=\frac{\pi h^2}{4}\frac{dh}{dt}$</p><p>这里注意,两个问题的区别在于<strong>圆锥内水体积的变化率</strong>,也就是说,第一个问里圆锥内水体积的变化率就是<strong>外部灌水的速度</strong>,而第二个问中圆锥内水体积的变化率是<strong>外部灌水的速度-漏水的速度</strong></p><p>由于接下来的式子会涉及到$h$,我们先解出当$V=18\pi$的时候水位高度为$6$</p><p>因此对于第一问,$\frac{dV}{dt}=8\pi$,$8\pi=\frac{\pi h^2}{4}\frac{dh}{dt}$</p><p>于是$\frac{dh}{dt}=\frac{8}{9}$,水位以$\frac{8}{9}$米每秒的速度上升</p><p>对于第二问,$\frac{dV}{dt}=8\pi-V$,$8\pi-18\pi=\frac{\pi h^2}{4}\frac{dh}{dt}$</p><p>于是$\frac{dh}{dt}=-\frac{10}{9}$,水位以$\frac{10}{9}$米每秒的速度下降</p><h3 id="一个还要难一点的例子"><a href="#一个还要难一点的例子" class="headerlink" title="一个还要难一点的例子"></a>一个还要难一点的例子</h3><p>设想有一架灰机保持在2km高度远离你想正东方向飞行,飞机的速度是$v=500m/s$,同时,天上掉下来一个空降兵(可能是从其他什么飞机上掉下来的,反正不是刚刚提到的这个灰机),在你东边1000m的上空垂直的以10m/s的速度向下运动,就像下图中显示的一样:</p><p><img src="https://img-blog.csdnimg.cn/20191110173314571.png" alt="在这里插入图片描述">问题是:当灰机和空降兵在同一高度,但灰机在东边8000m的时候,$\theta$的变化率$\frac{d\theta}{dt}$是多少?</p><p>作者前面提到的解题步骤中的第一步是要明确题中的变量条件:不难发现,空降兵离你的水平距离是不变的1000m,飞机离你的高度是不变的2000m,而空降兵的高度和飞机离你的水平距离以及角度$\theta$都是在改变的,因此可以画出下图:</p><p><img src="https://img-blog.csdnimg.cn/20191110170907788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwNzgwMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这就结束了第一步的相关事项.</p><p>接下来是把所有有关量的方程列出来:</p><p>$$<br>\begin{cases}<br>tan(\alpha)=\frac{2000}{p}\tan(\beta)=\frac{h}{1000}\\theta+\alpha=\beta<br>\end{cases}<br>$$</p><p>这就是第二步</p><p>第三步是依次求导:</p><p>对第一个方程:$\frac{d}{dt}tan(\alpha)=2000\frac{d}{dt}(\frac{1}{p})$</p><p>$sec^2(a)\frac{d\alpha}{dt}=2000(-p^{-2})=-\frac{2000}{p^2}$</p><p>对第二个方程:$\frac{d}{dt}\tan(\beta)=\frac{d}{dt}\frac{h}{1000}$</p><p>$sec^2(\beta)\frac{d\beta}{dt}=\frac{1}{1000}\frac{dh}{dt}$</p><p>对第三个方程:$\frac{d\theta}{dt}+\frac{d\alpha}{dt}=\frac{d\beta}{dt}$</p><p>得到</p><p>$$<br>\begin{cases}<br>sec^2(a)\frac{d\alpha}{dt}=2000(-p^{-2})=-\frac{2000}{p^2}\sec^2(\beta)\frac{d\beta}{dt}=\frac{1}{1000}\frac{dh}{dt}\\frac{d\theta}{dt}+\frac{d\alpha}{dt}=\frac{d\beta}{dt}<br>\end{cases}<br>$$</p><p>这就完成了第三步</p><p>最后一步是代入已知量并且求得最后的待求变化量:</p><p>已知:$\frac{dp}{dt}=500,\frac{dh}{dt}=-10,p=8000,h=2000,sec^2(\alpha)=\frac{17}{16},sec(\beta)=5$(注意正负号!)</p><p>代入已知后得到$\frac{d\theta}{dt}=\frac{27}{2125}$(真是个鬼畜的答案)</p><p>也就是角$\theta$以$\frac{27}{2125}$弧度每秒的速率递增</p><p>至于解这个题的时候如此的强调作者提的步骤,原因是:按照有经验的前辈给出的步骤解决问题使得我们在复杂的问题面前头脑更加清晰</p><blockquote><p>2019年11月13日21:58:52 鉴于本文太长(主要是太多公式)容易引起浏览器加载缓慢甚至TLE等现象,本书后面的章节在下一篇文章中继续给出</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数学 </category>
          
          <category> 微积分 </category>
          
          <category> 普林斯顿微积分读本阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微积分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一届CSP-S初赛复习</title>
      <link href="/2019/10/17/%E7%AC%AC%E4%B8%80%E5%B1%8ACSP-S%E5%88%9D%E8%B5%9B%E5%A4%8D%E4%B9%A0/"/>
      <url>/2019/10/17/%E7%AC%AC%E4%B8%80%E5%B1%8ACSP-S%E5%88%9D%E8%B5%9B%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>在最后的关头奋力一搏,就算没有得到想要的结果也不会遗憾</p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1380655803&auto=1&height=66"></iframe><hr><h1 id="IT历史"><a href="#IT历史" class="headerlink" title="IT历史"></a>IT历史</h1><p>第一台计算机:1946年的埃尼阿克,USA.</p><p>计算机作用:计算(废话),数据储存处理,通信,辅助工作</p><p>第一个程序员:Ada(女),有以此命名的程序语言</p><p>相关奖项:图灵奖(仅姚期智一华人获奖),菲尔兹奖(数学),诺贝尔奖(物化生经济文学<del>核</del>和平)</p><p>相关机构:ACM(美国计算机协会),IEEE,CCF($€€￡$)</p><h1 id="冯诺依曼计算机结构-储存程序原理"><a href="#冯诺依曼计算机结构-储存程序原理" class="headerlink" title="冯诺依曼计算机结构(储存程序原理)"></a>冯诺依曼计算机结构(储存程序原理)</h1><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1801195816,2860347108&fm=26&gp=0.jpg"></p><p>基本架构,在当下基本没有什么变化</p><h1 id="计算机性能指标"><a href="#计算机性能指标" class="headerlink" title="计算机性能指标"></a>计算机性能指标</h1><p>字长:指CPU一次性能够处理的数据的长度(32位(4字节)或是64位(8字节))</p><p>主频:CPU每秒钟可以进行基本运算的次数,一般以$GHz$为单位(这个单位很大的…)</p><p>核心:计算机内部的CPU个数</p><h1 id="常见的操作系统-编程语言的分类"><a href="#常见的操作系统-编程语言的分类" class="headerlink" title="常见的操作系统,编程语言的分类"></a>常见的操作系统,编程语言的分类</h1><p>操作系统:$windows \ DOS \ UNIX \ Linux \ MacOS \ Android \ iOS \ 鸿蒙$</p><p>编程语言:</p><ul><li><p>机器语言:01101101011</p></li><li><p>汇编语言:指令集,比如这个(luogu P4316程序的汇编版本)</p></li></ul><pre class="line-numbers language-none"><code class="language-none">   0x004015f1 &lt;+0&gt;:push   %ebp   0x004015f2 &lt;+1&gt;:mov    %esp,%ebp   0x004015f4 &lt;+3&gt;:push   %esi   0x004015f5 &lt;+4&gt;:push   %ebx   0x004015f6 &lt;+5&gt;:and    $0xfffffff0,%esp   0x004015f9 &lt;+8&gt;:sub    $0x20,%esp   0x004015fc &lt;+11&gt;:call   0x40d720 &lt;__main&gt;   0x00401601 &lt;+16&gt;:mov    0xb723ac,%eax   0x00401606 &lt;+21&gt;:mov    %eax,0x8(%esp)   0x0040160a &lt;+25&gt;:movl   $0x489000,0x4(%esp)   0x00401612 &lt;+33&gt;:movl   $0x489002,(%esp)   0x00401619 &lt;+40&gt;:call   0x419ad8 &lt;freopen&gt;   0x0040161e &lt;+45&gt;:movl   $0x61aa8,0x8(%esp)   0x00401626 &lt;+53&gt;:movl   $0xffffffff,0x4(%esp)   0x0040162e &lt;+61&gt;:movl   $0x926080,(%esp)   0x00401635 &lt;+68&gt;:call   0x419ae0 &lt;memset&gt;   0x0040163a &lt;+73&gt;:movl   $0xc3550,0x8(%esp)   0x00401642 &lt;+81&gt;:movl   $0x0,0x4(%esp)   0x0040164a &lt;+89&gt;:movl   $0x987b40,(%esp)   0x00401651 &lt;+96&gt;:call   0x419ae0 &lt;memset&gt;   0x00401656 &lt;+101&gt;:movl   $0xc3550,0x8(%esp)   0x0040165e &lt;+109&gt;:movl   $0x0,0x4(%esp)   0x00401666 &lt;+117&gt;:movl   $0xa4b0c0,(%esp)   0x0040166d &lt;+124&gt;:call   0x419ae0 &lt;memset&gt;   0x00401672 &lt;+129&gt;:movl   $0x61aa8,0x8(%esp)   0x0040167a &lt;+137&gt;:movl   $0x0,0x4(%esp)   0x00401682 &lt;+145&gt;:movl   $0xb0e640,(%esp)   0x00401689 &lt;+152&gt;:call   0x419ae0 &lt;memset&gt;   0x0040168e &lt;+157&gt;:fld1      0x00401690 &lt;+159&gt;:fstpl  0x987b48   0x00401696 &lt;+165&gt;:movl   $0x492040,(%esp)   0x0040169d &lt;+172&gt;:call   0x421608 &lt;read&lt;int&gt;(int&amp;)&gt;   0x004016a2 &lt;+177&gt;:movl   $0x492044,(%esp)   0x004016a9 &lt;+184&gt;:call   0x421608 &lt;read&lt;int&gt;(int&amp;)&gt;   0x004016ae &lt;+189&gt;:mov    $0x1,%ebx   0x004016b3 &lt;+194&gt;:jmp    0x401715 &lt;main()+292&gt;   0x004016b5 &lt;+196&gt;:lea    0x1c(%esp),%eax   0x004016b9 &lt;+200&gt;:mov    %eax,(%esp)   0x004016bc &lt;+203&gt;:call   0x421608 &lt;read&lt;int&gt;(int&amp;)&gt;   0x004016c1 &lt;+208&gt;:lea    0x18(%esp),%eax   0x004016c5 &lt;+212&gt;:mov    %eax,(%esp)   0x004016c8 &lt;+215&gt;:call   0x421608 &lt;read&lt;int&gt;(int&amp;)&gt;   0x004016cd &lt;+220&gt;:lea    0x10(%esp),%eax   0x004016d1 &lt;+224&gt;:mov    %eax,(%esp)   0x004016d4 &lt;+227&gt;:call   0x421694 &lt;read&lt;long long&gt;(long long&amp;)&gt;   0x004016d9 &lt;+232&gt;:mov    0x10(%esp),%eax   0x004016dd &lt;+236&gt;:mov    0x14(%esp),%edx   0x004016e1 &lt;+240&gt;:mov    0x18(%esp),%esi   0x004016e5 &lt;+244&gt;:mov    0x1c(%esp),%ecx   0x004016e9 &lt;+248&gt;:mov    %eax,0x8(%esp)   0x004016ed &lt;+252&gt;:mov    %edx,0xc(%esp)   0x004016f1 &lt;+256&gt;:mov    %esi,0x4(%esp)   0x004016f5 &lt;+260&gt;:mov    %ecx,(%esp)   0x004016f8 &lt;+263&gt;:call   0x421580 &lt;addl(int, int, long long)&gt;   0x004016fd &lt;+268&gt;:mov    0x1c(%esp),%eax   0x00401701 &lt;+272&gt;:mov    0xb0e640(,%eax,4),%edx   0x00401708 &lt;+279&gt;:add    $0x1,%edx   0x0040170b &lt;+282&gt;:mov    %edx,0xb0e640(,%eax,4)&#x3D;&gt; 0x00401712 &lt;+289&gt;:add    $0x1,%ebx   0x00401715 &lt;+292&gt;:mov    0x492044,%eax   0x0040171a &lt;+297&gt;:cmp    %eax,%ebx   0x0040171c &lt;+299&gt;:jle    0x4016b5 &lt;main()+196&gt;   0x0040171e &lt;+301&gt;:movl   $0x1,(%esp)   0x00401725 &lt;+308&gt;:call   0x401500 &lt;dfs(int)&gt;   0x0040172a &lt;+313&gt;:fldl   0xb700e8   0x00401730 &lt;+319&gt;:fstpl  0x4(%esp)   0x00401734 &lt;+323&gt;:movl   $0x48900d,(%esp)   0x0040173b &lt;+330&gt;:call   0x42176c &lt;printf(char const*, ...)&gt;   0x00401740 &lt;+335&gt;:mov    $0x0,%eax   0x00401745 &lt;+340&gt;:lea    -0x8(%ebp),%esp   0x00401748 &lt;+343&gt;:pop    %ebx   0x00401749 &lt;+344&gt;:pop    %esi   0x0040174a &lt;+345&gt;:pop    %ebp   0x0040174b &lt;+346&gt;:ret    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>高级语言:人能够看得懂的语言,如</li></ul><p>$C++ \ Pascal \ Python \ PHP$</p><p>高级语言分类:编译性语言($C++ \ C \ Pascal$),解释性语言($Python \ PHP \ Basic \ Java$)</p><h1 id="NOI系列历史知识"><a href="#NOI系列历史知识" class="headerlink" title="NOI系列历史知识"></a>NOI系列历史知识</h1><h2 id="NOI"><a href="#NOI" class="headerlink" title="NOI"></a>NOI</h2><p>首次举办:1984年</p><p>举办方:CCF,中国计算机协会</p><h2 id="NOIP"><a href="#NOIP" class="headerlink" title="NOIP"></a>NOIP</h2><p>存在过的时间:1995-2019(经历了从省一可以保送到省一没任何卵用的过程)</p><p>可以带的东西(这也要考…):文具,衣服,水,证件,笔,人(仅限自己),计算器(待定?)</p><h2 id="可以使用的语言"><a href="#可以使用的语言" class="headerlink" title="可以使用的语言"></a>可以使用的语言</h2><p>(可怜的pascal将会在2022年被noip抛弃)</p><p>(但是noip却在这之前已经挂了)</p><p>2022年后只能用$C++$</p><h1 id="源码-补码-反码"><a href="#源码-补码-反码" class="headerlink" title="源码,补码,反码"></a>源码,补码,反码</h1><p>这个是我原来写过的一片<a href="https://blog.csdn.net/weixin_43907802/article/details/84877393">博客</a>,而且还是阅读量最多的一篇</p><p><del>但是读者却没有想到,作者自己都忘了这个东西是怎么一回事了2333</del></p><p>复习了一下,其实很简单:<strong>源码就是二进制+符号位,反码就是源码除了符号位外取反,补码就是反码＋1</strong>,只需要记住这些东西就可以了,因为初赛主要考运算</p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>所有计算机里的数据都是01串</p><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><ul><li>ASCII编码</li></ul><p>把英文字符映射到0到127这些整数中</p><ul><li>GBK编码</li></ul><p>存汉字,用两个字节来存贮信息</p><ul><li>utf-8编码</li></ul><p>使用3个字节,可以存世界上出现过的几乎所有文字(这就是我每次写博客都要用utf-8编码保存的原因?)</p><h2 id="像素编码"><a href="#像素编码" class="headerlink" title="像素编码"></a>像素编码</h2><p>这个我也是写过<a href="https://www.luogu.org/blog/Andrew82/xiang-su-xiang-guan">博客</a>的,但是我也忘了…</p><p>这个首先要复习一下进制关系:</p><p>bit,位,最小的内存大小单位,1个bit为一个二进制位</p><p>byte,字节,一个byte为8个二进制位,即8个bit,byte简写为B</p><p>之后的就好说了:</p><p>1KB=1024B</p><p>1MB=1024KB</p><p>1GB=1024MB</p><p>1TB=1024GB</p><p>后面的我就背不到了,但后面好像还有五六个单位</p><p><del>谁用的到这么大的单位啊</del></p><p>然后就是很简单的事情了:</p><p>m*n算出有多少个格子</p><p>每一个格子的字节数等于位数,然后进行单位换算即可</p><h1 id="进制转化"><a href="#进制转化" class="headerlink" title="进制转化"></a>进制转化</h1><h2 id="8进制和16进制和二进制"><a href="#8进制和16进制和二进制" class="headerlink" title="8进制和16进制和二进制"></a>8进制和16进制和二进制</h2><ul><li>二进制转8/16进制:</li></ul><p>凑4/3法,即以小数点为分界线向左/右分别处理出整数或小数的8/16进制表示位,如果位数不够就填够为止</p><ul><li>8/16进制转二进制:</li></ul><p>为上面过程的逆过程,即把每一位数拆分成对应的二进制数即可</p><h2 id="10进制和二进制"><a href="#10进制和二进制" class="headerlink" title="10进制和二进制"></a>10进制和二进制</h2><ul><li>10到2</li></ul><p>短除法</p><ul><li>2到10</li></ul><p>按权展开法或二分法</p><h1 id="前中后缀转换"><a href="#前中后缀转换" class="headerlink" title="前中后缀转换"></a>前中后缀转换</h1><h2 id="中转前后"><a href="#中转前后" class="headerlink" title="中转前后"></a>中转前后</h2><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><p>如A+B*(C−D)−E/F</p><p>我们对其建一颗表达式树</p><p><img src="http://ae01.alicdn.com/kf/HTB1fE4vXvvsK1Rjy0Fi762wtXXaf.png"></p><p>这个树是怎么建出来的呢?</p><p>先别着急,我们先给这式子加个括号:$(A+(B\times(C-D)))-(E÷F)$</p><p>显然,最后被计算的那个就是没有被括号包围的那个减号,因此这个减号放在根节点,然后这个根节点的左子树就是左边那个括号里面的内容,右子树就是右边那个括号里面的内容,递归进行分解就可以写出如上的树</p><p>有了这个树之后,问题就变得非常明了了,要求什么遍历就对这个树进行一次什么遍历就可以了(不要告诉我你连前中后序遍历都不知道)</p><h3 id="神仙方法"><a href="#神仙方法" class="headerlink" title="神仙方法:"></a>神仙方法:</h3><p>一个中缀式到其他式子的转换方法(其实是正解的简化版)</p><p>这里我给出一个中缀表达式</p><p>$a+b*c-(d+e)$</p><p>第一步：按照运算符的优先级对所有的运算单位加括号</p><p>式子变成：$((a+(b*c))-(d+e))$</p><p>第二步：转换前缀与后缀表达式</p><p>前缀：把运算符号移动到对应的括号前面</p><p>则变成：$-( +(a *(bc)) +(de))$</p><p>把括号去掉：-+a*bc+de  前缀式子出现</p><p>后缀：把运算符号移动到对应的括号后面</p><p>则变成：$((a(bc)* )+ (de)+ )-$</p><p>把括号去掉：$abc*+de+-$  后缀式子出现</p><p>发现没有，前缀式，后缀式是不需要用括号来进行优先级的确定的。</p><h2 id="前-后转中"><a href="#前-后转中" class="headerlink" title="前,后转中"></a>前,后转中</h2><p>显然对于唯一确定的后缀表达式,可能有不同的前中缀表达式</p><p>所有这个问题不需要过多探讨,因为假设在选择题里面考到,也不可能不给你中序遍历,既然要给出中序遍历,那么就直接用上面的方法通过答案推条件就行</p><h1 id="关于地址总线宽度"><a href="#关于地址总线宽度" class="headerlink" title="关于地址总线宽度"></a>关于地址总线宽度</h1><p>32位总线跨度可以寻址$2^{32}B,1GB=2^{30}B;所以2^{32}B=2^2GB=4GB$;</p><p>地址总线宽度为32位,一次可以发送的一个数据是32位的，则寻址的单元最大就是32位数据的最大值，就是$2^{32}$B。</p><p>地址总线宽度决定了CPU可以访问的物理地址空间，简单地说就是CPU到底能够使用多大容量的内存。</p><h1 id="无线通讯技术进展"><a href="#无线通讯技术进展" class="headerlink" title="无线通讯技术进展"></a>无线通讯技术进展</h1><p>这部分全是废话</p><p>（1）平流层气球通信</p><p>1997年1月，在ITU-R SG9会议上，美国SkyStation International公司提出了一种崭新的47/48GHz平流层气球通信技术，设想在离地20～24km高处外型如汽艇的内充氦气的气球之间，以激光或卫星方式连网，建立全球气球平台，覆盖全球，组成高速互联网，将收到的信息中继转发给便携式多媒体终端。</p><p>（2）广带无线接入</p><p>所谓广带是指网络速率高于10Mbit/s的传输系统，比宽带网络具有更高的系统性能指标。广带无线网际网络接入系统标准是针对微波及毫米波段中新的空中接口标准，它具有高速率、多速率、新频道、多样化、抗干扰性强等特点，能够成功地支持无线接入多媒体数据通信、数据网络、视频、多媒体等结合业务网络的信息传输，同时还兼有灵活机动的特点，适用于商务大楼、热点地区及家庭用户的宽带接入。</p><p>（3）蓝牙技术</p><p>蓝牙是针对目前近距离的便携式器件之间的红外线链路(Infrared link，简称IrDA)而提出的，是一种无线数据与语音通信的开放性全球规范，它以低成本的近距离无线连接为基础，为固定与移动设备通信环境建立一个特别连接的短程无线电技术。</p><p>（4）GSM</p><p>GSM/DCS的目标是在移动设备(或任何便携设备)之间提供各种各样的业务，包括语音传输和报文处理业务(X. 400、传真传输、紧急呼叫以及各种类型的数据传输业务)。</p><p>（5）CDMA</p><p>CDMA中的模拟语音被编码成数字信号，且每个对话都被分配给一个惟一的代码(为每个独立的传输分配一个“签名”)，一个小区内的所有用户使用同一个带宽频谱(而不是该带宽的一部分)。在CDMA接收端，通过使用补码，可以从已编码信号中恢复原始信号。接收机以相干方式把多径接收信号组合起来，这样可以改善信号的质量</p><p>（6）无绳系统</p><p>CT2 CAI和DECT(欧洲数字无绳通信)一起组成了无绳系统的欧洲标准。CT2可以支持语音和数据业务。作为向第2代无绳电话系统发展的一种方法，DECT标准始于20世纪80年代中期的欧洲邮政和远程通信会议(CEPT)，DECT也被认为是支持大容量PABX系统的合适技术[GRIL93]。DECT工作于1 880～1 990MHz频段，同CT2一样，它用ITU-T G.721推荐标准所规定的ADPCM对语音进行编码，而且，32kbit/s的语音信号按TDMA方式接入。DECT并不限于只传语音信号，它也支持数据应用。</p><p>（7）蜂窝数字数据分组系统(CDPD)</p><p>几家公共电信运营商已经就现存数据网络的无线扩展制定了规范，称为蜂窝数字数据分组系统(CDPD)规范，其目的是提供到移动通信用户的无线分组数据连接[CDPD93]。开发CDPD的目的是利用现有先进移动电话系统的未用容量以及利用像无连接网络层协议(CLNP)、IP、OSI运输层、TCP等现有的数据通信协议。CDPD的体系结构基于OSI模型，它来自ISO 7498和CCITT的OSI X.200建议。这种体系结构中有两个基本的网络实体：端系统(ES)和中间系统(IS)。ES是一种用户设备，它在因特网中叫做主机，IS是一种互通设备，在因特网中被称作路由器。</p><p>（8）第三代移动通信系统</p><p>3G系统的研究工作是由欧洲委员会、CCIR和ETSI发起的，这一系统被称为“通用移动通信系统(UMTS)”。这些新系统可能采取的拓扑结构是混合小区体系结构，采用大小可变的小区，可以满足具体的地理区域和业务要求。该技术面临的挑战是手机，它必须能无缝地跨越所有的小区。</p><p>（9） i–Mode</p><p>i–Mode使用压缩格式HTML，即CHTML(Compact HTML)，在800MHz PDC(Personal Digital Cellular System)分组交换通信网上开通移动因特网业务，内容包括：因特网电子邮件、移动银行服务、航班信息、股票信息、新闻、天气和体育消息，提供证券、银行、生命保险公司、信息卡公司的信息以及移动食谱、房屋租借、日英字典等。</p><p>（10）WAP</p><p>无线应用协议(WAP，WirelessApplication protocol)其实是一种浏览器，我们平常最熟悉的浏览器莫过于Netscape和IE，可是这两者是运用于计算机、固定电话上网的。而要利用移动电话上网，就要用另一种浏览器WAP。WAP的基本原理是把网站上的内容予以简化，再利用无线网络传到手机上，使其可以利用手机的小屏幕取代计算机屏幕，而成为具有互动性质的工具。WAP的目标是使互联网的内容和各种增值服务适用于手机用户和各种无线设备用户，并能适用于不同的无线网络技术。</p><p>（11）GPRS</p><p>通用分组无线业务(GPRS，GeneralPacket Radio Service)是移动环境中高速数据传输的解决方案。GPRS技术作为GSM向第三代移动通信发展的过渡技术，由于具备节省建设投资、可充分发挥原有设备作用、建设周期短等多种优点，因此被越来越多的电信运营商青睐。GPRS技术可以充分利用现有GSM系统的设备，为用户提供移动数据传输服务，并可为因特网/ISP和企业内部网提供基于分组的高速、安全的无线接入</p><p>（12）LAS-CDMA(大区域同步码分多址联接)</p><p>LAS-CDMA技术将成为未来“全IP”系统(3.5G或4G)的自然选择,LAS-CDMA技术具有以下特点：首先是，附加频谱。由于LAS-CDMA可提供比现有2G标准高20多倍的容量以及比cdma2000高3至6倍的容量，所以可最大限度地减少附加网络的建设和开支，从而使电信公司能以较低的成本在市场上竞争，并以最经济的方式向客户提供新颖和优良的服务。其次是，新型的网络结构。从设计角度看，LAS-CDMA技术不仅能够强化当前的2G网络，而且还能为3G提供前所未有的功能，并能成功地推动第四代(4G)无线网络的发展。这些优势可使电信公司获得多方面的利益，其中包括近期和长期利益。这项先进技术在开发中统筹兼顾，可适用于各代无线通信系统的体系结构。电信公司可通过这项技术轻而易举地发展各自的系统而无需在网络结构上做额外的修改，从而大幅度地降低成本、缩短工期。在全球兼容性方面，由于LAS-CDMA与所有现行和未来的标准兼容，故易于现有系统向LAS-CDMA过渡。此外，LAS-CDMA还能顺应各项可进一步提高系统性能和容量的先进技术。作为一项空中接口技术，LAS-CDMA可通过配置使其作为一种增强模式与UTRA、IS-95、IS-2000以及TD-SCDMA等其他现用系统兼容。最后，LAS-CDMA还可显著地改进服务质量。在这方面，LAS-CDMA可通过其专利扩频技术大幅度地消除目前CDMA系统上出现的干扰现象。因为这种现象不仅影响语音服务质量，而且最终也会影响数据服务质量。在LAS-CDMA系统中，所有信号的码间干扰(ISI)和多址干扰(MAI)都可在“无干扰”时间窗口内降为零，相邻蜂窝区干扰(ACI)也可降低到边际水平。因此，LAS-CDMA不仅提高了系统性能和容量，而且也不会在其他CDMA系统上增加任何复杂性。</p><h1 id="各种排序"><a href="#各种排序" class="headerlink" title="各种排序"></a>各种排序</h1><ul><li>计数排序(选总统)</li></ul><p>时间复杂度:$O(a+n)$,a是值域,不基于比较,基于”分位分类”,也就是统计</p><ul><li>选择排序</li></ul><p>从所有数中选出最小的放到第一个,然后选第二小的放到第二个,…….时间复杂度为$O(n^2)$,不稳定</p><p>(注意:稳定的意义不是时间复杂度随数据形式的变化而不变,而是<strong>如果两个相同的数一个在前一个在后,排完序后还是在前面的在前面,在后面的在后面</strong>)</p><ul><li>冒泡排序</li></ul><p>时间复杂度为$O(n^2)$,稳定</p><ol><li><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p></li><li><p>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p></li></ol><ul><li>插入排序</li></ul><p>时间复杂度为$O(n^2)$,稳定</p><p>插入排序的工作方式像许多人排序一手扑克牌：</p><ol><li><p>左手为空，桌子上牌面向下</p></li><li><p>每次从桌子上拿走一张牌插入左手中正确的位置</p></li><li><p>为了找到正确位置，从右到左将它与已经在手中的每张牌进行比较，然后插入</p></li><li><p>重复步骤2~3</p></li></ol><ul><li>归并排序</li></ul><p>时间复杂度$O(nlogn)$,稳定,需要额外辅助空间</p><ul><li>快速排序</li></ul><p>时间复杂度$O(nlogn)$,不稳定,最坏$O(n^2)$</p><ul><li>堆排序</li></ul><p>时间复杂度$O(nlogn)$,不稳定(优先队列的原理)</p><h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><h2 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h2><p>废话不多说,记住这个东西是怎么操作的就行</p><p>放个<a href="https://blog.csdn.net/qq_36653505/article/details/81701181">链接</a></p><h1 id="简单DP"><a href="#简单DP" class="headerlink" title="简单DP"></a>简单DP</h1><p>一个 1×8 的方格图形（不可旋转）用黑、白两种颜色填涂每个方格。如果每个方格只能填涂一种颜色，且不允许两个黑格相邻，共有_________种填涂方案。</p><p>答案:55种</p><p><strong>解法一</strong>:DP,很简单的,这里就不提了</p><p><strong>解法二</strong>:斐波那契</p><p>n个方格的填涂分为两种情况。</p><p>1、 第一个方格为黑色，那么第二个方格一定是白色，所以第一种情况数就是n-2个方格的填涂方案数。</p><p>2、 第一个方格为白色，那么第二个方格不定。所以第二种情况数就是n-1个方格的填涂方案数。</p><p>所以f(n)=f(n-1)+f(n-2)， 也就是说这是一个<strong>斐波那契数列</strong>问题。边界条件是：f(1)=2(黑,白)；f(2)=3(黑白,白白,白黑)。则有：</p><p>F(n)=F(8)=f(6)+f(7)=55</p><h1 id="算法时间复杂度分析"><a href="#算法时间复杂度分析" class="headerlink" title="算法时间复杂度分析"></a>算法时间复杂度分析</h1><p>常用方法:</p><h2 id="数列求通项公式"><a href="#数列求通项公式" class="headerlink" title="数列求通项公式"></a>数列求通项公式</h2><p>常规内容,应该比较简单的罢(<del>但鉴于我常规数学学得渣,还是来一道例题推导一下</del>):</p><p>【NOIP2015初赛】某算法的计算时间表示为递推关系式：</p><p>$T(N)=T(N−1)+N,T(0)=1$,则该算法的时间复杂度为______________________________________________________。</p><p>A.$O(log_2{2N})$ B.$O(Nlog_2N)$ C.$O(N)$ D.$O(N^2)$</p><p>$T(N)=T(N−1)+N,T(0)=1$</p><p>则$T(N)-T(N-1)=N$</p><p>$T(N-1)-T(N-2)=N-1$</p><p>$……$</p><p>$T(1)-T(0)=0$</p><p>所有式子加起来得到</p><p>$T(N)=\sum_{x=0}^{n}x=\frac{(1+n)\times n}{2}$</p><p>因此时间复杂度是$O(N^2)$,选D</p><h2 id="主定理"><a href="#主定理" class="headerlink" title="主定理"></a>主定理</h2><p>有递推关系式$T(n)=aT(\frac{n}{b})+f(n)$</p><p>则当存在常数$e&gt;0$使得$f(n)=O(n^{log_ab-e})$时,$T(n)=O(n^{log_ba})$</p><p>当存在常数$k&gt;=0$使得$f(n)=O(n^{log_b^a}log^kn)$时,$T(n)=O(n^{log_ba}log^{k+1}n)$</p><p>当存在常数$e&gt;0$使得$f(n)=O(n^{log_ab+e})$时,$T(n)=O(f(n))$</p><p><del>关于我的黑暗记背法</del></p><p>鉴于这个东西要微积分的知识才能够理解并推导,而我现在又没有时间去学透微积分了,因此我利用当年世界脑力锦标赛训练的方法以如下过程记住了主定理:</p><p>将字母和5个符号(加,减,乘方,左括号,右括号)一一映射到1~31这些正整数上去:</p><pre class="line-numbers language-none"><code class="language-none">a&#x3D;01 b&#x3D;02 c&#x3D;03 d&#x3D;04 e&#x3D;05 f&#x3D;06 g&#x3D;07 h&#x3D;08 i&#x3D;09 j&#x3D;10k&#x3D;11 l&#x3D;12 m&#x3D;13 n&#x3D;14 o&#x3D;15 p&#x3D;16 q&#x3D;17 r&#x3D;18 s&#x3D;19 t&#x3D;20u&#x3D;21 v&#x3D;22 w&#x3D;23 x&#x3D;24 y&#x3D;25 z&#x3D;26 +&#x3D;27 -&#x3D;28 ^&#x3D;29 (&#x3D;30 )&#x3D;31<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后将上面的公式的关键部分按照电脑的方式打出来(没有缩进和下标,一切标记由符号显示):</p><pre class="line-numbers language-none"><code class="language-none">n^(logba-e)n^(logba)n^(logba)log^knn^(logba)log^(k+1)nn^(logba+e)f(n)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后写了一个程序来输出映射关系:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">loop</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clean</span><span class="token expression"><span class="token punctuation">(</span>arry<span class="token punctuation">,</span>num<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span>num<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arry<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">anti_loop</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">>=</span>end<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">isdegit</span><span class="token expression"><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">>=</span></span><span class="token string">'0'</span><span class="token expression"><span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span></span><span class="token string">'9'</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>T neg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdegit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">==</span><span class="token number">45</span><span class="token punctuation">)</span>neg<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdegit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>r<span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>x<span class="token operator">*=</span>neg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2d "</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"27 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"28 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'^'</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"29 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"30 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"31 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"32 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后点击运行键,<strong>tada!</strong>:</p><pre class="line-numbers language-none"><code class="language-none">14 29 30 12 15 07 02 01 28 05 3114 29 30 12 15 07 02 01 3114 29 30 12 15 07 02 01 31 12 15 07 29 11 1414 29 30 12 15 07 02 01 31 12 15 07 29 30 11 27 31 1414 29 30 12 15 07 02 01 27 05 3106 30 14 31<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>然后,最关键的部分来了…我把这些数字背了下来,明天再默写出来就相当于是可以直接套用主定理了哈哈哈哈</del></p><p><strong>不建议他人使用,这是一种降智的操作!</strong></p><p>例题:</p><p>【NOIP2017初赛】若某算法的计算时间表示为递推关系式：</p><p>$T(N)=2T(\frac{N}{2})+NlogN,T(1)=1$,则该算法的时间复杂度为___。</p><p>$A.O(N) \ B.O(Nlog_2N) \ C.O(Nlog_2^2N) \ D.O(N^2)$</p><p>【解析】套用情况2中的k=1的情况，则$T(n)=O(Nlog_2^2N)$,选C</p><p>【NOIP2016初赛】若某算法的计算时间表示为递推关系式：</p><p>$T(N)=2T(\frac{N}{4})+\sqrt{N},T(1)=1$,则该算法的时间复杂度为___。</p><p>$A.O(N) \ B.O(\sqrt{N}) \ C.O(\sqrt{N}log_2N) \ D.O(N^2)$</p><p>【解析】套用情况2中的k=0的情况，则$T(n)=O(\sqrt{N}log_2N)​$,选C</p><h1 id="特征方程"><a href="#特征方程" class="headerlink" title="特征方程"></a>特征方程</h1><p>为了节省时间,直接上图片了</p><p><img src="https://i.loli.net/2019/10/18/nJKs8YWUZ9RNyij.png" alt="1.png"></p><p><img src="https://i.loli.net/2019/10/18/QB9kKmj2xyp3V8R.png" alt="2.png"></p><p><img src="https://i.loli.net/2019/10/18/G7VwzhkSUY2pAHv.png" alt="3.png"></p><p><img src="https://i.loli.net/2019/10/18/JMmVnyvKIBF2jCO.png" alt="4.png"></p><p><img src="https://i.loli.net/2019/10/18/i1FRdjDHhvzmCPN.png" alt="5.png"></p><p><strong>例题:</strong></p><p>若$f[0]=0,f[1]=1,f[n+1]=\frac{f[n]+f[n-1]}{2}$,则随着i的增大,$f[i]$将接近于:</p><p><strong>解:</strong></p><p>设$f[n-1]=x^0,f[n]=x^1,f[n+1]=x^2$</p><p>则$x^2=\frac{x+1}{2}$</p><p>$2x^2-x-1=0$</p><p>解得$x_1=-\frac{1}{2},x_2=1$</p><p>因此设原递推式为$a(-\frac{1}{2})^i+b(1)^i$</p><p>因为当$i=0$时,值为0,$i=1$时,值为1,故</p><p>$$</p><p>\begin{cases}</p><p>a+b=0\-\frac{1}{2}a+b=1</p><p>\end{cases}</p><p>$$</p><p>解得</p><p>$$</p><p>\begin{cases}</p><p>a=-\frac{2}{3}\b=\frac{2}{3}<br>\end{cases}</p><p>$$</p><p>因此原递推式为$f(n)=-\frac{2}{3}(-\frac{1}{2})^n+\frac{2}{3}(1)^n$</p><p>当n无限大的时候,有$-\frac{2}{3}(-\frac{1}{2})^n$趋近于0,即原式趋近于$\frac{2}{3}$</p><p>(其实我觉得不需要线性代数的知识也可以理解这个知识点~~)</p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p><del>鬼畜啊,鬼畜啊</del></p><p>先给个<a href="https://blog.csdn.net/weixin_39951988/article/details/87773322">链接</a></p><p>这哥们讲的挺好的</p><p>然后就是那啥,归纳一下常见的操作和关键点喽,明天看会不会遇到这类题</p><ul><li><p><code>&amp;i</code>,取 i 变量所在的地址编号</p></li><li><p><code>pi = &amp;i;</code>,把 i 地址的编号赋值给 pi</p></li><li><p>指针变量所存的内容就是内存的地址编号 </p></li><li><p><code>*pi </code>,pi 内容所指的地址的内容</p></li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>update 2019年10月24日15:27:13</p></blockquote><p>成绩出来了,86pts,算是稳进复赛了吧,但是看到比我还努力的一些同学比我这个态度不端正的家伙还考的差的时候,我感到非常不舒服.<del>也许用”不舒服”这个词才能够表达出这种怪异的感觉吧</del>.没有付出劳动的人能够享受果实,而真正做贡献的人却在吃土…这不就是马克思口中的阶级矛盾嘛,无产阶级受到中产阶级的剥削,最后<del>造成</del>伟大的无产阶级专政,之后进入一个共产主义社会(<del>今天中午刚刚重看了苏菲的世界马克思那一章哈哈</del>)..</p><p>哎呀扯到哪里去了我的妈呀.不管那么多了,进了就进了吧,</p><p>面对这种情况,我只好非常不负责任的说:<del>这次CSP-S复赛就考着玩吧</del></p><p>这张图值得纪念:</p><p><img src="https://i.loli.net/2019/10/24/T6RQej2WCxMOXbA.png" alt="捕获.PNG"></p><h2 id="关于图中所示相关事件"><a href="#关于图中所示相关事件" class="headerlink" title="关于图中所示相关事件"></a>关于图中所示相关事件</h2><p>cdqzjx这些人凑名额也不要这么水嘛,如果蔡徐坤坐我旁边考试我会考爆炸的!</p><p><img src="https://i.loli.net/2019/10/24/QP6xC3d5De8atZ4.png" alt="1.PNG"></p><p><img src="https://i.loli.net/2019/10/24/2ncetpdsXZ7KSEa.png" alt="2.PNG"></p><p><img src="https://i.loli.net/2019/10/24/eNuavHSPTVCEXFj.png" alt="3.PNG"></p><p><img src="https://i.loli.net/2019/10/24/GLFckq9VaIpuDj7.png" alt="4.PNG"></p><p><img src="https://i.loli.net/2019/10/24/J21DUnjYRkIhpMB.png" alt="5.PNG"></p><p><img src="https://i.loli.net/2019/10/24/7A2fGVP48OQnzKD.png" alt="6.PNG"></p><p><img src="https://i.loli.net/2019/10/24/tqnkOLg5H9Rdz4A.png" alt="7.PNG"></p><blockquote><p>update 2019年11月8日08:09:08</p></blockquote><p>震了个大惊!$MZOI$创造历史,成功初赛退役5人!</p><p>啊这TM是什么鬼啊,划水的没退成,努力的被送退…<del>看来运气成分很占上风啊</del></p><p>老实说,竞赛班里面大部分人都有右倾趋势,而且这种趋势和成绩成正相关.但就算是思想再怎么右倾,在遇到这种情况的时候都会感到不安,都会有<strong>唇亡齿寒</strong>之感,更何况我这种坚定的左翼分子呢?</p><p>默哀..</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
          <category> 初赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学基础-概率和期望</title>
      <link href="/2019/09/23/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E6%A6%82%E7%8E%87%E5%92%8C%E6%9C%9F%E6%9C%9B/"/>
      <url>/2019/09/23/%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80-%E6%A6%82%E7%8E%87%E5%92%8C%E6%9C%9F%E6%9C%9B/</url>
      
        <content type="html"><![CDATA[<p>高中部分的概率和期望知识总结</p><span id="more"></span><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h2><p>事件分为</p><ul><li><p>必然事件</p></li><li><p>不可能事件</p></li><li><p>随机事件</p></li></ul><h2 id="基本事件-空间"><a href="#基本事件-空间" class="headerlink" title="基本事件(空间)"></a>基本事件(空间)</h2><ul><li><p>基本事件:不能够再分的事件,其他的事件都能够由基本事件来表示</p></li><li><p>基本事件空间:基本事件构成的集合,用大写希腊字母$\omega$表示</p></li></ul><h1 id="频率和概率"><a href="#频率和概率" class="headerlink" title="频率和概率"></a>频率和概率</h1><p><img src="https://i.loli.net/2019/09/23/fhPJ3zo45timjEb.png" alt="火狐截图_2019-09-23T07-05-39.540Z.png"></p><p>如图,概率是事件的基本性质,是不变的,而频率=$\frac{事件出现的次数(也叫事件的频数)}{总次数}$,是会改变滴</p><p>频率只能够近似的表示概率,但不等同!这就是你买1000个中奖率为千分之一的彩票而不中奖的原因了</p><p>概率范围:[0,1]</p><h1 id="概率的性质"><a href="#概率的性质" class="headerlink" title="概率的性质"></a>概率的性质</h1><h2 id="事件的关系"><a href="#事件的关系" class="headerlink" title="事件的关系"></a>事件的关系</h2><p>(此处省略包含,并事件,交事件的引入)</p><ul><li><p>互斥事件:事件A和事件B互为互斥事件,当且仅当事件A和事件B不可能同时发生</p></li><li><p>对立事件:事件A和事件B互为对立事件,当且仅当事件A和事件B互为互斥事件且事件A和事件B的并集为整个基本事件空间,也就是要么发生A要么发生B,不可能发生C</p></li></ul><h2 id="概率运算"><a href="#概率运算" class="headerlink" title="概率运算"></a>概率运算</h2><ul><li>互斥事件的概率运算(即概率加法公式):</li></ul><p>设事件A和事件B为互斥事件,概率分别为P(A),P(B),那么P(A∪B)=P(A)+P(B)</p><ul><li>对立事件的概率</li></ul><p>设事件A和事件B为对立事件,则P(A)+P(B)=1</p><h1 id="古典概型"><a href="#古典概型" class="headerlink" title="古典概型"></a>古典概型</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>把具有<strong>有限性</strong>,<strong>等可能性</strong>的事件叫做古典概型</p><h2 id="概率计算"><a href="#概率计算" class="headerlink" title="概率计算"></a>概率计算</h2><p>$$P(A)=\frac{事件A包含的基本事件数m}{试验的基本事件总数n}$$</p><p>如:</p><p><img src="https://i.loli.net/2019/09/23/fT1y3SvIMU7Kcbx.png" alt="火狐截图_2019-09-23T07-26-18.934Z.png"></p><h1 id="几何概型"><a href="#几何概型" class="headerlink" title="几何概型"></a>几何概型</h1><p>把具有<strong>无限性</strong>,<strong>等可能性</strong>的事件叫做古典概型</p><h2 id="概率计算-1"><a href="#概率计算-1" class="headerlink" title="概率计算"></a>概率计算</h2><p>$$P(A)=\frac{A的长度,面积,体积\mu_A}{\omega的长度,面积,体积\mu_\omega}$$</p><p>如:</p><p><img src="https://i.loli.net/2019/09/23/WYDcs2g6MwPmGUL.png" alt="火狐截图_2019-09-23T07-32-46.130Z.png"></p><h1 id="随机变量"><a href="#随机变量" class="headerlink" title="随机变量"></a>随机变量</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>随机现象的结果对应的取值</p><p>对应扔色子来讲,随机变量X=1,2,3,4,5,6</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>离散型随机变量</p></li><li><p>连续型随机变量</p></li></ul><p>我们主要讨论离散型随机变量</p><h2 id="离散型随机变量"><a href="#离散型随机变量" class="headerlink" title="离散型随机变量"></a>离散型随机变量</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p><strong>有限</strong>且<strong>可以枚举</strong>的随机变量</p><h3 id="随机变量的分布列"><a href="#随机变量的分布列" class="headerlink" title="随机变量的分布列"></a>随机变量的分布列</h3><p>把随机变量x的取值写在上面一行,其概率写在下面一行,这就叫做随机变量x的分布列</p><p>本质上就是一个表格:</p><table><thead><tr><th>$x_1$</th><th>$x_2$</th><th>$\dots$</th><th>$x_n$</th></tr></thead><tbody><tr><td>$P_{x_1}$</td><td>$P_{x_2}$</td><td>$\dots$</td><td>$P_{x_n}$</td></tr></tbody></table><ul><li>性质:$\sum P_{x_i}=1$,也就是说分布列下面一行的所有值之和=1</li></ul><p>如:</p><p><img src="https://i.loli.net/2019/09/23/OPwzcB3fWTgAQNj.png" alt="火狐截图_2019-09-23T07-53-28.289Z.png"></p><h1 id="超几何分布"><a href="#超几何分布" class="headerlink" title="超几何分布"></a>超几何分布</h1><p>本质是不放回的取样,有公式可使用</p><p>具体细节留坑待补</p><h1 id="相互独立事件"><a href="#相互独立事件" class="headerlink" title="相互独立事件"></a>相互独立事件</h1><ul><li><p>定义:结果互不影响的事件</p></li><li><p>概率计算:若A和B为相互独立事件,则$P_{(两者都发生)}=P(A)\times P(B)$</p></li></ul><h1 id="独立重复试验"><a href="#独立重复试验" class="headerlink" title="独立重复试验"></a>独立重复试验</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><p>进行了多次试验,每次试验的条件都相同,各个试验当还相互独立,相关概率保持不变</p><p>其本质是有放回的取样</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数学 </category>
          
          <category> 概率和期望 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率和期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵乘法加速递推式计算</title>
      <link href="/2019/09/21/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E5%8A%A0%E9%80%9F%E9%80%92%E6%8E%A8%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
      <url>/2019/09/21/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E5%8A%A0%E9%80%9F%E9%80%92%E6%8E%A8%E5%BC%8F%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><h2 id="矩阵乘法板子"><a href="#矩阵乘法板子" class="headerlink" title="矩阵乘法板子"></a>矩阵乘法板子</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">martix</span><span class="token punctuation">&#123;</span>ll m<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">clean</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> martix <span class="token function">mutiply</span><span class="token punctuation">(</span>martix input1<span class="token punctuation">,</span>martix input2<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>martix output<span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">loop</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">loop</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>output<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>input1<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>input2<span class="token punctuation">.</span>m<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>output<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> output<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速幂板子"><a href="#快速幂板子" class="headerlink" title="快速幂板子"></a>快速幂板子</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> martix <span class="token function">fastpower</span><span class="token punctuation">(</span>martix a<span class="token punctuation">,</span><span class="token keyword">int</span> times<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>martix stag<span class="token operator">=</span>a<span class="token punctuation">;</span>martix res<span class="token operator">=</span>start_<span class="token punctuation">;</span><span class="token comment">//start_是单位矩阵,可以通过构造构造出此矩阵为对角线为1,其他都为0的矩阵</span><span class="token keyword">while</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>times<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token function">mutiply</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>stag<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>times<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>stag<span class="token operator">=</span><span class="token function">mutiply</span><span class="token punctuation">(</span>stag<span class="token punctuation">,</span>stag<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="fibonacci-第n项"><a href="#fibonacci-第n项" class="headerlink" title="fibonacci 第n项"></a>fibonacci 第n项</h1><h2 id="转化过程"><a href="#转化过程" class="headerlink" title="转化过程"></a>转化过程</h2><ul><li>StepOne:写出递推式:$f[i]=f[i-1]+f[i-2]$</li><li>StepTwo:考虑<strong>矩阵</strong></li></ul><p>首先,$f[i]$是由$f[i-1],f[i-2]$得出来的,所以当前矩阵应该需要$f[i],f[i-1],f[i-2]$</p><p>然后根据所有的已知条件写出如下草稿:</p><p><img src="https://i.loli.net/2019/09/21/mdkcMLVgSaXwHvB.png" alt="捕获.PNG"></p><p>问号那一团就是我们要构造的<strong>转移矩阵</strong></p><p>根据等量关系:</p><p>$$<br>f[n]=f[n-1]+f[n-2]\<br>$$</p><p>左边那一竖列问号应该是1</p><p>根据等量关系:</p><p>$$<br>f[n-1]=f[n-1]+0\times f[n-2]\<br>f[n-2]=f[n-2]+0\times f[n-1]<br>$$</p><p>右面一竖列问号号应该是1和0</p><p>最后构造出来的矩阵是:</p><p><img src="https://i.loli.net/2019/09/21/MRjTgyGU7Onrwmq.png" alt="捕获2.PNG"></p><p>设构造出的转移矩阵为s,初始答案矩阵为a,,斐波那契数列的第n项为x,则</p><p>$$<br>a=\begin{pmatrix}<br>f[3] &amp; f[2]\<br>f[2] &amp;f[1]\<br>\end{pmatrix}<br>\s=<br>\begin{pmatrix}<br>1&amp;1\1&amp;0<br>\end{pmatrix}<br>\令矩阵k=a\times s^{n-3}<br>\x=k_{1\ 1}<br>$$</p><ul><li>StepThree:可以搞了:</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">loop</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clean</span><span class="token expression"><span class="token punctuation">(</span>arry<span class="token punctuation">,</span>num<span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span>arry<span class="token punctuation">,</span>num<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arry<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">anti_loop</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">>=</span>end<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>T neg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">></span><span class="token string">'9'</span><span class="token operator">||</span>r<span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>neg<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>r<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>x<span class="token operator">*=</span>neg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ll n<span class="token punctuation">,</span>mod<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">2e9</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">martix</span><span class="token punctuation">&#123;</span>ll m<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">clean</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>start_<span class="token punctuation">;</span><span class="token keyword">inline</span> martix <span class="token function">mutiply</span><span class="token punctuation">(</span>martix input1<span class="token punctuation">,</span>martix input2<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>martix output<span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">loop</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">loop</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>output<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+=</span>input1<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>input2<span class="token punctuation">.</span>m<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>output<span class="token punctuation">.</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">%=</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> output<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> martix <span class="token function">fastpower</span><span class="token punctuation">(</span>martix a<span class="token punctuation">,</span><span class="token keyword">int</span> times<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>martix stag<span class="token operator">=</span>a<span class="token punctuation">;</span>martix res<span class="token operator">=</span>start_<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>times<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token function">mutiply</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>stag<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>times<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>stag<span class="token operator">=</span><span class="token function">mutiply</span><span class="token punctuation">(</span>stag<span class="token punctuation">,</span>stag<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">ONLINE_JUDGE</span></span><span class="token comment">//freopen("datain.txt","r",stdin);</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>start_<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>start_<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>start_<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>martix ans<span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>martix zhuanzhi<span class="token punctuation">;</span>zhuanzhi<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>zhuanzhi<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>zhuanzhi<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>zhuanzhi<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>zhuanzhi<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ans<span class="token operator">=</span><span class="token function">mutiply</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">fastpower</span><span class="token punctuation">(</span>zhuanzhi<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="一般线性递推的答案矩阵和转移矩阵构造"><a href="#一般线性递推的答案矩阵和转移矩阵构造" class="headerlink" title="一般线性递推的答案矩阵和转移矩阵构造"></a>一般线性递推的答案矩阵和转移矩阵构造</h1><ul><li>观察递推式,看递推式中待求项和已知项之间的关系,如果待求项x要n个已知项yi来求的话,直接构造一个<strong>一行</strong>n列的答案矩阵,这样做的原因如下:</li></ul><blockquote><p>首先定义一个概念:层,对于一个线性递推等式,等式左边的项的层等于右边的项的层+1,如:$f[n]=f[n-1]+f[n-2]$,f[n]的层=f[n-1]的层+1/f[n-2]的层+1,那么显然有一个性质:<br>线性关系中,层数高的可以由层数低的”变换”而来,这个变换是指在低层项前乘上一个系数从而得到高层项</p></blockquote><ul><li>根据矩阵乘法的概念推出转移矩阵(见上文)</li></ul><h1 id="一些练习-写出答案矩阵和转移矩阵-答案不唯一"><a href="#一些练习-写出答案矩阵和转移矩阵-答案不唯一" class="headerlink" title="一些练习:(写出答案矩阵和转移矩阵,答案不唯一)"></a>一些练习:(写出答案矩阵和转移矩阵,答案不唯一)</h1><ul><li>$f[n]=f[n-1]+f[n-2]+n+1$</li></ul><p>$$<br>\begin{pmatrix}<br>f[n-1] &amp; f[n-2] &amp; n &amp; 1\<br>\end{pmatrix}<br>\times<br>\begin{pmatrix}<br>1 &amp; 1 &amp; 0 &amp; 0\1 &amp; 0 &amp; 0 &amp; 0\1 &amp; 0 &amp; 1 &amp; 0\1 &amp; 0 &amp; 1 &amp; 1<br>\end{pmatrix}<br>=\begin{pmatrix}<br>f[n] &amp; f[n] &amp; n+1 &amp; 1\<br>\end{pmatrix}<br>$$</p><ul><li>$f[n]=A\times f[n-1]+B\times f[n-2]$</li></ul><p>$$<br>\begin{pmatrix}<br>f[n-1] &amp; f[n-2]\<br>\end{pmatrix}<br>\times<br>\begin{pmatrix}<br>A &amp; 1\<br>B &amp; 0\<br>\end{pmatrix}<br>=\begin{pmatrix}<br>f[n] &amp; f[n-1]\<br>\end{pmatrix}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵乘法-一个比较容易记忆的操作方式</title>
      <link href="/2019/09/21/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95-%E4%B8%80%E4%B8%AA%E6%AF%94%E8%BE%83%E5%AE%B9%E6%98%93%E8%AE%B0%E5%BF%86%E7%9A%84%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/09/21/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95-%E4%B8%80%E4%B8%AA%E6%AF%94%E8%BE%83%E5%AE%B9%E6%98%93%E8%AE%B0%E5%BF%86%E7%9A%84%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>这里介绍一个另类的矩阵乘法的记忆方式</p><span id="more"></span><p>找到一个很好理解矩阵乘法的运算法则的<a href="https://www.bilibili.com/video/av56433157/?spm_id_from=333.788.videocard.1">视频</a>:</p><p>原来是这样一个乘法:</p><p><img src="https://i.loli.net/2019/09/21/mDvoXTpPqf7cLC6.png" alt="juc.png"></p><p>做两个辅助线,然后:</p><p><img src="https://i.loli.net/2019/09/21/i7pn63sYWeTSdjy.png" alt="juc2.png"></p><p>也就是说,右下角那个答案矩阵里面的每一个小格子的值就等于它上面那一列和左边那一行数依次相乘后相加的和</p><p>这样就非常好理解矩阵乘法了</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法竞赛之调试经验(坑点)贴</title>
      <link href="/2019/09/14/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B9%8B%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%B0%83%E8%AF%95%E7%BB%8F%E9%AA%8C-%E5%9D%91%E7%82%B9-%E8%B4%B4/"/>
      <url>/2019/09/14/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E4%B9%8B%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%B0%83%E8%AF%95%E7%BB%8F%E9%AA%8C-%E5%9D%91%E7%82%B9-%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>我不想调试!!!!</strong></p><p>就是这样,本文诞生了</p><hr><p>update 2019.9.24:本文原来叫”数据结构调试经验贴”,但当我在调 NOIP2016换教室 这一DP自闭之后,我决定把本文的经验收集范围拓展到全体算法上</p><h1 id="通用问题"><a href="#通用问题" class="headerlink" title="通用问题"></a>通用问题</h1><h2 id="空间和事件复杂度"><a href="#空间和事件复杂度" class="headerlink" title="空间和事件复杂度"></a>空间和事件复杂度</h2><p>记得用<code>(double)sizeof(f)/(1024*1024)</code>来计算空间消耗,还有一定记得计算时间复杂度,考试的时候不要忘了!不然MLE和TLE等着您嘞</p><h2 id="本地测试爆栈"><a href="#本地测试爆栈" class="headerlink" title="本地测试爆栈"></a>本地测试爆栈</h2><p>windows的栈空间很小,不像Linux</p><p>所有有时候会出现明明下标没有越界,但是报错的情况</p><p>将<code>-Wl,--stack=SIZE</code>这条语句加入dev编译选项中的调试命令中就可以强制开大占空间</p><p>比如要开到64MB,那么就写<code>-Wl,--stack=67108864</code>,因为64∗1024∗1024=67108864</p><h2 id="debug调试信息"><a href="#debug调试信息" class="headerlink" title="debug调试信息"></a>debug调试信息</h2><p>建议在debug调试部分写一个注释,这样的话就可以快速寻找debug信息从而避免错误输出调试信息了</p><h2 id="数组大小"><a href="#数组大小" class="headerlink" title="数组大小"></a>数组大小</h2><p>谨慎的计算数组大小,以免发生RE的情况</p><p>特别是在图论中边表大小的计算(特指分层图),一旦算小了就很惨的</p><p>DP中也是一样,会出现一些玄学情况</p><h2 id="取模问题"><a href="#取模问题" class="headerlink" title="取模问题"></a>取模问题</h2><ul><li><p>x%p的取值范围是[0,p-1],而非[0,p]</p></li><li><p>如果一个小于0的值x,我们想要把它取模为正数,那么应该$x=(M+x \ mod \ M) \ mod \ M$,即首先就要对x取模再加M</p></li></ul><h2 id="关于多组数据及反复使用同一算法"><a href="#关于多组数据及反复使用同一算法" class="headerlink" title="关于多组数据及反复使用同一算法"></a>关于多组数据及反复使用同一算法</h2><p>一定记得初始化</p><h1 id="逻辑问题"><a href="#逻辑问题" class="headerlink" title="逻辑问题"></a>逻辑问题</h1><h2 id="关于并列结构和选择结构"><a href="#关于并列结构和选择结构" class="headerlink" title="关于并列结构和选择结构"></a>关于并列结构和选择结构</h2><p>2019.10.8日在打树链剖分换根模板的时候:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">updateson</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span>ll w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//here</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> LCA<span class="token operator">=</span><span class="token function">lca</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>LCA<span class="token operator">!=</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">update</span><span class="token punctuation">(</span>seg<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>siz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//here,too</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">update</span><span class="token punctuation">(</span>seg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>siz<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两处标注出来的<code>return</code>没有写,本来当一个if里面的东西执行完后就应该返回,但由于没有打,导致了最后重复累加</p><p>这个问题原来在线段树里面也有犯过,但是没有引起注意</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="分治鲁棒性"><a href="#分治鲁棒性" class="headerlink" title="分治鲁棒性"></a>分治鲁棒性</h3><p>在分治的时候,有可能输入的左边界和右边界不严格满足$l&lt;=r$,因此应该加上</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来加强鲁棒性</p><p>但这还没完,因为当函数值是int或long long时,return后面应该需要跟上一个值,而这个值不能够直接写成0,而要<strong>按照题目需求来决定返回极大值还是极小值</strong></p><h3 id="update函数"><a href="#update函数" class="headerlink" title="update函数"></a>update函数</h3><ul><li><p>没有在update函数里面pushdown和pushup</p></li><li><p>update的时候lazy标记是累加的而非赋值:</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> nl<span class="token punctuation">,</span><span class="token keyword">int</span> nr<span class="token punctuation">,</span><span class="token keyword">int</span> rt<span class="token punctuation">,</span>ll w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>nl<span class="token operator">&amp;&amp;</span>nr<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>lazy<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">+=</span>w<span class="token punctuation">;</span><span class="token comment">//不能写成lazy[rt]=w;</span>sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>nr<span class="token operator">-</span>nl<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>w<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">pushdown</span><span class="token punctuation">(</span>nl<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>nl<span class="token operator">+</span>nr<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>l<span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>nl<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token function">update</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>nr<span class="token punctuation">,</span>rt<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pushup</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组大小-1"><a href="#数组大小-1" class="headerlink" title="数组大小"></a>数组大小</h3><ul><li>数组没有开够,记得要开4倍大小</li></ul><h3 id="精度问题"><a href="#精度问题" class="headerlink" title="精度问题"></a>精度问题</h3><ul><li><p>一般来讲数据都会特别鬼畜啊,记得开longlong</p></li><li><p>特别注意有没有<strong>精度转化</strong>,即int相乘后面转longlong时可能在中间爆掉:</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">sum<span class="token punctuation">[</span>rt<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>num<span class="token operator">*</span><span class="token punctuation">(</span>nr<span class="token operator">-</span>nl<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一定要转化精度</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关于二分值mid"><a href="#关于二分值mid" class="headerlink" title="关于二分值mid"></a>关于二分值mid</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>nl<span class="token operator">+</span>nr<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//不是(l+r)>>1,这点很容易错!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关于返回值"><a href="#关于返回值" class="headerlink" title="关于返回值"></a>关于返回值</h3><p>这是一个很sb的错误,query函数没有写</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">return</span> res<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个问题<strong>编译选项开-WALL</strong>就可以避免</p><h2 id="splay-手写版"><a href="#splay-手写版" class="headerlink" title="splay(手写版)"></a>splay(手写版)</h2><h3 id="1-关于插入极大和极小值这个技巧"><a href="#1-关于插入极大和极小值这个技巧" class="headerlink" title="1.关于插入极大和极小值这个技巧"></a>1.关于插入极大和极小值这个技巧</h3><p>一定要插入足够大和小的值，否则会出一些玄学错误，一定要能多大就多大<br><a href="https://blog.csdn.net/weixin_43907802/article/details/96175831">比如这个情况</a></p><h3 id="2-关于rotate函数的不同写法"><a href="#2-关于rotate函数的不同写法" class="headerlink" title="2.关于rotate函数的不同写法"></a>2.关于rotate函数的不同写法</h3><p>rotate函数理论上来说有不同的写法，但是原则就是一定要把那四个点的父子关系和相关信息维护正确<br>比如：在维护x的父子关系时，要确定y是x的哪个儿子，理论上可以通过：<br>1.原来x相对于y的位置关系<br>2.x的被影响的那个子节点相对于x的位置关系<br>两种方式来判断<br>这时问题来了，如果x没有子节点呢，这时x的子节点就是0（空都是0），那么这样就没有办法正确的更新父子关系，所以以后还是用前一种方法吧</p><h3 id="3-关于insert函数"><a href="#3-关于insert函数" class="headerlink" title="3.关于insert函数"></a>3.关于insert函数</h3><h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>_p<span class="token punctuation">)</span>tree<span class="token punctuation">[</span>_p<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>_w<span class="token operator">></span>tree<span class="token punctuation">[</span>_p<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">]</span><span class="token operator">=</span>_cur<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这一句特别容易被打掉！！！！！</strong><br>如果不打的话，新插入的这个点的父节点就没法和这个点相连了</p><h4 id="B"><a href="#B" class="headerlink" title="B"></a>B</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> _cur<span class="token operator">=</span>root<span class="token punctuation">,</span>_p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>_cur<span class="token operator">&amp;&amp;</span>tree<span class="token punctuation">[</span>_cur<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">!=</span>_w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_p<span class="token operator">=</span>_cur<span class="token punctuation">;</span>_cur<span class="token operator">=</span>tree<span class="token punctuation">[</span>_cur<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>_w<span class="token operator">></span>tree<span class="token punctuation">[</span>_cur<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在寻找值为w的点时，while循环里面的判断条件是<strong>当前所在的点不为空！</strong></p><p>这和find函数中的<strong>即将到达的点不为空</strong>需要区别</p><h3 id="4-关于找第k大函数"><a href="#4-关于找第k大函数" class="headerlink" title="4.关于找第k大函数"></a>4.关于找第k大函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span><span class="token function">Lson</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">>=</span>k<span class="token punctuation">)</span>            cur<span class="token operator">=</span><span class="token function">Lson</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">+</span>tree<span class="token punctuation">[</span><span class="token function">Lson</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">>=</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">Splay</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">+</span>tree<span class="token punctuation">[</span><span class="token function">Lson</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        k<span class="token operator">-=</span>tree<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">+</span>tree<span class="token punctuation">[</span><span class="token function">Lson</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>siz<span class="token punctuation">;</span><span class="token comment">//</span>        cur<span class="token operator">=</span><span class="token function">Rson</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意第3个else if里面的两句话的顺序不可以换！<br>虽然很显然，但是在没有高度专注的情况下总是会出现这些神奇的情况</p><h3 id="5-关于删点函数"><a href="#5-关于删点函数" class="headerlink" title="5.关于删点函数"></a>5.关于删点函数</h3><p>记清楚步骤：<strong>先旋前驱到root，再旋后继到其前驱的下面</strong><br>不能把后继旋到根上去了</p><h3 id="6-关于找排名函数"><a href="#6-关于找排名函数" class="headerlink" title="6.关于找排名函数"></a>6.关于找排名函数</h3><p>在大部分定义里面，数m的排名为小于m的数的个数+1，不能忘记+1！</p><h3 id="7-关于函数的返回值"><a href="#7-关于函数的返回值" class="headerlink" title="7.关于函数的返回值"></a>7.关于函数的返回值</h3><p>有些函数返回值可以是某个点的值，也可以是某个点的编号<br>但是如果返回值，就不可以得到编号，若返回编号，却可以得到值<br>如果不做强行规定，在构建代码的时候会出现RE的风险<br>因此，规定如下：</p><ul><li> _pos:返回_x的位置关系:0/1</li><li>update:void</li><li>rotate:void</li><li>splay:void</li><li>insert:void</li><li>find:void/int(int=&gt;返回编号，不可返回值！)</li><li>findkth:int(返回编号)</li><li>pre:int(返回编号)</li><li>bac:int(返回编号)</li><li>del:void</li><li>getrank:int=&gt;返回某个数的排名</li></ul><h3 id="8-关于宏的使用"><a href="#8-关于宏的使用" class="headerlink" title="8.关于宏的使用"></a>8.关于宏的使用</h3><p>由于结构体的特点，用结构体方式构建的Splay必然会显得比较冗杂，语句偏长容易积累bug且不容易调试，因此推荐以下宏定义：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">f</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>fa</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Lson</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Rson</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ADX_son</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>w<span class="token punctuation">)</span> tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token operator">&lt;</span>w<span class="token punctuation">]</span></span></span><span class="token comment">//按大小的儿子~~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="splay-vector版"><a href="#splay-vector版" class="headerlink" title="splay(vector版)"></a>splay(vector版)</h2><h3 id="关于lowerbound函数和upperbound函数"><a href="#关于lowerbound函数和upperbound函数" class="headerlink" title="关于lowerbound函数和upperbound函数"></a>关于lowerbound函数和upperbound函数</h3><p>其一记住这两个函数的含义:返回第一个大于等于x的位置;返回第一个大于x的位置.显然,这两个函数的区别就是在<strong>等于</strong>二字上面</p><p>其二记住两个函数返回的是内存中的地址,而非其他的什么东西.因此要得到在数组中的位置的时候应该要减去数组的开始地址</p><h3 id="关于排名"><a href="#关于排名" class="headerlink" title="关于排名"></a>关于排名</h3><p>看定义!记得排名加一</p><h3 id="关于vector的存储顺序"><a href="#关于vector的存储顺序" class="headerlink" title="关于vector的存储顺序"></a>关于vector的存储顺序</h3><p>vector以0开始存,因此vector调用下标的时候如果直接输入排名一定记得减一</p><h2 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h2><h3 id="剖分后的区间"><a href="#剖分后的区间" class="headerlink" title="剖分后的区间"></a>剖分后的区间</h3><p>剖分后的区间为[1,seg[0]],最好不要写成[1,n]</p><p>也就是</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">buildtree</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//not buildtree(1,n,1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="dfs1"><a href="#dfs1" class="headerlink" title="dfs1"></a>dfs1</h3><ul><li>dfs1中,遍历到每一个点的时候记得要把这个点的4个值赋初值,<strong>不要图便宜把这一步省去,不然死的很惨</strong></li></ul><h3 id="点权转边权"><a href="#点权转边权" class="headerlink" title="点权转边权"></a>点权转边权</h3><p>统计路径和的时候,由于不会统计两个点lca的权值,所有<strong>在且仅在最后一次线段树查找</strong>的时候才会把下标位移</p><h3 id="关于重链加速"><a href="#关于重链加速" class="headerlink" title="关于重链加速"></a>关于重链加速</h3><ul><li><p>记得每次统计完数据后要把u节点向上跳到top的fa</p></li><li><p>记得当两个点还没有相遇的时候要让他们一直向上跳:</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">!=</span>top<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//这里是是写while而不是写if!</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token operator">+=</span><span class="token function">query</span><span class="token punctuation">(</span>seg<span class="token punctuation">[</span>top<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u<span class="token operator">=</span>fa<span class="token punctuation">[</span>top<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于建树时点权"><a href="#关于建树时点权" class="headerlink" title="关于建树时点权"></a>关于建树时点权</h3><p>有时候会在建树的时候误把点权<code>w[rev[l]]</code>写成<code>w[l]</code>,也就是忘记了映射回去</p><h3 id="两个dfs"><a href="#两个dfs" class="headerlink" title="两个dfs"></a>两个dfs</h3><p>在两个dfs之间一定要记得把根的信息做好</p><h1 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h1><h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h2><p>初始化不当会导致多种玄学错误</p><p>常见的问题:</p><ul><li>没有初始化:</li></ul><p>惨案一:NOIP2016换教室 ,没有吧所有的数组初始化为极大值,从而让非法状态的权值变成了0,然后导致非法状态更新了其他合法状态导致答案偏小</p><p>惨案二:acwing 298. 围栏 ,单调队列优化DP,每次循环i的时候单调队列没有清空导致WA3组</p><h2 id="2-背包问题"><a href="#2-背包问题" class="headerlink" title="2.背包问题"></a>2.背包问题</h2><h3 id="背包问题的初始化"><a href="#背包问题的初始化" class="headerlink" title="背包问题的初始化"></a>背包问题的初始化</h3><p>如果是要求<strong>刚好填满</strong>,数组初始值应该赋一个极小值,只把合法的状态初始值赋为0,这样的话才能够保证更新的是<strong>刚好装满</strong></p><p>如果要求不需要填满,那就可以只赋0就行</p><h1 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h1><ul><li><p>关于状态压缩DP，要注意二进制位的方向，数组从低位到高位到底是从二进制的低位到高位还是高位到低位</p></li><li><p>状态压缩dp中要特别注意0基准和1基准的差异性</p></li></ul><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="关于常用变量"><a href="#关于常用变量" class="headerlink" title="关于常用变量"></a>关于常用变量</h2><ul><li>ui,vi很容易打混淆,特别是在Floyd算法中</li></ul><h2 id="关于建图"><a href="#关于建图" class="headerlink" title="关于建图"></a>关于建图</h2><ul><li><p>有时候输入的时候会有重边,重边会需要特殊处理(如在Floyd里面就需要取min值等)</p></li><li><p>建图的时候注意是建双向边还是单向边</p></li><li><p>关于加边函数addl:</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addl</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token operator">=</span>v<span class="token punctuation">;</span>edge<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//记得cnt要自加!</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01分数规划的原理分析</title>
      <link href="/2019/09/06/01%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92%E7%9A%84%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2019/09/06/01%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92%E7%9A%84%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>$$<br>求一组解x_1,x_2,x_3,x_4…x_n,x=0\ or \ 1\<br>使得\frac{\sum_{i=1}^{n}a_i\times x_i}{\sum_{i=1}^{n}b_i\times x_i}最大化或最小化<br>$$</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>总体思路:通过假设存在某种形式(比当前值大或小)的解,然后寻找这些数之间的不等关系从而简化问题<br>考虑随机一个L,然后假设</p><p>$$<br>存在{x_1,x_2…x_n},使得\<br>\frac{\sum_{i=1}^{n}a_i\times x_i}{\sum_{i=1}^{n}b_i\times x_i}&gt;=L<br>$$</p><p>然后化简这个式子:</p><p>$$==&gt;$$</p><p>$$<br>\frac{a_1x_1+a_2x_2+a_3x_3+…+a_nx_n}{b_1x_1+b_2x_2+b_3x_3+…+b_nx_n}&gt;=L<br>$$</p><p>$$==&gt;$$</p><p>$$<br>a_1x_1+a_2x_2+a_3x_3+…+a_nx_n&gt;=L*(b_1x_1+b_2x_2+b_3x_3+…+b_nx_n)<br>$$</p><p>$$==&gt;$$</p><p>$$<br>a_1x_1-L\times b_1x_1+a_2x_2-L\times b_2x_2+…+a_nx_n-L\times b_nx_n&gt;=0<br>$$</p><p>$$==&gt;$$</p><p>$$<br>\sum_{i=1}^{n}a_i x_i-L\times b_ix_i&gt;=0<br>$$</p><p>也就是说,如果如果<strong>可以构造出</strong>一组解使得</p><p>$$<br>\sum_{i=1}^{n}(a_i-L\times b_i)x_i&gt;=0<br>$$</p><p>那么我们当前随机的这个L比原式的最大值要小,即</p><p>$$<br>存在{x_1,x_2…x_n},使得\<br>\frac{\sum_{i=1}^{n}a_i\times x_i}{\sum_{i=1}^{n}b_i\times x_i}&gt;=L<br>$$</p><p>同理,如果<strong>构造不出</strong>一组解x满足上式,也就是说对于任意的一组解x都有:</p><p>$$<br>\sum_{i=1}^{n}(a_i-L\times b_i)x_i&lt;0<br>$$</p><p>那么我们随机的这个数比最大值要大即</p><p>$$<br>任意{x_1,x_2…x_n},使得\<br>\frac{\sum_{i=1}^{n}a_i\times x_i}{\sum_{i=1}^{n}b_i\times x_i}&lt;L<br>$$</p><p>根据定理:<strong>判定问题普遍比最优问题简单</strong>,这种转化是有意义的</p><p>具体来讲就是上式中的$a_i-L\times b_i$是可以O(1)算出来的,那么这个问题就相当于是在一堆数中让你选出来一些数然后求这些数的和的最大值,显然直接贪心把所有正数拿出来就好了啊</p><h1 id="与二分的关系"><a href="#与二分的关系" class="headerlink" title="与二分的关系"></a>与二分的关系</h1><p>很显然,这个式子$\sum_{i=1}^{n}(a_i-L\times b_i)x_i$关于L单调,也就是说,L越大,这个式子的最优解越小,在0处为最优解</p><p>而单调性是利用二分解决问题的重要前提</p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p>上面的问题(求最大值)仅仅提供一个思维导向,因为很多题可以问你最小值,具体推理不再展开,但思路是一样的:</p><ul><li><p>考虑一个二分值</p></li><li><p>假设存在一组解使得目标式比二分值大/小</p></li><li><p>寻求数量关系(一般是正负)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数学 </category>
          
          <category> 0/1分数规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spfa的正确性证明</title>
      <link href="/2019/09/04/spfa%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7%E8%AF%81%E6%98%8E/"/>
      <url>/2019/09/04/spfa%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7%E8%AF%81%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h1><h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>只要最短路径存在，SPFA算法必定能求出最小值。</p><h2 id="证明-1"><a href="#证明-1" class="headerlink" title="证明"></a>证明</h2><p>每次将点放入队尾，都是经过松弛操作达到的。换言之，每次的优化将会有某个点v的<strong>最短路径估计值d[v]变小</strong>。所以算法的执行会使d越来越小。</p><p>由于我们<strong>假定图中不存在负权回路</strong>，所以每个结点都有最短路径值。<strong>因此，算法不会无限执行下去</strong>，随着d值的逐渐变小，直到到达最短路径值时，算法结束，这时的最短路径估计值就是对应结点的最短路径值。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oi </tag>
            
            <tag> 已经死掉的SPFA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数与图的完美结合-------浅析差分约束系统(华中师大一附中  冯威)</title>
      <link href="/2019/09/04/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/"/>
      <url>/2019/09/04/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数与图的完美结合——-浅析差分约束系统<br>华中师大一附中  冯威 </p></blockquote><h1 id="摘要"><a href="#摘要" class="headerlink" title="[摘要]"></a>[摘要]</h1><p>在面对多种多样的问题时，我们经常会碰到这样的情况：往往我们能够根据题目题面意思来建立一些简单的模型，但却面对这些模型无从下手。这时我们应该意识到，也许能够将这种模型与其他的模型之间搭起一座桥梁，使我们能够用更简单直接的方式解决它。这里我们介绍一种方法，它很好地将某些特殊的不等式组与图相联结，让复杂的问题简单化，将难处理的问题用我们所熟知的方法去解决，它便是差分约束系统。这里我们着重介绍差分约束系统的原理和其需要掌握的bellman-ford算法。然后通过zju1508和zju1420两道题目解析差分约束系统在信息学题目中的应用，并逐渐归纳解决这类问题的思考方向。</p><h1 id="关键字-差分约束系统、不等式、单元最短路径、转化"><a href="#关键字-差分约束系统、不等式、单元最短路径、转化" class="headerlink" title="[关键字] 差分约束系统、不等式、单元最短路径、转化"></a>[关键字] 差分约束系统、不等式、单元最短路径、转化</h1><h1 id="正文"><a href="#正文" class="headerlink" title="[正文]"></a>[正文]</h1><h2 id="Bellman-Ford-spfa"><a href="#Bellman-Ford-spfa" class="headerlink" title="Bellman Ford(spfa)"></a>Bellman Ford(spfa)</h2><p>   在分析差分约束系统之前，我们首先介绍一个解决单元最短路径问题的Bellman Ford算法，它的应用十分广泛，在差分约束系统中更充当着重要的角色。</p><p>Bellman-ford 算法</p><p>算法简单介绍<br>这个算法能在更一般的情况下解决最短路的问题。何谓一般，一般在该算法下边的权值可以为负，可以运用该算法求有向图的单元最长路径或者最短路径。我们这里仅以最短路径为例。<br>Bellman ford 类似于Dijkstra算法，对每一个节点v V，逐步减小从起点s到终点v最短路的估计量dist[v]直到其达到真正的最短路径值mindist[v]。Bellman-ford算法同时返回一个布尔值，如果不存在从源结点可达的负权回路，算法返回布尔值TRUE，反之返回FALSE。</p><p>算法具体流程</p><ol><li>枚举每条边(u,v) E（G）。</li><li>对枚举到的边进行一次更新操作。<br>3．回到步骤1，此过程重复n-1次，以确定没有更可以优化的情况。<br>4．枚举每条边（u，v）若仍然存在可以更新的边，则说明有向图中出现了负权回路，于是返回布尔值FALSE。<br>5．返回布尔值TRUE。</li></ol><p>注：这里的更新操作是一种松弛技术，以单元最短路径为例这个操作就是保证<br>dist[v]&lt;=dist[u]+w[u,v]，即if dist[v]&gt;dist[u]+w[u,v] then dist[v]=dist[u]+w[u,v]，如果是最长路径则是保证dist[v]&gt;=dist[u]+w[u,v]。</p><p>定义一个有向图G=（V，E），w（u，v）表示由结点u到v的边的权值。<br>伪代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">For i<span class="token operator">=</span><span class="token number">1</span> to <span class="token operator">|</span>V<span class="token operator">|</span>G<span class="token operator">||</span><span class="token operator">-</span><span class="token number">1</span>   Do <span class="token keyword">for</span> 每条边<span class="token punctuation">(</span>u，v<span class="token punctuation">)</span> E<span class="token operator">|</span>G<span class="token operator">|</span>        Do 更新操作（u，v，w（u，v））For 每条边（u，v） E<span class="token operator">|</span>G<span class="token operator">|</span>  Do <span class="token keyword">if</span> 仍然有可更新内容 then <span class="token keyword">return</span> FalseReturn True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现与Dijkstra不同，Bellman ford更多的是对边进行操作，在稀疏图，即点多边少的图中，用Bellman Ford更能高效的解决单元最短路径问题。下面一道例题来进一步熟悉Bellman Ford并与Dijkstra作一下简单的时间上的比较。</p><h3 id="例题一：ZJU2008-Invitation-Cards"><a href="#例题一：ZJU2008-Invitation-Cards" class="headerlink" title="例题一：ZJU2008 Invitation Cards"></a>例题一：ZJU2008 Invitation Cards</h3><p>[题目大意]在有向加权图中G（V，E），邮局要从起点S向其他n个节点发送邮件，于是派出n个邮递员，分别到达其他n个地点发送，然后回到起点S，求出所有邮递员所经过的总路程的最小值。</p><p>[数据范围] 1 &lt;= P,Q &lt;= 1000000。P表示节点数目，Q表示边的个数。</p><p>[题目分析]这道题算法很简单，即求出从s到任意点的最短路径，求其和ANS1，再将所有有向边反向（这个过程将求从另外n个结点到s的最短路径转化为从s到其他n个点的最短路径），再求一次s到任意点的最短路径，求其和ANS2，Ans=Ans1+Ans2即为所求。<br>但是，此题难在数据量上，无论是Dijkstra的O( ) 的算法，还是Bellmanford的O(VE)的算法都无法在数据规模最大的情况下在5s的时间内得出结果，于是需要做出一点优化。<br>关于Dijkstra的优化：用堆维护使寻找需要扩展的点的过程复杂度降低为1。复杂度大幅降低。<br>关于Bellman ford的优化：可以将Bellman ford需要扩展的点放进队列中，扩展顺序有了新的变化。用一个队列queue表示需要更新的点，每次取队列头指针fp所指的点u，搜索所有的边(u,v)属于E，如果dist[u]+w[u,v] 比dist[v]更优则更新dist[v]，尾指针rp后挪一位，将v点加入队列queue。这样的优化避免了很多重复的操作，事实证明它的效率仅次于Dijkstra+heap的效率。下面用3种不同的方法来解这道题目，看看结果如何。</p><p>我们用以下三种方法求最短路径:<br>1．    Dijkstra<br>2．    Bellman Ford<br>3．    Dijkstra&amp;Heap<br>在ZJU Online Judge中进行评测结果如下：<br>算法    运行所有数据所用时间<br>Dijkstra    〉5s  （TLE）<br>Bellman Ford       1.46s<br>Dijkstra&amp;Heap       1.24s</p><h2 id="差分约束系统"><a href="#差分约束系统" class="headerlink" title="差分约束系统"></a>差分约束系统</h2><p>对于解决差分约束系统问题的操作过程和使用原理，我们通过下面一道简单的题目进行了解。</p><h3 id="引例：-例题二-Zju1508-Interval"><a href="#引例：-例题二-Zju1508-Interval" class="headerlink" title="引例：[例题二] Zju1508 Interval"></a>引例：[例题二] Zju1508 Interval</h3><p>题目大意：<br>有一个序列，题目用n个整数组合 [ai,bi,ci]来描述它，[ai，bi，ci]表示在该序列中处于[ai，bi]这个区间的整数至少有ci个。如果存在这样的序列，请求出满足题目要求的最短的序列长度是多少。如果不存在则输出 -1。<br>输入：第一行包括一个整数n，表示区间个数，以下n行每行描述这些区间，第i+1行三个整数ai，bi，ci，由空格隔开，其中0&lt;=ai&lt;=bi&lt;=50000 而且 1&lt;=ci&lt;=bi-ai+1。<br>输出：一行，输出满足要求的序列的长度的最小值。</p><p>[浅析]初看此题感觉无从下手，我们将范围和个数进行量化，让问题看起来更加简单些。</p><p>将问题数字化：<br>若记，<br>那么本题约束条件即为   </p><p>建立不等式模型：<br>这样的描述使一个约束条件所牵涉的变量太多，不妨设   (i=1,2,…,n)<br>约束条件即可用以下不等式表示：</p><p>值得注意的是，这样定义的S若仅仅满足约束条件的要求是不能完整体现它的意义的，S中的各个组成之间并不是相对独立的，他们存在着联系。<br>由于 ，且t要么为1，要么为0，则 一定比 大 ，且至多大1。于是有：</p><p>那么如何找到满足要求的这样一组S，且使其个数最少呢？<br>这里我们看到最少就会联想到贪心，确实这道题目用贪心可行，且不失为一种很好的做法，但在这里我们不作多的介绍。我们将针对这个不等式组进行联想，迁移。注意到不等式中只涉及到了2个未知数，用减号相连接。这样的式子是否与过去曾经学过的Bellmanford中的松弛操作所达到的效果相类似呢？</p><p>联想：<br>我们需要寻找一个满足以下要求的S数组</p><p>而Bellman-Ford 每次的更新操作为</p><p>即在经过若干次更新操作将要保证 d[v]&lt;=d[u]+w[u,v]<br>这里我们也有一个已知量—–边的权值，即w[u,v]，于是整理一下得<br>d[u]-d[v]&gt;=w[u,v]<br>经过这样的变形，不难看出，两个式子有着极为惊人的相似！<br>于是做出如下的转化：<br>1．    我们将 ，看作n+1个点 。<br>2．    若 和 之间有着约束关系，例如Si-1-Si&gt;= -1,那么我们从结点  向结点 连上一条有向边，边的权值为-1。<br>这样如果我们从 出发，求出结点 到 的最短路径，则 为满足要求情况下的最小值。相反如果我们发现在Bellmanford算法执行的过程中存在有负权回路，则说明不存在满足要求的式子。</p><p>于是通过合理地建立数学模型，将不等式图形化，用Bellmanford作为武器，最终此题得到了圆满的解决！</p><p>思考：<br>本题只要求输出最少的个数，那么能否通过上述方法构造出相应的数列呢？答案是肯定的。其实在Bellmanford的过程中，我们已经得到了所有结点上S的值，那么由 求出所有T，当 为1则输出i，即可输出满足题目要求的序列。</p><p>总结：<br>对于ZJU1508的问题，最终可以化为一类线性不等式定义的线性函数。而这类问题其实是可以转化为单元最短路径问题，从而用刚才所准备到的Bellman Ford算法来解决它。</p><h3 id="线性程序设计："><a href="#线性程序设计：" class="headerlink" title="线性程序设计："></a>线性程序设计：</h3><p>我们为线性程序设计问题制定一个严格的数学描述：<br>给定一个m*n矩阵A，维向量b和维向量c，我们希望找出由n个元素组成的向量x，在由Ax&lt;=b所给出的m个约束条件下，使目标函数 达到最大值。<br>其实很多问题都可以通过这样一个线性程序设计框架来进行描述。在实际的问题中，也经常要对其进行分析和解决。上述例题使我们对这一类线性程序设计问题提供了一个多项式时间的算法。它将一类特殊的线性不等式与图论紧密联系在了一起。这类特殊的线性不等式，我们称它为差分约束系统，它是可以用单元最短路径来求解的。</p><p>差分约束系统：<br>差分约束系统是一个线性程序设计中特殊的一种，线性程序设计中矩阵A的每一行包含一个1和一个-1，A的所有其他元素均为0。由Ax&lt;=b给出的约束条件形成m个差分约束的集合，其中包含n个未知单元。每个约束条件均可够成简单的不等式如下：<br>（1&lt;=I,j&lt;=n,1&lt;=k&lt;=m）</p><p>简单举例：</p><p>找出未知量 ,并且满足以下差分约束条件：</p><p>需要注意的是，用Bellmanford求出的具体答案只是众多答案中的一种，答案并不唯一，但答案之间却也有着联系。这里我们并不对其进行专门的探讨。<br>了解了差分约束系统的整个过程，下面再看另外一道题目，让我们对差分约束系统的应用能够有更加深刻的认识。</p><h4 id="例题三-zju1420-Cashier-Employment-出纳员问题"><a href="#例题三-zju1420-Cashier-Employment-出纳员问题" class="headerlink" title="[例题三] zju1420 Cashier Employment 出纳员问题"></a>[例题三] zju1420 Cashier Employment 出纳员问题</h4><p>题目中文翻译： </p><p>我们按刚才所讲到的方法对此题进行处理。<br>这题很容易想到如下的不等式模型： </p><p>设num[ i ]为i时刻能够开始工作的人数，x[ i ]为实际雇佣的人数，那么x[ I ]&lt;=num[ I ]。<br>设r[ i ]为i时刻至少需要工作的人数，于是有如下关系：<br>    x[ I-7 ]+x[ I-6 ]+x[ I-5 ]+x[ I-4 ]+x[ I-3 ]+x[ I-2 ]+x[ I-1 ]+x[ I ]&gt;=r[ I ]<br>设s[ I ]=x[ 1 ]+x[ 2 ]…+x[ I ]，得到<br>    0&lt;=s[ I ]-s[ I-1 ]&lt;=num[ I ]， 0&lt;=I&lt;=23<br>    s[ I ]-s[ I-8 ]&gt;=r[ I ]， 8&lt;=I&lt;=23<br>    s[ 23 ]+s[ I ]-s[ I+16 ]&gt;=r[ I ]， 0&lt;=I&lt;=7 </p><pre><code>对于以上的几组不等式，我们采用一种非常笨拙的办法处理这一系列的不等式(其实也是让零乱的式子变得更加整齐，易于处理)。首先我们要明白差分约束系统的应用对象（它通常针对多个二项相减的不等式的）于是我们将上面的所有式子都转化成两项未知项在左边，另外的常数项在右边，且中间用&gt;=连接的式子，即: s[ I ]-s[ I-1 ]&gt;=0            (0&lt;=I&lt;=23) s[ I-1 ]-s[ I ]&gt;=-num[ I ]       (0&lt;=I&lt;=23) s[ I ]-s[ I-8 ]&gt;=r[ I ]         (8&lt;=I&lt;=23) s[ I ]-s[ I+16 ]&gt;=r[ I ]-s[ 23 ]  (0&lt;=I&lt;= 7) 这里出现了小的困难，我们发现以上式子并不是标准的差分约束系统，因为在最后一个式子中出现了三个未知单位。但是注意到其中跟随 I变化的只有两个，于是s[23]就变得特殊起来，看来是需要我们单独处理，于是我们把 s[ 23 ]当作已知量放在右边。</code></pre><p>经过这样的整理，整个图就很容易创建了，将所有形如 A-B&gt;=C 的式子 我们从节点B 引出一条有向边指向 A  边的权值为C  （这里注意由于左右确定，式子又是统一的&gt;=的不等式，所以A和B是相对确定的，边是一定是指向A的） ，图就建成了 。<br>    最后枚举所有s[ 23 ]的可能值，对于每一个s[23]，我们都进行一次常规差分约束系统问题的求解，判断这种情况是否可行，如果可行求出需要的最优值，记录到Ans中，最后的Ans的值即为所求。<br>程序见附录。</p><h1 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h1><p>对于许多复杂的问题，我们通常选择将不够清晰、难以处理的模型转化为容易理解、易于处理的模型。就像用已知的知识作为工具去探索未知领域一样，联想、发散、转化将成为相当有用的武器。本文选择了差分约束系统这样一个平台，通过介绍差分约束系统的相关知识和其在信息学问题中的应用以小见大，为读者提供一个解题的思路和技巧。</p><h1 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h1><p>参考文献：《金牌之路竞赛解题指导—高中计算机》 [王建德，周咏基]<br>         《Introduction to Algorithms》 [H.Cormen]</p><p>例题信息<br>    <a href="http://acm.zju.edu.cn/">http://acm.zju.edu.cn/</a><br>    <a href="http://acm.zju.edu.cn/show_problem.php?pid=2008">http://acm.zju.edu.cn/show_problem.php?pid=2008</a><br><a href="http://acm.zju.edu.cn/show_problem.php?pid=1508">http://acm.zju.edu.cn/show_problem.php?pid=1508</a><br><a href="http://acm.zju.edu.cn/show_problem.php?pid=1420">http://acm.zju.edu.cn/show_problem.php?pid=1420</a></p><p>例一：ZJU2008<br>Invitation Cards</p><hr><p>Time limit: 5 Seconds   Memory limit: 32768K<br>Total Submit: 70   Accepted Submit: 20   </p><hr><p>In the age of television, not many people attend theater performances. Antique Comedians of Malidinesia are aware of this fact. They want to propagate theater and, most of all, Antique Comedies. They have printed invitation cards with all the necessary information and with the programme. A lot of students were hired to distribute these invitations among the people. Each student volunteer has assigned exactly one bus stop and he or she stays there the whole day and gives invitation to people travelling by bus. A special course was taken where students learned how to influence people and what is the difference between influencing and robbery.<br>The transport system is very special: all lines are unidirectional and connect exactly two stops. Buses leave the originating stop with passangers each half an hour. After reaching the destination stop they return empty to the originating stop, where they wait until the next full half an hour, e.g. X:00 or X:30, where ‘X’ denotes the hour. The fee for transport between two stops is given by special tables and is payable on the spot. The lines are planned in such a way, that each round trip (i.e. a journey starting and finishing at the same stop) passes through a Central Checkpoint Stop (CCS) where each passenger has to pass a thorough check including body scan.<br>All the ACM student members leave the CCS each morning. Each volunteer is to move to one predetermined stop to invite passengers. There are as many volunteers as stops. At the end of the day, all students travel back to CCS. You are to write a computer program that helps ACM to minimize the amount of money to pay every day for the transport of their employees. </p><p>Input</p><p>The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case begins with a line containing exactly two integers P and Q, 1 &lt;= P,Q &lt;= 1000000. P is the number of stops including CCS and Q the number of bus lines. Then there are Q lines, each describing one bus line. Each of the lines contains exactly three numbers - the originating stop, the destination stop and the price. The CCS is designated by number 1. Prices are positive integers the sum of which is smaller than 1000000000. You can also assume it is always possible to get from any stop to any other stop. </p><p>Output</p><p>For each case, print one line containing the minimum amount of money to be paid each day by ACM for the travel costs of its volunteers. </p><p>Sample Input</p><p>2<br>2 2<br>1 2 13<br>2 1 33<br>4 6<br>1 2 10<br>2 1 60<br>1 3 20<br>3 4 10<br>2 4 5<br>4 1 50</p><p>Sample Output</p><p>46<br>210</p><hr><p>Problem Source: Central Europe 1998 </p><hr><p>[参考程序]：</p><pre class="line-numbers language-none"><code class="language-none">const  maxn&#x3D;1000000;  maxm&#x3D;1000000;type  Tedge    &#x3D;  record                x,y,long:longint;              end;  waytype  &#x3D;  array[1..maxn]of longint;  Tdijkstra &#x3D; object                h,p:array[1..maxn]of longint;                tot:longint;                procedure work(var f:waytype);              end;  TBellman &#x3D;  object                state:array[1..maxn*2]of longint;                procedure bellman_ford(var f:waytype);              end;var  index     :  array[0..maxn]of longint;  edge      :  array[1..maxm]of Tedge;  BellMan   :  Tbellman; &#x2F;&#x2F; dijkstra  :  Tdijkstra;  way1,way2 :  waytype;  n,m,i,ans,  long,x,y,  o,casen   :  longint;procedure qsort(fp,rp:longint);  var i,j:longint;      x,t:Tedge;  begin    i:&#x3D;fp;j:&#x3D;rp;x:&#x3D;edge[(i+j)div 2];    repeat      while (edge[j].x&gt;x.x) do dec(j);      while (edge[i].x&lt;x.x) do inc(i);      if i&lt;&#x3D;j then begin        t:&#x3D;edge[i];edge[i]:&#x3D;edge[j];edge[j]:&#x3D;t;        inc(i);dec(j);      end;    until i&gt;j;    if i&lt;rp then qsort(i,rp);    if fp&lt;j then qsort(fp,j);  end;procedure makeindex;  var i,j:longint;  begin    index[0]:&#x3D;0;j:&#x3D;1;    for i:&#x3D;1 to n do begin      while ((j&lt;&#x3D;m)and(edge[j].x&#x3D;i))do inc(j);      index[i]:&#x3D;j-1;    end;  end;procedure change;  var      i,t : longint;  begin    for i:&#x3D;1 to m do begin      t:&#x3D;edge[i].x;edge[i].x:&#x3D;edge[i].y;edge[i].y:&#x3D;t;    end;    qsort(1,m);    makeindex;  end;procedure Tbellman.bellman_ford(var f:waytype);  var fp,rp,temp : longint;  begin    fp:&#x3D;1;rp:&#x3D;1;    fillchar(f,sizeof(f),$FF);    qsort(1,m);    state[fp]:&#x3D;1;f[1]:&#x3D;0;    while fp&lt;&#x3D;rp do begin      for i:&#x3D;index[state[fp]-1]+1 to index[state[fp]] do begin        temp:&#x3D;f[state[fp]]+edge[i].long;        if (temp&lt;f[edge[i].y]) or (f[edge[i].y]&lt;0) then begin          inc(rp);          state[rp]:&#x3D;edge[i].y;          f[edge[i].y]:&#x3D;temp;        end;      end;      inc(fp);    end;  end;procedure Tdijkstra.work(var f:waytype);  var u,v,i,temp:longint;  procedure swap(var x:longint;y:longint);  var t:longint;  begin    p[h[x]]:&#x3D;y;p[h[y]]:&#x3D;x;    t:&#x3D;h[x];h[x]:&#x3D;h[y];h[y]:&#x3D;t;    x:&#x3D;y;  end;  procedure up(x:longint);  begin    while x&gt;1 do      if f[h[x]]&lt;f[h[x shr 1]] then swap(x,x shr 1) else exit;  end;  procedure down(x:longint);  var l,r:longint;  begin    while true do begin      l:&#x3D;x*2;r:&#x3D;l+1;      if l&gt;tot then exit;      if (l&#x3D;tot)then if (f[h[l]]&lt;f[h[x]]) then swap(x,l) else exit;      if (f[h[x]]&gt;f[h[l]])and(f[h[l]]&lt;f[h[r]]) then swap(x,l) else      if (f[h[x]]&gt;f[h[r]])then swap(x,r) else exit;    end;  end;  begin    fillchar(f,sizeof(f),$FF);    fillchar(p,sizeof(p),0);    f[1]:&#x3D;0;tot:&#x3D;1;h[1]:&#x3D;1;    while true do begin      if tot&#x3D;0 then break;      v:&#x3D;h[1];p[h[1]]:&#x3D;0;h[1]:&#x3D;h[tot];p[h[tot]]:&#x3D;1;      h[tot]:&#x3D;0;dec(tot);      if tot&gt;1 then down(1);      for i:&#x3D;index[v-1]+1 to index[v] do begin        temp:&#x3D;f[v]+edge[i].long;u:&#x3D;edge[i].y;        if (f[u]&gt;temp)or(f[u]&lt;0) then begin          f[u]:&#x3D;temp;          if p[u]&#x3D;0 then begin            inc(tot);            h[tot]:&#x3D;u;            p[u]:&#x3D;tot;            up(tot);          end else up(p[u]);        end;      end;    end;  end;begin  readln(casen);  for o:&#x3D;1 to casen do begin    readln(n,m);    fillchar(edge,sizeof(edge),0);    for i:&#x3D;1 to m do      with edge[i] do        readln(x,y,long);    qsort(1,m);makeindex;ans:&#x3D;0;    bellman.bellman_ford(way1);&#x2F;&#x2F;    dijkstra.work(way1);    for i:&#x3D;1 to n do inc(ans,way1[i]);    change;    bellman.bellman_ford(way2);&#x2F;&#x2F;    dijkstra.work(way2);    for i:&#x3D;1 to n do inc(ans,way2[i]);    writeln(ans);  end;end.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例二：ZJU1508<br>Intervals</p><hr><p>Time limit: 10 Seconds   Memory limit: 32768K<br>Total Submit: 150   Accepted Submit: 49   </p><hr><p>You are given n closed, integer intervals [ai, bi] and n integers c1, …, cn.</p><p>Write a program that:</p><blockquote><p>reads the number of intervals, their endpoints and integers c1, …, cn from the standard input,</p></blockquote><blockquote><p>computes the minimal size of a set Z of integers which has at least ci common elements with interval [ai, bi], for each i = 1, 2, …, n,</p></blockquote><blockquote><p>writes the answer to the standard output.</p></blockquote><p>Input</p><p>The first line of the input contains an integer n (1 &lt;= n &lt;= 50 000) - the number of intervals. The following n lines describe the intervals. The i+1-th line of the input contains three integers ai, bi and ci separated by single spaces and such that 0 &lt;= ai &lt;= bi &lt;= 50 000 and 1 &lt;= ci &lt;= bi - ai + 1.<br>Process to the end of file.</p><p>Output</p><p>The output contains exactly one integer equal to the minimal size of set Z sharing at least ci elements with interval [ai, bi], for each i = 1, 2, …, n.</p><p>Sample Input</p><p>5<br>3 7 3<br>8 10 3<br>6 8 1<br>1 3 1<br>10 11 1</p><p>Sample Output</p><p>6</p><hr><p>Problem Source: Southwestern Europe 2002 </p><hr><p>[参考程序]：</p><pre class="line-numbers language-none"><code class="language-none">&#123;$MODE FPC&#125; &#123;$M 0,1025&#125; &#123;$R-,Q-,S-,I-&#125; Program T_1508; Type  TEdge &#x3D; Record            s, t, w : LongInt;          End; Var  edge : Array [ 1..50000 ] Of TEdge;  d : Array [ 0..50000 ] Of LongInt;  n, i, a, b, c, max : LongInt; Procedure Bellman_Ford; Var  i : LongInt;  flag : Boolean; Begin  For i :&#x3D; 0 To max Do    d[ i ] :&#x3D; 0;  Repeat    Flag :&#x3D; True;    For i :&#x3D; 1 To n Do    With edge[ i ] Do      If (d[ s ] + w &lt; d[ t ]) Then      Begin        d[ t ] :&#x3D; d[ s ] + w;        Flag :&#x3D; False;      End;    For i :&#x3D; 1 To max Do      If (d[ i-1 ] + 1 &lt; d[ i ]) Then      Begin        d[ i ] :&#x3D; d[ i-1 ] + 1;        Flag :&#x3D; False;      End;    For i :&#x3D; max DownTo 1 Do      If (d[ i ] &lt; d[ i-1 ]) Then      Begin        d[ i-1 ] :&#x3D; d[ i ];        Flag :&#x3D; False;      End;  Until Flag; End; Begin  While NOT EOF Do  Begin    Readln(n);    max :&#x3D; 0;    For i :&#x3D; 1 To n Do    Begin      Readln(a, b, c);      If (b &gt; max) Then max :&#x3D; b;      edge[ i ].s :&#x3D; b; edge[ i ].t :&#x3D; a - 1; edge[ i ].w :&#x3D; -c;    End;    Bellman_Ford;    Writeln(d[ max ] - d[ 0 ]);  End; End.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例三：ZJU1420<br>Cashier Employment</p><hr><p>Time limit: 10 Seconds   Memory limit: 32768K<br>Total Submit: 34   Accepted Submit: 10   </p><hr><p>A supermarket in Tehran is open 24 hours a day every day and needs a number of cashiers to fit its need. The supermarket manager has hired you to help him, solve his problem. The problem is that the supermarket needs different number of cashiers at different times of each day (for example, a few cashiers after midnight, and many in the afternoon) to provide good service to its customers, and he wants to hire the least number of cashiers for this job.<br>The manager has provided you with the least number of cashiers needed for every one-hour slot of the day. This data is given as R(0), R(1), …, R(23): R(0) represents the least number of cashiers needed from midnight to 1:00 A.M., R(1) shows this number for duration of 1:00 A.M. to 2:00 A.M., and so on. Note that these numbers are the same every day. There are N qualified applicants for this job. Each applicant i works non-stop once each 24 hours in a shift of exactly 8 hours starting from a specified hour, say ti (0 &lt;= ti &lt;= 23), exactly from the start of the hour mentioned. That is, if the ith applicant is hired, he/she will work starting from ti o’clock sharp for 8 hours. Cashiers do not replace one another and work exactly as scheduled, and there are enough cash registers and counters for those who are hired.<br>You are to write a program to read the R(i) ‘s for i=0…23 and ti ‘s for i=1…N that are all, non-negative integer numbers and compute the least number of cashiers needed to be employed to meet the mentioned constraints. Note that there can be more cashiers than the least number needed for a specific slot.</p><p>Input</p><p>The first line of input is the number of test cases for this problem (at most 20). Each test case starts with 24 integer numbers representing the R(0), R(1), …, R(23) in one line (R(i) can be at most 1000). Then there is N, number of applicants in another line (0 &lt;= N &lt;= 1000), after which come N lines each containing one ti (0 &lt;= ti &lt;= 23). There are no blank lines between test cases.</p><p>Output</p><p>For each test case, the output should be written in one line, which is the least number of cashiers needed.</p><p>If there is no solution for the test case, you should write No Solution for that case.</p><p>Sample Input</p><p>1<br>1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1<br>5<br>0<br>23<br>22<br>1<br>10</p><p>Sample Output</p><p>1</p><hr><p>Problem Source: Asia 2000, Tehran (Iran) </p><hr><p>[参考程序]：</p><pre class="line-numbers language-none"><code class="language-none">const  maxn&#x3D;230;var  g:array[-1..maxn,1..4]of record      n,v:integer;    end;  d,xu,num,a:array[-1..maxn]of integer;  ans:integer;  x,n,casen,o,i:integer;  flag:boolean;procedure add(a,b,c:integer);  begin    inc(num[a]);    g[a,num[a]].n:&#x3D;b;    g[a,num[a]].v:&#x3D;c;  end;procedure init;  var i:integer;  begin    fillchar(g,sizeof(g),0);    for i:&#x3D;0 to 23 do begin      if i&lt;&#x3D;7  then add(i+16,i,xu[i]-ans)               else add(i-8,i,xu[i]);      add(i-1,i,0);      add(i,i-1,-a[i]);    end;  end;function bellman_ford:boolean;  var i,j,k:integer;      ff:boolean;  begin    bellman_ford:&#x3D;false;    fillchar(d,sizeof(d),0);    for i:&#x3D;1 to 23 do begin      ff:&#x3D;true;      for j:&#x3D;-1 to 23 do        for k:&#x3D;1 to num[j] do          if d[j]+g[j,k].v&gt;d[g[j,k].n] then begin            d[g[j,k].n]:&#x3D;d[j]+g[j,k].v;ff:&#x3D;false;          end;      if ff then break;    end;    for j:&#x3D;0 to 23 do if d[j]-d[j-1]&gt;a[j] then exit;    for j:&#x3D;-1 to 23 do      for k:&#x3D;1 to num[j] do        if d[j]+g[j,k].v&gt;d[g[j,k].n] then exit;  &#123;  for i:&#x3D;0 to 23 do begin      if (i&lt;&#x3D;7)and (d[i]-d[i+16]&lt;xu[i]-d[23]) or         (i&gt;&#x3D;8)and (d[i]-d[i-8]&lt;xu[i]) then exit    end;&#125;    bellman_ford:&#x3D;n&lt;&gt;4&#x2F;&#x2F;d[23]&#x3D;ans;  end;begin&#x2F;&#x2F;  assign(input,&#39;e:\input.txt&#39;);reset(input);assign(output,&#39;e:\output.txt&#39;);rewrite(output);  readln(casen);  for o:&#x3D;1 to casen do begin    for i:&#x3D;0 to 23 do read(xu[i]);readln;readln(n);    for i:&#x3D;1 to n do begin read(x);inc(a[x]);end;    flag:&#x3D;false;    for ans:&#x3D;0 to n do begin      fillchar(d,sizeof(d),0);      fillchar(num,sizeof(num),0);      init;      if bellman_ford then begin        flag:&#x3D;true;        break;      end;    end;    if flag then writeln(ans) else writeln(&#39;No Solution&#39;);  end;&#x2F;&#x2F;  close(output);close(input);end.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> IT </category>
          
          <category> 国家集训队论文集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国家集训队论文集 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
